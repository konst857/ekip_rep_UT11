Перем мфНаименованиеСвойстваРазмер;
Перем мфНаименованиеСвойстваРазмерRUS;
Перем мфНаименованиеСвойстваАртикул;

&НаСервере
Процедура ИзменитьФорматХарактеристикНаСервере()
	// Вставить содержимое обработчика.
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ОбъектОбработки=РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработки.ПолучитьМакет("МакетОшибок");
    ТабДок=Новый ТабличныйДокумент;
	
	//мфНаименованиеСвойстваРазмер="Размер (Одежда и обувь с характеристиками (индивидуальные) (Для характеристик))";
	//мфНаименованиеСвойстваРазмерRUS="Размер RUS (Одежда и обувь с характеристиками (индивидуальные) (Для характеристик))";
	//мфНаименованиеСвойстваАртикул="Артикул (Одежда и обувь с характеристиками (индивидуальные) (Для характеристик))";
	
	мфНаименованиеСвойстваРазмер="Размер (Справочник ""Характеристики номенклатуры"" (Общие))";
	мфНаименованиеСвойстваАртикул="Артикул (Справочник ""Характеристики номенклатуры"" (Общие))";

	
	//ТзСвойств=ПолучитьТзСвойств(НовыйВидНоменклатуры.НаборСвойствХарактеристик);
	ТзСвойств=ПолучитьТзСвойств(НаборСвВ);

    СвойствоРазмер=НайтиСвоВо(ТзСвойств, мфНаименованиеСвойстваРазмер);
	СвойстваАртикул=НайтиСвоВо(ТзСвойств, мфНаименованиеСвойстваАртикул);
	//СвойствоРазмерRUS=НайтиСвоВо(ТзСвойств, мфНаименованиеСвойстваРазмерRUS);

	
	ДопПараметры=Новый Структура("Макет, ТабДок", Макет, ТабДок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
		|	ТоварыНаСкладахОстаткиИОбороты.Характеристика,
		|	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
		|	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
		|	СпрТовары.Ссылка КАК НоменклатураСпр
		|ИЗ
		|	Справочник.Номенклатура КАК СпрТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
		|				,
		|				,
		|				,
		|				,
		|				Номенклатура В ИЕРАРХИИ (&ВыбПапка)
		|					И Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = &ИспХарактеристики) КАК ТоварыНаСкладахОстаткиИОбороты
		|		ПО (ТоварыНаСкладахОстаткиИОбороты.Номенклатура = СпрТовары.Ссылка)
		|ГДЕ
		|	СпрТовары.ЭтоГруппа = ЛОЖЬ
		|	И СпрТовары.Ссылка В ИЕРАРХИИ(&ВыбПапка)
		|	И СпрТовары.ВидНоменклатуры.ИспользованиеХарактеристик = &ИспХарактеристики";
	
	Запрос.УстановитьПараметр("ВыбПапка", ОбрабатыватьПапку.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИспХарактеристики", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТзЗаменяемыхХарактертиск=Новый ТаблицаЗначений;
	ТзЗаменяемыхХарактертиск.Колонки.Добавить("ЗаменяемаяСсылка");
	ТзЗаменяемыхХарактертиск.Колонки.Добавить("НоваяСсылка");
	ТзЗаменяемыхХарактертиск.Колонки.Добавить("Номенклатура");
	
	ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Информация,,,"Начало создания спр");

	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Номенклатура=Null Тогда   // нет движений по характеристикам, просто изменим вид номенклатуры
		      ИзменитьВидНомеклатуры(ВыборкаДетальныеЗаписи.НоменклатураСпр);
			  Продолжить;
		КонецЕсли;	
		
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СтруктХарактеристики=Новый Структура("Характеристика, Наименование, Размер", Неопределено, Строка(ВыборкаДетальныеЗаписи.Характеристика), СоздатьРазмер(Строка(ВыборкаДетальныеЗаписи.Характеристика),СвойствоРазмер ));
		СтруктХарактеристики.Вставить("Артикул", ВыборкаДетальныеЗаписи.Номенклатура.Артикул);

		//СтруктХарактеристики.Вставить("РазмерRUS", ВыборкаДетальныеЗаписи.Номенклатура.Артикул);
        ИзменитьВидНомеклатуры(ВыборкаДетальныеЗаписи.Номенклатура);
 
		СоздатьОбновитьХарактеристику(ВыборкаДетальныеЗаписи.Номенклатура, СтруктХарактеристики, ТзСвойств, ДопПараметры);
		
		новаяСтрокаТзХарактеристики=ТзЗаменяемыхХарактертиск.Добавить();
		новаяСтрокаТзХарактеристики.ЗаменяемаяСсылка=ВыборкаДетальныеЗаписи.Характеристика;
		новаяСтрокаТзХарактеристики.НоваяСсылка=СтруктХарактеристики.Характеристика;
        новаяСтрокаТзХарактеристики.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");   

	Если ЗаменитьСсылки и ТзЗаменяемыхХарактертиск.Количество()>0 Тогда
		ЗаменитьСссылки(ТзЗаменяемыхХарактертиск);
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаменитьСссылки(пТзЗаменяемыхХарактертиск)

	   ТекстОшибки="";

	ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Информация,,,"Начало замены ссылок в спр и док ");
	
	МассивЗаменякемыхТоваров=пТзЗаменяемыхХарактертиск.ВыгрузитьКолонку("Номенклатура");
	ТзНайденныхСсылок=НайтиСсылки(МассивЗаменякемыхТоваров); 
	ТзНайденныхСсылок.Колонки[0].Имя="Ссылка";
    ТзНайденныхСсылок.Колонки[1].Имя="ОбъектыСодержащиеСсылку";
	КопияТз=ТзНайденныхСсылок.Скопировать();
	КопияТз.Свернуть("ОбъектыСодержащиеСсылку");
	МассивОбъектовСодержащийСсылку=КопияТз.ВыгрузитьКолонку("ОбъектыСодержащиеСсылку");
	
	Для Каждого ОбъектСодержащийСсылку из МассивОбъектовСодержащийСсылку Цикл
		
		МассивНайденныхСтрокТз=ТзНайденныхСсылок.НайтиСтроки(Новый Структура("ОбъектыСодержащиеСсылку", ОбъектСодержащийСсылку));

		
		Если МассивЗаменякемыхТоваров.количество()>0 Тогда
			Заменить_ссылку(МассивНайденныхСтрокТз[0][1], МассивНайденныхСтрокТз,пТзЗаменяемыхХарактертиск ,МассивНайденныхСтрокТз[0][2], ТекстОшибки);
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
	если ЗаменитьСсылки_в_Регистрах Тогда
		ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Информация,,,"Начало замены ссылок в регистрах ");
		ЗаменитьСсылку_в_регистрах(МассивЗаменякемыхТоваров, пТзЗаменяемыхХарактертиск ,ТекстОшибки);
		ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Информация,,,"Конец замены ссылок в регистрах ");
		
	КонецЕсли;
	

	

КонецПроцедуры





Процедура Заменить_ссылку(пСсылкаГдеМеняем, пМассивСтрокТзСсылки, пТз, пМетаданыеОбъектаГдеМеням,  ТекстОшибки="");
	
	ИмяТч="Товары";
	ИмяРеквизита="Номенклатура";
    ПереводитьДок=Истина;	
	МассивОбъектДляУдаления=Новый Массив;
	
	//Если Метаданные.Справочники.Содержит(пМетаданыеОбъектаГдеМеням) Тогда
	//	Возврат;
	//КонецЕсли;	
	
	Если   Метаданные.Документы.Содержит(пМетаданыеОбъектаГдеМеням) или Метаданные.Справочники.Содержит(пМетаданыеОбъектаГдеМеням) Тогда
		ОбъектСодеражащийСсылку=пСсылкаГдеМеняем.ПолучитьОбъект();
	Иначе
		ОбъектСодеражащийСсылку=пСсылкаГдеМеняем;
	КонецЕсли;
	
	
	ДокИзменен=Ложь;
	
	//Для Каждого СтрокаТз из пМассивСтрокТзСсылки Цикл
	//	
	//	пСтруктДляЗамены=ПолучитьСтруктуруНомХарДляЗамены(СтрокаТз[0], пТз);
	//	
	//	Если НЕ  ЗначениеЗаполнено(пСтруктДляЗамены.НоваяСсылка) Тогда     // нет хар-к
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если 	 Метаданные.Справочники.Содержит(пМетаданыеОбъектаГдеМеням) Тогда
	//		
	//		ЗаменитьСсылку_в_Справочнике(пСсылкаГдеМеняем, пСтруктДляЗамены);
	//		
	//	КонецЕсли;
	//	
	//	МассивОбъектДляУдаления.Добавить(СтрокаТз[0]);

	//	
	//КонецЦикла;
	
	
	Если   Метаданные.Документы.Содержит(пМетаданыеОбъектаГдеМеням) или  Метаданные.Справочники.Содержит(пМетаданыеОбъектаГдеМеням)   Тогда
		ЗаменитьСсылку_в_Документе(пСсылкаГдеМеняем, пМассивСтрокТзСсылки, пТз ,ТекстОшибки);
	КонецЕсли;
	
	//Если ДокИзменен Тогда
	//	ЗаписатьДокумент(ОбъектСодеражащийСсылку, пМетаданыеОбъектаГдеМеням, ПереводитьДок);
	//КонецЕсли;
	
	ПометитьНаУдалениеЗамененныеСсылки(МассивОбъектДляУдаления);

	
КонецПроцедуры


Функция НайтиСсылки(пМассивИскомыхСсылок)

	Исключить = Новый Массив;
	Исключить.Добавить("Справочник.ХарактеристикиНоменклатуры");
	
	Включить = Новый Массив;
	
	МассивДляОтбора = Новый Массив;
	МассивДляОтбора.Добавить("РегистрыНакопления.СебестоимостьТоваров");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПолноеИмя", МассивДляОтбора);
    Отбор=Неопределено;
	
	ДеревоМД = ДеревоМетаданныхКонфигурации(Отбор);
	Для Каждого Стр Из ДеревоМД.Строки Цикл
		Для Каждого Стр1 Из Стр.Строки Цикл
			Включить.Добавить(Стр1.ПолноеИмя)
		КонецЦикла;
	КонецЦикла;
	
	ПустойМассив = Новый Массив;
	ТабСсылок = НайтиПоСсылкам(пМассивИскомыхСсылок, ПустойМассив, Включить, Исключить);
	
	Возврат ТабСсылок;
	
КонецФункции


// Получает дерево метаданных конфигурации с заданным отбором по объектам метаданных.
//
// Параметры:
//   Отбор - Структура - содержит значения элементов отбора.
//						Если параметр задан, то будет получено дерево метаданных в соответствии с заданным отбором:
//						Ключ - Строка - имя свойства элемента метаданных;
//						Значение - Массив - множество значений для отбора.
//
// Пример инициализации переменной "Отбор":
//
// Массив = Новый Массив;
// Массив.Добавить("Константа.ИспользоватьСинхронизациюДанных");
// Массив.Добавить("Справочник.Валюты");
// Массив.Добавить("Справочник.Организации");
// Отбор = Новый Структура;
// Отбор.Вставить("ПолноеИмя", Массив);
// 
//  Возвращаемое значение:
//   ДеревоЗначений - дерево описания метаданных конфигурации.
//
Функция ДеревоМетаданныхКонфигурации(Отбор = Неопределено) Экспорт
	
	ИспользоватьОтбор = (Отбор <> Неопределено);
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("Константы",               НСтр("ru = 'Константы'"),                 БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Справочники",             НСтр("ru = 'Справочники'"),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Документы",               НСтр("ru = 'Документы'"),                 БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыСчетов",             НСтр("ru = 'Планы счетов'"),              БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,       КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыСведений",        НСтр("ru = 'Регистры сведений'"),         БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыНакопления",      НСтр("ru = 'Регистры накопления'"),       БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыБухгалтерии",     НСтр("ru = 'Регистры бухгалтерии'"),      БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыРасчета",         НСтр("ru = 'Регистры расчета'"),          БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы'"),           БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Задачи",                  НСтр("ru = 'Задачи'"),                    БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 КоллекцииОбъектовМетаданных);
	
	// Возвращаемое значение функции.
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	ДеревоМетаданных.Колонки.Добавить("Синоним");
	ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			Если ИспользоватьОтбор Тогда
				
				ОбъектПрошелФильтр = Истина;
				Для Каждого ЭлементОтбора Из Отбор Цикл
					
					Значение = ?(ВРег(ЭлементОтбора.Ключ) = ВРег("ПолноеИмя"), ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных[ЭлементОтбора.Ключ]);
					Если ЭлементОтбора.Значение.Найти(Значение) = Неопределено Тогда
						ОбъектПрошелФильтр = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ОбъектПрошелФильтр Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваОМ = СтрокаДерева.Строки.Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем строки без подчиненных элементов.
	Если ИспользоватьОтбор Тогда
		
		// Используем обратный порядок обхода дерева значений.
		КоличествоЭлементовКоллекции = ДеревоМетаданных.Строки.Количество();
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
			
			ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
			СтрокаДерева = ДеревоМетаданных.Строки[ТекущийИндекс];
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДеревоМетаданных.Строки.Удалить(ТекущийИндекс);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

Процедура НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	
КонецПроцедуры

Функция ЗаменитьСсылку_в_Документе(пСсылкаГдеМеняем, МассивСтрокТЗ_Сслыок_КоторыеМеняем,пТЗ, ТекстОшибки)
	
	
	ОбъектГдеМеняем = пСсылкаГдеМеняем.ПолучитьОбъект();
	МассивСсылокКоторыеМеняем=Новый Массив;
	
	Для Каждого СтрокаТЗ из МассивСтрокТЗ_Сслыок_КоторыеМеняем Цикл
		
		МассивСсылокКоторыеМеняем.Добавить(СтрокаТЗ[0]);

	КонецЦикла;	
	
	ФрагментXML = ОбработатьФрагментXML(ОбъектГдеМеняем, МассивСсылокКоторыеМеняем,"", пТЗ);
	
	Если Не ЗаписатьИзмененныйОбъект(ФрагментXML, ТекстОшибки) Тогда
		//ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;

   Возврат Истина;
   
КонецФункции


&НаСервереБезКонтекста
Функция ОбработатьФрагментXML(Объект, СсылкиПоиска, СсылкаЗаменаУИД="",  пТз=Неопределено)
	
	
	//СтрокаПоискаНоменклатура="<Номенклатура>2ef0a008-2e7c-11de-8c0e-00115b415aab</Номенклатура>"+Символ(10)+"   <Характеристика>00000000-0000-0000-0000-000000000000</Характеристика>"
	
	
	ФрагментXML = Новый ЗаписьXML;
	ФрагментXML.УстановитьСтроку();
	
	ЗаписатьXML(ФрагментXML, Объект);
	СтрФрагментXML = ФрагментXML.Закрыть();
	
	Для Каждого СсылкаПоиска Из СсылкиПоиска Цикл
		
		СсылкаПоискУИД = Строка(СсылкаПоиска.УникальныйИдентификатор());
		
		МассивСтрокДляЗамены=ПолучитьМассивСтрокТзДляЗамены(СсылкаПоиска, пТз);
		
		Для Каждого СтрокаТз из МассивСтрокДляЗамены Цикл
			//СтруктЗамены=ПолучитьСтруктуруНомДляЗамены(СсылкаПоиска, ,пТз);
			
			//УИДХарактеристики=Строка(СтруктЗамены.Характеристика.УникальныйИдентификатор());
			УИДХарактеристики=Строка(СтрокаТз.НоваяСсылка.УникальныйИдентификатор());
			
			СсылкаЗаменаУИД=Строка(СтрокаТз.НоваяСсылка.УникальныйИдентификатор());
			УИДХарактеристикаКоторуюМеняем=Строка(СтрокаТз.ЗаменяемаяСсылка.УникальныйИдентификатор());
			
			Если УИДХарактеристики<>Неопределено Тогда
				ГУИД_Номенклатуры=Строка(СтрокаТз.Номенклатура.УникальныйИдентификатор());
				СтрФрагментXML=ЗаменитьГиуд_Характеристики(СтрФрагментXML, СсылкаЗаменаУИД, УИДХарактеристикаКоторуюМеняем, ГУИД_Номенклатуры, Объект.Метаданные());
			КонецЕсли;	
		КонецЦикла;
		//СтрФрагментXML = СтрЗаменить(СтрФрагментXML, СсылкаПоискУИД, СсылкаЗаменаУИД);
		
	КонецЦикла;
	
	Возврат СтрФрагментXML;
		
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьМассивСтрокТзДляЗамены(пЗаменямаяСсылка,  пТзСоотвествийТоваров)

	 СтуктДляЗмены=Новый Структура("Номенклатура", пЗаменямаяСсылка );
	
	  //МассивСтрокДЗ=пДзСоотвествийТоваров.Строки.найтиСтроки(Новый Структура("Ссылка", пЗаменяемаяНоменклатура));
	  
	  массивСтрокТЗ=пТзСоотвествийТоваров.найтиСтроки(СтуктДляЗмены);
	  
	  Возврат массивСтрокТЗ;
	  
	  //НоваяСсылка=Неопределено;
	  ////Номенклатура=Неопределено;
	  //
	  //Если массивСтрокТЗ.Количество()>0 Тогда
	  //     
	  //   НоваяСсылка=массивСтрокТЗ[0].НоваяСсылка; 
	  //   //Номенклатура =массивСтрокТЗ[0].Номенклатура;
	  //КонецЕсли;  
	  //
	  //СтуктДляЗмены.Вставить("НоваяСсылка", НоваяСсылка);
	  ////СтуктДляЗмены.Вставить("Номенклатура", Номенклатура);
	  //
	  //Возврат СтуктДляЗмены;
	  
КонецФункции // ПолучитьСтруктНомХарДляЗамены()



&НаСервереБезКонтекста
Функция ЗаменитьГиуд_Характеристики(Знач пИсходнаяСтрока,  пГуидНовый, пГуидКоторыйИщем,  пГуидНоменклатуры, пМетаданныеОбъекта)
	
	//ЧислоВхождений=СтрЧислоВхождений(пИсходнаяСтрока, пГуидКоторыйИщем);
	ЧислоВхожденийНоменклатуры=СтрЧислоВхождений(пИсходнаяСтрока, пГуидНоменклатуры);
    ЧислоВхожденийХарактеристики= СтрЧислоВхождений(пИсходнаяСтрока, пГуидКоторыйИщем);

	Если НЕ ЗначениеЗаполнено(ЧислоВхожденийХарактеристики) Тогда
		Возврат пИсходнаяСтрока;
	КонецЕсли;	
	
    ДлиннаТэгаНоменклатура=51;
	//МаксКоличествоСимволовМеждуТэгами=94;
	МаксКоличествоСимволовМеждуТэгами=ПолучитьДопустимоеРасстояниеДляОбъекта(пМетаданныеОбъекта);

	ДлиннаСтроки=СтрДлина(пИсходнаяСтрока);
	//ДлиннаТэгаХарактеристика=68;
	ДлиннаТэгаХарактеристика=36;

	//МеняемСвязку=Ложь;
	
	//ТэгДляПустойХарактеристики="<Характеристика>00000000-0000-0000-0000-000000000000</Характеристика>";
	//ТэгДляНовойХарактеристики="<Характеристика>"+пГуидХарактеристики+"</Характеристика>";
	//ТэгДляНовойХарактеристики="<Характеристика>"+пГуидНовый+"</Характеристика>";
	ТэгДляНовойХарактеристики=пГуидНовый;
	
	Для i=1 по  ЧислоВхожденийНоменклатуры Цикл
		
		ПервыйСимволНоменклатуры=СтрНайти(пИсходнаяСтрока, пГуидНоменклатуры,,,i);
		
		ПервыйСимволХарактеристики=СтрНайти(пИсходнаяСтрока, пГуидКоторыйИщем,НаправлениеПоиска.СНачала,ПервыйСимволНоменклатуры,);

		//ПервыйСимволХарактеристики=СтрНайти(пИсходнаяСтрока, ТэгДляПустойХарактеристики,НаправлениеПоиска.СНачала,ПервыйСимволНоменклатуры,);

		
		Расстояние=ПервыйСимволХарактеристики-ПервыйСимволНоменклатуры-ДлиннаТэгаНоменклатура;
		
		Если Расстояние<=МаксКоличествоСимволовМеждуТэгами и Расстояние>0 Тогда     // можно менять хар-ку
			//МеняемСвязку=Истина;
			пИсходнаяСтрока=Лев(пИсходнаяСтрока, ПервыйСимволХарактеристики-1)+ТэгДляНовойХарактеристики+Прав(пИсходнаяСтрока,ДлиннаСтроки-ПервыйСимволХарактеристики-ДлиннаТэгаХарактеристика+1);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Расстояние для объекта превышено "+Строка(пМетаданныеОбъекта)+" оно ="+Строка(Расстояние)+" "+Лев(пМетаданныеОбъекта, 100);
			Сообщение.Сообщить();
		КонецЕсли;	
		
		
	КонецЦикла;	

	Возврат пИсходнаяСтрока;
	
КонецФункции // ЗаменитьПаруНоменклатураХарактеристика_в_Строке()

&НаСервереБезКонтекста
Функция ПолучитьДопустимоеРасстояниеДляОбъекта(пМетаданныеОбъекта)
	
	РасстояниеПоУмолчанию=94;
	
	 СоотвРастояниние=Новый Соответствие;
	 СоотвРастояниние.Вставить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры, 18);
	 СоотвРастояниние.Вставить(Метаданные.Справочники.СоглашенияСКлиентами, 20);
	 Попытка
		 СоотвРастояниние.Вставить(Метаданные.Документы.ПоступлениеТоваровУслуг, 109);
	 исключение
		 СоотвРастояниние.Вставить(Метаданные.Документы.ПоступлениеТоваров, 109);
	 КонецПопытки;
	 
	 СоотвРастояниние.Вставить(Метаданные.Документы.УстановкаЦенНоменклатуры, 20);
	 СоотвРастояниние.Вставить(Метаданные.Документы.ВводОстатков, 20);
	 СоотвРастояниние.Вставить(Метаданные.Документы.ОтчетОРозничныхПродажах, 20);
 	 СоотвРастояниние.Вставить(Метаданные.Документы.ЧекККМ, 20);
     СоотвРастояниние.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг, 109);

	 СоотвРастояниние.Вставить(Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций, 20);
 	 СоотвРастояниние.Вставить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры, 20);
 	 СоотвРастояниние.Вставить(Метаданные.РегистрыСведений.ЦеныНоменклатуры, 20);
  	 СоотвРастояниние.Вставить(Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков, 20);

	 
 	 СоотвРастояниние.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций, 20);
 	 СоотвРастояниние.Вставить(Метаданные.РегистрыНакопления.ТоварыНаСкладах, 20);
  	 СоотвРастояниние.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, 20);
  	 СоотвРастояниние.Вставить(Метаданные.РегистрыНакопления.СвободныеОстатки, 20);

 
	 
 
	 
	 Расстояние=СоотвРастояниние.Получить(пМетаданныеОбъекта);
	 
	 Расстояние=?(Расстояние=Неопределено, РасстояниеПоУмолчанию, Расстояние);
	 
     Возврат Расстояние;
КонецФункции // ПолучитьДопустимоеРасстояниеДляОбъекта()


&НаСервереБезКонтекста
Функция ЗаписатьИзмененныйОбъект(ФрагментXML, ТекстОшибки)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ФрагментXML);
	
	Попытка
		
		Объект = ПрочитатьXML(ЧтениеXML);
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	Попытка // Планы обмена свойства ОбменДанными не имеют
		
		Объект.ОбменДанными.Загрузка = Истина; 
		Объект.ОбменДанными.Получатели.Автозаполнение = Ложь;
		
	Исключение
	КонецПопытки;
	
	
	Если    Метаданные.Документы.Содержит(Объект.Метаданные())  Тогда
		
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Попытка
			Объект.Записать();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНомХарДляЗамены(пЗаменямаяСсылка, пТзСоотвествийТоваров)

	 СтуктДляЗмены=Новый Структура("ЗаменяемаяСсылка", пЗаменямаяСсылка);
	 СтуктДляЗмены=Новый Структура("Номенклатура", пЗаменямаяСсылка);
	
	  //МассивСтрокДЗ=пДзСоотвествийТоваров.Строки.найтиСтроки(Новый Структура("Ссылка", пЗаменяемаяНоменклатура));
	  
	  массивСтрокТЗ=пТзСоотвествийТоваров.найтиСтроки(СтуктДляЗмены);
	  
	  НоваяСсылка=Неопределено;
	  Номенклатура=Неопределено;
	  
	  Если массивСтрокТЗ.Количество()>0 Тогда
		   
		 НоваяСсылка=массивСтрокТЗ[0].НоваяСсылка; 
		 Номенклатура =массивСтрокТЗ[0].Номенклатура;
		 ЗаменяемаяСсылка =массивСтрокТЗ[0].ЗаменяемаяСсылка;
	  КонецЕсли;  
	  
	  СтуктДляЗмены.Вставить("НоваяСсылка", НоваяСсылка);
	  СтуктДляЗмены.Вставить("Номенклатура", Номенклатура);
	  СтуктДляЗмены.Вставить("ЗаменяемаяСсылка", ЗаменяемаяСсылка);
  
	  Возврат СтуктДляЗмены;
	  
КонецФункции // ПолучитьСтруктНомХарДляЗамены()




Процедура ПометитьНаУдалениеЗамененныеСсылки(Знач МассивОбъектДляУдаления)
	
	Для Каждого ЭлементМассива из МассивОбъектДляУдаления Цикл
		
		//Если ЭлементМассива.ВидНоменклатуры=ВидНоменклатуры Тогда
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Попытка ошибочного удалния "+Строка(ЭлементМассива);
		//	Сообщение.Сообщить();
		//	Продолжить;
		//КонецЕсли;	
		
		ОбъектСпр=ЭлементМассива.ПолучитьОбъект();
		ОбъектСпр.пометкаУдаления=Истина;
		ОбъектСпр.Описание="##";
		
		Попытка
			
			ОбъектСпр.записать();
			СообщитьСерв("Удален "+ОбъектСпр, ОбъектСпр);

			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры


Функция ЗаменитьСсылку_в_регистрах(пМассивЗаменяемыхСсылок, пДзСоотвествийТоваров ,ТекстОшибки)
	
	пСтруктЗамены=ПолучитьСтруктуруНомХарДляЗамены(пМассивЗаменяемыхСсылок[0], пДзСоотвествийТоваров);

	//СсылкаЗаменаУИД = Строка(пСтруктЗамены.НоваяСсылка.УникальныйИдентификатор());
	//СсылкиПоиска=Новый Массив;
	//СсылкиПоиска.Добавить(пСтруктЗамены.ЗаменямаяСсылка);
	
	//МассивЗаменяемыхСсылок=Новый Массив;
	
	//Для Каждого ЭлМассиава из пМассивЗаменякемыхТоваров Цикл
	//	
		//МассивЗаменяемыхСсылок.Добавить(пЗаменяемаяСсылка);
	//	
	//КонецЦикла;	

	НоменклатураСсылка=пСтруктЗамены.номенклатура;
	
	//ОписаниеРегистровСведений 		= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыСведений, 		пСтруктЗамены.НоваяСсылка);
	//ОписаниеРегистровНакопления 	= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыНакопления, 	пСтруктЗамены.НоваяСсылка);
	//ОписаниеРегистровБухгалтерии 	= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыБухгалтерии, 	пСтруктЗамены.НоваяСсылка);
	//ОписаниеРегистровРасчета 		= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыРасчета, 		пСтруктЗамены.НоваяСсылка);
	
	ОписаниеРегистровСведений 		= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыСведений, 		НоменклатураСсылка);
	ОписаниеРегистровНакопления 	= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыНакопления, 	НоменклатураСсылка);
	ОписаниеРегистровБухгалтерии 	= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыБухгалтерии, 	НоменклатураСсылка);
	ОписаниеРегистровРасчета 		= ПолучитьОписаниеРегистровДляЗамены(Метаданные.РегистрыРасчета, 		НоменклатураСсылка);

	
	
	ОписаниеРегистров = ОписаниеРегистровСведений;
	ОбъединитьОписания(ОписаниеРегистров.ПодчинениеРегистратору, ОписаниеРегистровНакопления.ПодчинениеРегистратору);
	ОбъединитьОписания(ОписаниеРегистров.ПодчинениеРегистратору, ОписаниеРегистровБухгалтерии.ПодчинениеРегистратору);
	ОбъединитьОписания(ОписаниеРегистров.ПодчинениеРегистратору, ОписаниеРегистровРасчета.ПодчинениеРегистратору);
	
	Если Не ОбработатьЗаписиРегистров(ОписаниеРегистров,  пМассивЗаменяемыхСсылок, Неопределено, Неопределено,ТекстОшибки, пДзСоотвествийТоваров) Тогда
		//ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;

	

КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьЗаписиРегистров(ОписаниеРегистров, СсылкиПоиска , СсылкаЗамена, СсылкаЗаменаУИД, ТекстОшибки,пДз=Неопределено)
	//

	МассивДляОтбора=Новый Массив;
	МассивДляОтбора.Добавить("СебестоимостьТоваров");
	МассивДляОтбора.Добавить("ВыручкаИСебестоимостьПродаж");
	МассивДляОтбора.Добавить("СоответствияОбъектовИнформационныхБаз");
	//МассивДляОтбора.Добавить("ABCКлассификацияНоменклатуры");
	//МассивДляОтбора.Добавить("ABCXYZКлассификацияНоменклатуры");
	МассивДляОтбора.Добавить("НаличиеПрисоединенныхФайлов");

	
	
	СсылкаЗамена= СсылкиПоиска[0]; 
	ТипСсылкиДляЗапроса = ПолучитьСупертипДляЗапросаПоЗначению(СсылкаЗамена) + "." + СсылкаЗамена.Метаданные().Имя;
	
	Если ОписаниеРегистров.Свойство("НезависимаяЗапись") Тогда
	
		Для Каждого ОписаниеРегистра Из ОписаниеРегистров.НезависимаяЗапись Цикл
			
			ТекстЗапроса = ПодготовитьТекстЗапросаПоРегиструСНезависимойЗаписью(ТипСсылкиДляЗапроса, ОписаниеРегистра);
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("СсылкиПоиска", СсылкиПоиска);

			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
			
				МенеджерРегистра = ПолучитьМенеджерДляРегистра(ОписаниеРегистра.Ключ);
				
				НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
				
				Если МассивДляОтбора.Найти(НаборЗаписей.Метаданные().Имя)<>Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				
				НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
				
				ФрагментXML = ОбработатьФрагментXML(НаборЗаписей, СсылкиПоиска, "", пДз);
				
				Если Не ЗаписатьИзмененныйОбъект(ФрагментXML, ТекстОшибки) Тогда
					ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Ошибка,,,"Ошибка записи набора "+НаборЗаписей.Метаданные().Имя+" "+ТекстОшибки+" "+ФрагментXML);

//					Возврат Ложь;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Информация,,,"Начало замены в регистрах подч. регистратору ");

	
	Если ОписаниеРегистров.Свойство("ПодчинениеРегистратору") Тогда
		
		ТекстЗапроса = ПодготовитьТекстЗапросаПоРегистрамПодчиненнымРегистратору(ТипСсылкиДляЗапроса, ОписаниеРегистров.ПодчинениеРегистратору);
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("СсылкиПоиска", СсылкиПоиска);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаРегистратор.Следующий() Цикл
					
					Регистратор = ВыборкаРегистратор.Регистратор;
					
					ВыборкаРегистр = ВыборкаРегистратор.Выбрать();
					Пока ВыборкаРегистр.Следующий() Цикл
						
						МенеджерРегистра = ПолучитьМенеджерДляРегистра(ВыборкаРегистр.ПолноеИмяРегистра);
					
						НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
						
						Если МассивДляОтбора.Найти(НаборЗаписей.Метаданные().Имя)<>Неопределено Тогда
							Продолжить;
						КонецЕсли;	

						
						НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
						НаборЗаписей.Прочитать();
						
						Если НаборЗаписей.Количество() > 0 Тогда
							
							ФрагментXML = ОбработатьФрагментXML(НаборЗаписей, СсылкиПоиска, "", пДз);
						
							Если Не ЗаписатьИзмененныйОбъект(ФрагментXML, ТекстОшибки) Тогда
							   	ЗаписьЖурналаРегистрации("ПереходНаХарактеристики", УровеньЖурналаРегистрации.Ошибка,,,"Ошибка записи набора "+НаборЗаписей.Метаданные().Имя+" "+ПолучитьЗначениеОтбора(НаборЗаписей.Отбор, "Номенклатура")+ТекстОшибки+" "+ФрагментXML);
								//Возврат Ложь;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОтбора(пОтбор, пНаименованиеОтбора)

	ЭлементОтбора=пОтбор.Найти(пНаименованиеОтбора);
	
	Если ЭлементОтбора<>Неопределено Тогда
		Возврат ЭлементОтбора.Значение;
	Иначе
		Возврат " ";
	КонецЕсли;	

КонецФункции


&НаСервереБезКонтекста
Функция ДополнитьМассив(ИсходныйМассив, ДополнительныйМассив)
	
	Если ДополнительныйМассив.Количество() > 0 Тогда
		Для Каждого ДополнительныйЭлемент Из ДополнительныйМассив Цикл
			
			ИсходныйМассив.Добавить(ДополнительныйЭлемент);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИсходныйМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеРегистровДляЗамены(КоллекцияМетаданных, СсылкаЗамена)
	
	ИскомыйТип = ТипЗнч(СсылкаЗамена);
	ОписаниеРегистровДляЗамены = Новый Структура;
	
	Супертип = ПолучитьСупертипПоМетаданным(КоллекцияМетаданных);
	Если Супертип <> Неопределено Тогда
		
		ОписаниеРегистровДляЗамены.Вставить("НезависимаяЗапись", 		Новый Соответствие);
		ОписаниеРегистровДляЗамены.Вставить("ПодчинениеРегистратору", 	Новый Соответствие);
		
		Для Каждого ЭлементКоллекции Из КоллекцияМетаданных Цикл
			
			Если (Супертип = "РегистрБухгалтерии") ИЛИ (Супертип = "РегистрРасчета") Тогда
				
				// Метаданные получаем через запрос.
				ОписаниеАтрибутов = ПолучитьОписаниеМетаданныхРегистровЧерезЗапрос(Супертип, ЭлементКоллекции);
				ИменаАтрибутов = ОбработатьКоллекциюРеквизитов(ОписаниеАтрибутов, ИскомыйТип);
				
			Иначе
				
				ИменаАтрибутов = Новый Массив;
				
				ИменаИзмерений 	= ОбработатьКоллекциюРеквизитов(ЭлементКоллекции.Измерения, ИскомыйТип);
				ИменаРеквизитов	= ОбработатьКоллекциюРеквизитов(ЭлементКоллекции.Реквизиты, ИскомыйТип);
				
				ДополнитьМассив(ИменаАтрибутов, ИменаИзмерений);
				ДополнитьМассив(ИменаАтрибутов, ИменаРеквизитов);
				
				ИменаРесурсов = Неопределено;
				Если Супертип = "РегистрСведений" Тогда // Ресурсы регистра сведений могут быть произвольного типа.
					
					ИменаРесурсов = ОбработатьКоллекциюРеквизитов(ЭлементКоллекции.Ресурсы,	ИскомыйТип);
					ДополнитьМассив(ИменаАтрибутов, ИменаРесурсов);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавитьВОписание = (ИменаАтрибутов.Количество() > 0);
			Если ДобавитьВОписание Тогда
				
				Попытка
					ПодчинениеРегистратору = (Строка(ЭлементКоллекции.РежимЗаписи) <> "Независимый");
				Исключение
					ПодчинениеРегистратору = Истина;
				КонецПопытки;
				
				Если Не ПодчинениеРегистратору Тогда
					ОписаниеРегистровДляЗамены.НезависимаяЗапись.Вставить(Супертип + "." + ЭлементКоллекции.Имя, ИменаАтрибутов);
				ИначеЕсли Супертип <> "РегистрБухгалтерии" Тогда
					ОписаниеРегистровДляЗамены.ПодчинениеРегистратору.Вставить(Супертип + "." + ЭлементКоллекции.Имя, ИменаАтрибутов);
				Иначе
					ОписаниеРегистровДляЗамены.ПодчинениеРегистратору.Вставить(Супертип + "." + ЭлементКоллекции.Имя + ".ДвиженияССубконто", ИменаАтрибутов);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеРегистровДляЗамены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМетаданныхРегистровЧерезЗапрос(Супертип, РегистрМетаданные)
	
	КоллекцияАтрибутов = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ " + Супертип + "." + РегистрМетаданные.Имя + 
		?(Супертип = "РегистрБухгалтерии", ".ДвиженияССубконто", ""));
		
	КолонкиРезультатаЗапроса = Запрос.Выполнить().Колонки;
	Для Каждого КолонкаРезультатаЗапроса Из КолонкиРезультатаЗапроса Цикл
		
		Если РегистрМетаданные.Ресурсы.Количество() > 0 Тогда
			Если РегистрМетаданные.Ресурсы.Найти(КолонкаРезультатаЗапроса.Имя) <> Неопределено Тогда
				Продолжить; // Ресурсы всех регистров, за исключение регистра сведений, могут иметь только числовой тип.
			КонецЕсли;
		КонецЕсли;
		
		КоллекцияАтрибутов.Добавить(КолонкаРезультатаЗапроса);
		
	КонецЦикла;
	
	Возврат КоллекцияАтрибутов;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПодготовитьТекстЗапроса(ТипСсылкиДляЗапроса, ИмяТаблицы, Реквизиты, ТекстЗапроса)
	
	ПсевдонимТаблицы = СтрЗаменить(ИмяТаблицы, ".", "");
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ";
	КонецЕсли;
	
	СтрокаУсловия = "";
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Не ПустаяСтрока(СтрокаУсловия) Тогда
			СтрокаУсловия = СтрокаУсловия + " ИЛИ ";
		КонецЕсли;
		
		СтрокаУсловия = СтрокаУсловия + "ВЫРАЗИТЬ(" + ПсевдонимТаблицы + "." + Реквизит + 
			" КАК " + ТипСсылкиДляЗапроса + ") В (&СсылкиПоиска)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ Ссылка 
		|ИЗ " + ИмяТаблицы + " КАК " + ПсевдонимТаблицы + "
		|ГДЕ " + СтрокаУсловия;
		
	Если ИмяТаблицы = ТипСсылкиДляЗапроса Тогда
		ТекстЗапроса = ТекстЗапроса + " И НЕ (Ссылка В (&СсылкиПоиска))";
	КонецЕсли;	
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьТекстЗапросаПоСсылочнымТипам(ОписаниеСсылочныхТиповДляЗамены, СсылкаЗамена)
	
	ТекстЗапроса = "";
	
	Супертип = ПолучитьСупертипДляЗапросаПоЗначению(СсылкаЗамена);
	ТипСсылкиДляЗапроса = Супертип + "." + СсылкаЗамена.Метаданные().Имя;
	
	Для Каждого ЭлементКоллекции Из ОписаниеСсылочныхТиповДляЗамены Цикл
		
		СсылочныйТипИмя 		= ЭлементКоллекции.Ключ;
		СсылочныйТипРеквизиты 	= ЭлементКоллекции.Значение;
		
		Если СсылочныйТипРеквизиты.СтандартныеРеквизиты.Количество() > 0 Тогда
			ТекстЗапроса = ПодготовитьТекстЗапроса(ТипСсылкиДляЗапроса, СсылочныйТипИмя, СсылочныйТипРеквизиты.СтандартныеРеквизиты, ТекстЗапроса);
		КонецЕсли;
		
		Если СсылочныйТипРеквизиты.Реквизиты.Количество() > 0 Тогда
			ТекстЗапроса = ПодготовитьТекстЗапроса(ТипСсылкиДляЗапроса, СсылочныйТипИмя, СсылочныйТипРеквизиты.Реквизиты, ТекстЗапроса);
		КонецЕсли;
		
		Для Каждого ТабличнаяЧасть Из СсылочныйТипРеквизиты.ТабличныеЧасти Цикл
			
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			
			ТекстЗапроса = ПодготовитьТекстЗапроса(ТипСсылкиДляЗапроса, СсылочныйТипИмя + "." + ИмяТабличнойЧасти, РеквизитыТабличнойЧасти, ТекстЗапроса);
			
		КонецЦикла;
		
		Если СсылочныйТипРеквизиты.Свойство("СтандартныеТабличныеЧасти") Тогда
			
			Для Каждого СтандартнаяТабличнаяЧасть Из СсылочныйТипРеквизиты.СтандартныеТабличныеЧасти Цикл
				
				ИмяСтандартнойТабличнойЧасти = ТабличнаяЧасть.Ключ;
				РеквизитыСтандартнойТабличнойЧасти = ТабличнаяЧасть.Значение;
				
				ТекстЗапроса = ПодготовитьТекстЗапроса(ТипСсылкиДляЗапроса, СсылочныйТипИмя + "." + ИмяСтандартнойТабличнойЧасти, РеквизитыСтандартнойТабличнойЧасти, ТекстЗапроса);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьТекстЗапросаПоРегиструСНезависимойЗаписью(ТипСсылкиДляЗапроса, ОписаниеРегистра)
	
	СтрокаУсловия = "";
	
	ПсевдонимТаблицы = СтрЗаменить(ОписаниеРегистра.Ключ, ".", "");
	ПоляРегистра = ОписаниеРегистра.Значение;
	
	Для Каждого ПолеРегистра Из ПоляРегистра Цикл
			
		Если Не ПустаяСтрока(СтрокаУсловия) Тогда
			СтрокаУсловия = СтрокаУсловия + " ИЛИ ";
		КонецЕсли;
		
		СтрокаУсловия = СтрокаУсловия + "ВЫРАЗИТЬ(" + ПсевдонимТаблицы + "." + ПолеРегистра + 
			" КАК " + ТипСсылкиДляЗапроса + ") В (&СсылкиПоиска)";
		
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ * 
		|ИЗ " + ОписаниеРегистра.Ключ + " КАК " + ПсевдонимТаблицы; //+ "
		//|ГДЕ " + СтрокаУсловия;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьТекстЗапросаПоРегистрамПодчиненнымРегистратору(ТипСсылкиДляЗапроса, ОписаниеРегистров)
	
	ТекстЗапроса = "";
	
	Для Каждого ОписаниеРегистра Из ОписаниеРегистров Цикл
	
		ПсевдонимТаблицы = СтрЗаменить(ОписаниеРегистра.Ключ, ".", "");
	
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
	
		СтрокаУсловия = "";
		Для Каждого ПолеРегистра Из ОписаниеРегистра.Значение Цикл
			
			Если Не ПустаяСтрока(СтрокаУсловия) Тогда
				СтрокаУсловия = СтрокаУсловия + " ИЛИ ";
			КонецЕсли;
			
			СтрокаУсловия = СтрокаУсловия + "ВЫРАЗИТЬ(" + ПсевдонимТаблицы + "." + ПолеРегистра + 
				" КАК " + ТипСсылкиДляЗапроса + ") В (&СсылкиПоиска)";
			
		КонецЦикла;
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ Регистратор, """ + ОписаниеРегистра.Ключ + """ КАК ПолноеИмяРегистра 
			|ИЗ " + ОписаниеРегистра.Ключ + " КАК " + ПсевдонимТаблицы + "
			|ГДЕ " + СтрокаУсловия;
			
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ ВложенныйЗапрос.Регистратор, ВложенныйЗапрос.ПолноеИмяРегистра
			|ИЗ (" + ТекстЗапроса + ") КАК ВложенныйЗапрос
			|ИТОГИ ПО ВложенныйЗапрос.Регистратор";
			
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьМенеджерДляРегистра(ПолноеИмяРегистра)
	
	Менеджер = Неопределено;
	
	ПозРазделителя = СтрНайти(ПолноеИмяРегистра, ".");
	Если ПозРазделителя > 0 Тогда
	
		ИмяСуперкласса = Лев(ПолноеИмяРегистра, ПозРазделителя-1);
		ИмяРегистра = Сред(ПолноеИмяРегистра, ПозРазделителя+1);
		
		Попытка
			
			Если ИмяСуперкласса = "РегистрСведений" Тогда
				Менеджер = РегистрыСведений[ИмяРегистра];
				
			ИначеЕсли ИмяСуперкласса = "РегистрНакопления" Тогда
				Менеджер = РегистрыНакопления[ИмяРегистра];
				
			ИначеЕсли ИмяСуперкласса = "РегистрБухгалтерии" Тогда
				
				ИмяРегистра = СтрЗаменить(ИмяРегистра, ".ДвиженияССубконто", "");
				Менеджер = РегистрыБухгалтерии[ИмяРегистра];
				
			ИначеЕсли ИмяСуперкласса = "РегистрРасчета" Тогда
				Менеджер = РегистрыРасчета[ИмяРегистра];
				
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
	
	КонецЕсли;

	Возврат Менеджер;
	
КонецФункции

Процедура СообщитьСерв(пСтрокаСообщения, пОбъект)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = пСтрокаСообщения;
	//Сообщение.Поле = "";
	//Сообщение.КлючДанных=пОбъект.ссылка;
	Сообщение.УстановитьДанные(пОбъект);
	Сообщение.Сообщить();
	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьКоллекциюРеквизитов(КоллекцияРеквизитов, ИскомыйТип)
	
	ИменаРеквизитов = Новый Массив;
	ЭтоОписаниеСтандартныхРеквизитов = (ТипЗнч(КоллекцияРеквизитов) = Тип("ОписанияСтандартныхРеквизитов"));
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если ЭтоОписаниеСтандартныхРеквизитов Тогда
			
			Если Реквизит.Имя <> "Ссылка" Тогда
				
				Если Реквизит.Тип.СодержитТип(ИскомыйТип) Тогда
					ИменаРеквизитов.Добавить(Реквизит.Имя);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(Реквизит) = Тип("КолонкаРезультатаЗапроса") Тогда
				Если Реквизит.ТипЗначения.СодержитТип(ИскомыйТип) Тогда
					ИменаРеквизитов.Добавить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				Если Реквизит.Тип.СодержитТип(ИскомыйТип) Тогда
					ИменаРеквизитов.Добавить(Реквизит.Имя);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИменаРеквизитов;
	
КонецФункции


&НаСервереБезКонтекста
Процедура ОбъединитьОписания(ОбъединеннаяСтруктура, ДобавляемаяСтруктура)
	
	Для Каждого ЭлементСтруктуры Из ДобавляемаяСтруктура Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСупертипДляЗапросаПоЗначению(СсылкаЗамена)
	
	ИскомыйТип = ТипЗнч(СсылкаЗамена);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "Справочник";
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "Документ";
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "Перечисление";
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "ПланВидовХарактеристик";
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "ПланСчетов";
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "ПланВидовРасчета";
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "БизнесПроцесс";
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "Задача";
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ИскомыйТип) Тогда
		Возврат "ПланОбмена";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСупертипПоМетаданным(ЭлементМетаданных)
	
	Если ЭлементМетаданных = Метаданные.Справочники Тогда
		Возврат "Справочник";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.Документы Тогда
		Возврат "Документ";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.ПланыВидовХарактеристик Тогда
		Возврат "ПланВидовХарактеристик";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.ПланыСчетов Тогда
		Возврат "ПланСчетов";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.ПланыВидовРасчета Тогда
		Возврат "ПланВидовРасчета";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.БизнесПроцессы Тогда
		Возврат "БизнесПроцесс";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.Задачи Тогда
		Возврат "Задача";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.ПланыОбмена Тогда
		Возврат "ПланОбмена";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.РегистрыСведений Тогда
		Возврат "РегистрСведений";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.РегистрыНакопления Тогда
		Возврат "РегистрНакопления";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.РегистрыБухгалтерии Тогда
		Возврат "РегистрБухгалтерии";
	КонецЕсли;
	
	Если ЭлементМетаданных = Метаданные.РегистрыРасчета Тогда
		Возврат "РегистрРасчета";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Процедура ИзменитьВидНомеклатуры(пНоменклаутраСсылка)

	ОбъекНом=пНоменклаутраСсылка.ПолучитьОбъект();
	ОбъекНом.видНоменклатуры=НовыйВидНоменклатуры;
	ОбъекНом.ИспользованиеХарактеристик=НовыйВидНоменклатуры.ИспользованиеХарактеристик;
	ОбъекНом.ОБменДанными.Загрузка=истина;
	Попытка
		
		ОбъекНом.Записать();
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(пНоменклаутраСсылка)+" "+ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры


Процедура СоздатьОбновитьХарактеристику(пНоменклатура,пДанныеДляСозданияХарактеристики, пТзСвойсвтв, пДополнительныеРеквизитыНоменклатуры)

	Если пНоменклатура.Пустая() Тогда
		Возврат
	КонецЕсли;	
	
	Если ТипЗнч(пДанныеДляСозданияХарактеристики.Характеристика)= Тип("СправочникСсылка.ХарактеристикиНоменклатуры") и 
		Не пДанныеДляСозданияХарактеристики.Характеристика.Пустая()	 Тогда
		
		// ничего не поменялось, обновлять не нужно
		Если  пДанныеДляСозданияХарактеристики.Характеристика.Наименование=пДанныеДляСозданияХарактеристики.Наименование Тогда
			Возврат;
		КонецЕсли;	
		НоваяХарактеристика=пДанныеДляСозданияХарактеристики.Характеристика.ПолучитьОбъект();
	Иначе
		НоваяХарактеристика=Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	КонецЕсли;
	
	НоваяХарактеристика.Владелец=пНоменклатура;
	НоваяХарактеристика.Наименование=пДанныеДляСозданияХарактеристики.Наименование;
    НоваяХарактеристика.НаименованиеПолное=НоваяХарактеристика.Наименование;

	
	СтруктСвойств=Новый Соответствие;
	СтруктСвойств.Вставить(мфНаименованиеСвойстваРазмер, пДанныеДляСозданияХарактеристики.Размер);
	//СтруктСвойств.Вставить(мфНаименованиеСвойстваРазмерRUS, пДанныеДляСозданияХарактеристики.РазмерRUS);
	СтруктСвойств.Вставить(мфНаименованиеСвойстваАртикул, пДанныеДляСозданияХарактеристики.Артикул);
	СтруктСвойств.Вставить("Наличие в магазинах (Справочник ""Характеристики номенклатуры"" (Общие))", Наличие_в_Магазине);
	
	
	ЗаполнитьТЧ_Свойств(НоваяХарактеристика.ДополнительныеРеквизиты, СтруктСвойств, пТзСвойсвтв);

	
	Попытка
		ТекстСообщение="Записана хар-ка";
		НоваяХарактеристика.Записать();
		пДанныеДляСозданияХарактеристики.Характеристика=НоваяХарактеристика.Ссылка;
		ВывестиИнормацию_о_записиОбъекта(пДополнительныеРеквизитыНоменклатуры, ТекстСообщение, НоваяХарактеристика.Ссылка);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(пНоменклатура)+" "+ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;

	
	
	//ЗаписатьСвойстваХарактеристики(НоваяХарактеристика.Ссылка, СтруктСвойств, пТзСвойсвтв);

	
КонецПроцедуры

Процедура ЗаполнитьТЧ_Свойств( ТчСвойств, СтруктСвойств, ТзСвойсвтв)
	
	
	Для Каждого Свойство из  СтруктСвойств Цикл
		
		
		МассивСтроТкз=ТзСвойсвтв.НайтиСтроки(Новый Структура("Наименование",Свойство.Ключ ));
		
		Если МассивСтроТкз.Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено св-во "+Свойство.Значение;
			Сообщение.Сообщить();
			Продолжить;
		Иначе
			СвВо=МассивСтроТкз[0].ССылка;
		КонецЕсли;	
			

		НоваяСтрокаТЧ=ТчСвойств.Добавить();

		НоваяСтрокаТЧ.Свойство = СвВо; 
		НоваяСтрокаТЧ.Значение = Свойство.значение;
		
	КонецЦикла;
КонецПроцедуры


Процедура ЗаписатьСвойстваХарактеристики(НоваяХарактеристика,  пСтруктСвойств, ТзСвойсвтв)

	
	Для Каждого Свойство из  пСтруктСвойств Цикл
		
			//СвВо=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Свойство.Ключ);
			
			МассивСтроТкз=ТзСвойсвтв.НайтиСтроки(Новый Структура("Наименование",Свойство.Ключ ));
			
			Если МассивСтроТкз.Количество()=0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено св-во "+Свойство.Значение;
				Сообщение.Сообщить();
				Продолжить;
			Иначе
				СвВо=МассивСтроТкз[0].ССылка;
			КонецЕсли;	
			
			
			НЗ=РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			Нз.Отбор.Объект.Установить(НоваяХарактеристика);
			Нз.Отбор.Свойство.Установить(СвВо);
			
			НоваяЗапись = НЗ.Добавить(); 
			НоваяЗапись.Объект = НоваяХарактеристика; 
			НоваяЗапись.Свойство = СвВо; 
			НоваяЗапись.Значение = Свойство.значение; 
			Попытка
			
							НЗ.Записать(); 

			
			Исключение
			    Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;
			//

			
			
	КонецЦикла;	
	

КонецПроцедуры


Процедура ЗаписьШтрихкода(пНоменклатураСсылка, пШтрихкод, пДопРеквизиты, пХарактеристика=Неопределено)

	еСЛИ НЕ ЗначениеЗаполнено(пШтрихкод) тОГДА
		Возврат;
	КонецЕсли;	
	
	   НаборЗаписей=РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	   НаборЗаписей.Отбор.Штрихкод.установить(пШтрихкод);
	   НаборЗаписей.Очистить();

	   НоваяЗапись=НаборЗаписей.Добавить();
	   НоваяЗапись.Штрихкод=пШтрихкод;
	   НоваяЗапись.Номенклатура=пНоменклатураСсылка;
	   НоваяЗапись.Упаковка=пНоменклатураСсылка.ЕдиницаИзмерения;
	   
	   Если пХарактеристика<>Неопределено Тогда
		   НоваяЗапись.Характеристика=пХарактеристика;
	   КонецЕсли;
	   
	   Попытка
		   НаборЗаписей.записать();
		   ВывестиИнормацию_о_записиОбъекта(пДопРеквизиты, "Записан ШК "+пШтрихкод+" для товара "+пНоменклатураСсылка+?(пХарактеристика<>Неопределено,"#"+Строка(пХарактеристика),""), пШтрихкод, "Записан");
	   Исключение
		   ТекстОшибоки= ОписаниеОшибки()+" Ошибка при попытки записи штрихкода";
		   Сообщение = Новый СообщениеПользователю;
		   Сообщение.Текст = ТекстОшибоки;
		   Сообщение.УстановитьДанные(пНоменклатураСсылка);
		   Сообщение.Сообщить();
	 КонецПопытки;

КонецПроцедуры


Процедура ВывестиИнормацию_о_записиОбъекта(пСтруктМакет, текстСообщения, пСсылкаНаЗаписанныйОбъект, пСтатус="")
	
	ТабДок=пСтруктМакет.ТабДок;
	Макет=пСтруктМакет.Макет;

	
	СтрокаОш = Макет.ПолучитьОбласть("Записан");
	СтрокаОш.Параметры.ИнфОЗаписи =  текстСообщения;
	СтрокаОш.Параметры.Элемент= пСсылкаНаЗаписанныйОбъект;
	СтрокаОш.Параметры.Статус=пСтатус;
	ТабДок.Вывести(СтрокаОш);


КонецПроцедуры


Функция ПолучитьТзСвойств(пНаборСвойств)
	
	Перем Запрос, РезультатЗапроса, ТзСвойсвтв;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
	|	И ДополнительныеРеквизитыИСведения.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НаборСвойств", пНаборСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТзСвойсвтв=РезультатЗапроса.Выгрузить();
	Возврат ТзСвойсвтв;

КонецФункции // ()

Функция СоздатьРазмер(пНаименованиеРазмера, пВладелец)

	ИскомыйРазмер=Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(пНаименованиеРазмера,Истина,,пВладелец);
	
	если НЕ ИскомыйРазмер.Пустая() Тогда
		Возврат ИскомыйРазмер.Ссылка;
	КонецЕсли;	
	
	НовыйЭлемент=Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	НовыйЭлемент.Наименование=пНаименованиеРазмера;
	НовыйЭлемент.Владелец=пВладелец;
	
	Попытка
		
		
		НовыйЭлемент.Записать();
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка записи элемента "+пНаименованиеРазмера;
		Сообщение.Сообщить();
		Возврат Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	КонецПопытки;
	

	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции // СоздатьРазмер()

Функция НайтиСвоВо(пТз, пНаименование)

	СтрокаТз=НайтиСтрокуТабЧасти(пТз, Новый Структура("Наименование",пНаименование));
	
	Если СтрокаТз=Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаТз.ССылка
	КонецЕсли;

КонецФункции // НайтиСвоВо()

Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()


&НаКлиенте
Процедура ИзменитьФорматХарактеристик(Команда)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Начало "+ТекущаяДата();
	Сообщение.Сообщить();
	
	ИзменитьФорматХарактеристикНаСервере();
	
	Сообщение.Текст = "Конец "+ТекущаяДата();
	Сообщение.Сообщить();

КонецПроцедуры
