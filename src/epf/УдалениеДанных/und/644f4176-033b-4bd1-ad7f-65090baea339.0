{3,
{49,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,1,
{"ru","Улаление данных"}
},0,0,1,1,1,0,1,0,
{1,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",1,0,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,0,1},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{29,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"УдалитьДанные",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УдалитьДанныеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0},1,0,0,0,3,3,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{53,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},"СписокЭлементов",0,0,1,
{1,0},
{1,0},
{1,
{2}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,2,2,0,0,0,0,0,1,2,0,0,1,1,
{1,
{3}
},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,0,
{0,1,0},
{0},1,
{22,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокЭлементовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"СписокЭлементовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{29,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СписокЭлементовКнопка1",
{1,0},1,
{1,b0016a68-ec64-4e6d-b905-c71fd62efc4c},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовКнопка1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0},1,0,0,0,3,3,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{14,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СписокЭлементовЗначение",1,0,
{1,0},
{1,0},
{2,
{2},
{0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"СписокЭлементовЗначениеНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{15,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокЭлементовЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,0,0,1,
{5,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокЭлементовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1,0},0,3,3,0},1,
{5,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"СписокЭлементовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокЭлементовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1,1},0,3,3,0},1,
{5,
{11,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СписокЭлементовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{12,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокЭлементовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{13,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокЭлементовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0},"","",1,
{22,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{11,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0,
{49,0}
},"
&НаКлиенте
Процедура СписокЭлементовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ПараметрыФормы = ПодготовитьПараметрыФормыВыборОбъектовМетаданных();
	ОткрытьФорму(""ОбщаяФорма.ВыборОбъектовМетаданных"", ПараметрыФормы);

	СтандартнаяОбработка=ложь;
	
КонецПроцедуры



&НаСервере
Функция ПодготовитьПараметрыФормыВыборОбъектовМетаданных()
	
	ТаблицаОбъектовМетаданных = Новый  ТаблицаЗначений;
	ДзМетаданных=ДеревоМетаданныхКонфигурации(ТаблицаОбъектовМетаданных); 
	
	
	Если ТаблицаОбъектовМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФильтрПоОбъектамМетаданных = Новый СписокЗначений;
	ФильтрПоОбъектамМетаданных.ЗагрузитьЗначения(ТаблицаОбъектовМетаданных.ВыгрузитьКолонку(""ПолноеИмя""));
	
	ВыбранныеОбъектыМетаданных = Новый СписокЗначений;
	//Для Каждого ЭлементНазначение Из Объект.Назначение Цикл
	//	Если ТаблицаОбъектовМетаданных.Найти(ЭлементНазначение.ОбъектНазначения, ""Ссылка"") <> Неопределено Тогда
	//		ВыбранныеОбъектыМетаданных.Добавить(ЭлементНазначение.ОбъектНазначения.ПолноеИмя);
	//	КонецЕсли;
	//КонецЦикла;
	
	ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
	ФильтрПоСсылочнымМетаданным.Добавить(""Справочники"");
	ФильтрПоСсылочнымМетаданным.Добавить(""Документы"");
	ФильтрПоСсылочнымМетаданным.Добавить(""Документы"");
	ФильтрПоСсылочнымМетаданным.Добавить(""РегистрыНакопления"");

	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ФильтрПоОбъектамМетаданных"", ФильтрПоОбъектамМетаданных);
	ПараметрыФормы.Вставить(""ВыбранныеОбъектыМетаданных"", ВыбранныеОбъектыМетаданных);
	ПараметрыФормы.Вставить(""КоллекцииВыбираемыхОбъектовМетаданных"", ФильтрПоСсылочнымМетаданным);

	ПараметрыФормы.Вставить(""Заголовок"", НСтр(""ru = 'Выберете объекты метаданных'""));
	
	Возврат ПараметрыФормы;
КонецФункции



// Получает дерево метаданных конфигурации с заданным отбором по объектам метаданных.
//
// Параметры:
//   Отбор - Структура - содержит значения элементов отбора.
//						Если параметр задан, то будет получено дерево метаданных в соответствии с заданным отбором:
//						Ключ - Строка - имя свойства элемента метаданных;
//						Значение - Массив - множество значений для отбора.
//
// Пример инициализации переменной ""Отбор"":
//
// Массив = Новый Массив;
// Массив.Добавить(""Константа.ИспользоватьСинхронизациюДанных"");
// Массив.Добавить(""Справочник.Валюты"");
// Массив.Добавить(""Справочник.Организации"");
// Отбор = Новый Структура;
// Отбор.Вставить(""ПолноеИмя"", Массив);
// 
//  Возвращаемое значение:
//   ДеревоЗначений - дерево описания метаданных конфигурации.
//
Функция ДеревоМетаданныхКонфигурации(пТзМетаданных, Отбор = Неопределено) Экспорт
	
	пТзМетаданных.Колонки.Добавить(""ПолноеИмя"");
	
	ИспользоватьОтбор = (Отбор <> Неопределено);
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Имя"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Синоним"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Картинка"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""КартинкаОбъекта"");
	
	НоваяСтрокаКоллекцииОбъектовМетаданных(""Константы"",               НСтр(""ru = 'Константы'""),                 БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""Справочники"",             НСтр(""ru = 'Справочники'""),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""Документы"",               НСтр(""ru = 'Документы'""),                 БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""ПланыВидовХарактеристик"", НСтр(""ru = 'Планы видов характеристик'""), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""ПланыСчетов"",             НСтр(""ru = 'Планы счетов'""),              БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""ПланыВидовРасчета"",       НСтр(""ru = 'Планы видов расчета'""),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,       КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""РегистрыСведений"",        НСтр(""ru = 'Регистры сведений'""),         БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""РегистрыНакопления"",      НСтр(""ru = 'Регистры накопления'""),       БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""РегистрыБухгалтерии"",     НСтр(""ru = 'Регистры бухгалтерии'""),      БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""РегистрыРасчета"",         НСтр(""ru = 'Регистры расчета'""),          БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""БизнесПроцессы"",          НСтр(""ru = 'Бизнес-процессы'""),           БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных(""Задачи"",                  НСтр(""ru = 'Задачи'""),                    БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 КоллекцииОбъектовМетаданных);
	
	// Возвращаемое значение функции.
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить(""Имя"");
	ДеревоМетаданных.Колонки.Добавить(""ПолноеИмя"");
	ДеревоМетаданных.Колонки.Добавить(""Синоним"");
	ДеревоМетаданных.Колонки.Добавить(""Картинка"");
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			Если ИспользоватьОтбор Тогда
				
				ОбъектПрошелФильтр = Истина;
				Для Каждого ЭлементОтбора Из Отбор Цикл
					
					Значение = ?(ВРег(ЭлементОтбора.Ключ) = ВРег(""ПолноеИмя""), ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных[ЭлементОтбора.Ключ]);
					Если ЭлементОтбора.Значение.Найти(Значение) = Неопределено Тогда
						ОбъектПрошелФильтр = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ОбъектПрошелФильтр Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваОМ = СтрокаДерева.Строки.Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
			НоваяСтрокаТз=пТзМетаданных.Добавить();
			НоваяСтрокаТз.ПолноеИмя=СтрокаДереваОМ.ПолноеИмя;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем строки без подчиненных элементов.
	Если ИспользоватьОтбор Тогда
		
		// Используем обратный порядок обхода дерева значений.
		КоличествоЭлементовКоллекции = ДеревоМетаданных.Строки.Количество();
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
			
			ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
			СтрокаДерева = ДеревоМетаданных.Строки[ТекущийИндекс];
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДеревоМетаданных.Строки.Удалить(ТекущийИндекс);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

Процедура НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Вставить содержимое обработчика
	
	Если ИмяСобытия = ""ВыборОбъектовМетаданных"" Тогда
		
			
		ЗагрузитьВыбранныеОбъектыМетаданных(Параметр);
		
	КонецЕсли;

	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьВыбранныеОбъектыМетаданных(Параметр)
	//Объект.Назначение.Очистить();
	
	Для Каждого ЭлементПараметр Из Параметр Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементПараметр.Значение);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор=ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			СписокЭлементов.Добавить(ОбъектМетаданных.ПолноеИмя() ,Идентификатор, Истина);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокЭлементовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	 СписокЭлементовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеНаСервере()
	// Вставить содержимое обработчика.
	ЗаписьЖурналаРегистрации(""УдалениеДанных"",,,,""Начало ""+ТекущаяДата());
	Отказ=ложь;
	УстМонопольныРежим(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	
	МассивУдаляемыхСсылок=Новый Массив;
	
	Для каждого ЭлементМетаданных Из СписокЭлементов Цикл
		
 		ЗаписьЖурналаРегистрации(""УдалениеДанных"",,,,ЭлементМетаданных.Значение);

		
		Если НЕ ЗначениеЗаполнено(ЭлементМетаданных.Значение) Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементМетаданных.Значение);

		
		Если Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			
			
			ОчисткаРегистраНакопления(ОбъектМетаданных);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда	
			
			ОчисткаРС(ОбъектМетаданных);
			
		ИначеЕсли	Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			
			УдалениеДокументов_Справочников(Справочники[ОбъектМетаданных.Имя],Ложь, МассивУдаляемыхСсылок);
			
		ИначеЕсли	Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			
			УдалениеДокументов_Справочников(Документы[ОбъектМетаданных.Имя], Истина, МассивУдаляемыхСсылок);
			
			ОчисткаОснования();
		ИначеЕсли   Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда	
			 УдалениеДокументов_Справочников(Задачи[ОбъектМетаданных.Имя] ,Ложь, МассивУдаляемыхСсылок);
		ИначеЕсли 	 Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда	
			 УдалениеДокументов_Справочников(ПланыВидовХарактеристик[ОбъектМетаданных.Имя] ,Ложь, МассивУдаляемыхСсылок);
		КонецЕсли;	                                  
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(""УдалениеДанных"",,,,""Конец ""+ТекущаяДата());
	
	УдалитьПомеченные_с_контролемСсылок(МассивУдаляемыхСсылок);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ""Конец"";
	Сообщение.Сообщить();
	
КонецПроцедуры

Процедура УстМонопольныРежим(Отказ)

	Попытка 
		УстановитьМонопольныйРежим(Истина); 
	Исключение 
		Отказ=Истина;
		Сообщить(""К базе подключены пользователи.Монопольный режим установить невозможно!""); 
	КонецПопытки;

КонецПроцедуры


&НаСервере
Процедура ОчисткаРС(Знач ОбъектМетаданных)
	
	Перем Нз;
	
	Если ОбъектМетаданных.режимЗаписи<>Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		Нз=РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		Нз.Записать();
	Иначе
		ОчисткаРегистра(ОбъектМетаданных.Имя, РегистрыСведений[ОбъектМетаданных.Имя], ""РегистрСведений"");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчисткаРегистраНакопления(Знач ОбъектМетаданных)
	
	РегистрыНакопления[ОбъектМетаданных.Имя].УстановитьИспользованиеИтогов(Ложь);
	
	ОчисткаРегистра(ОбъектМетаданных.Имя, РегистрыНакопления[ОбъектМетаданных.Имя], ""РегистрНакопления"");
	
	РегистрыНакопления[ОбъектМетаданных.Имя].УстановитьИспользованиеИтогов(Истина);

КонецПроцедуры


Процедура УдалениеДокументов_Справочников(пМенеджерУдаляемыхОбъектов , пНепосредственное=Ложь, пМассивУдаляемыхСсылок)
	
	НачатьТранзакцию();

	
	
	Выборка=пМенеджерУдаляемыхОбъектов.Выбрать();
	
	Пока выборка.Следующий() Цикл
		
		ОбъектСпр=Выборка.получитьОбъект();
		
		Удалениеобъекта(ОбъектСпр, пНепосредственное, пМассивУдаляемыхСсылок);

		
	КонецЦикла;

	ЗафиксироватьТранзакцию();
 

КонецПроцедуры

Процедура Удалениеобъекта(пОбъект, пНепосредственное=Ложь, пМассивУдаляемыхСсылок)
	
	Если пНепосредственное Тогда
		
		Попытка
			пОбъект.Удалить();
		Исключение
			ЗаписьЖурналаРегистрации(""УдалениеДанных"",,,пОбъект,ОписаниеОшибки());
		КонецПопытки;
		
	Иначе	
		пОбъект.УстановитьПометкуУдаления(Истина);
		пМассивУдаляемыхСсылок.Добавить(пОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры



Процедура ОчисткаРегистра (пИмяРегистра, пМенеджерРегистра, пТипРегистра)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст = ""ВЫБРАТЬ РАЗЛИЧНЫЕ
	| Регистр.Регистратор
	|ИЗ
	| ""+пТипРегистра+"".""+пИмяРегистра+"" КАК Регистр"";
	//|ГДЕ
	//| Регистр.Регистратор.Дата<&КонПериода"";
	
	
	//Запрос.УстановитьПараметр(""КонПериода"",КонПериода);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Кол=0;
	БылиОшибки=Ложь;
	Пока Выборка.Следующий() цикл
		Набор = пМенеджерРегистра.СоздатьНаборЗаписей();
		
		
		Набор.Отбор.Регистратор.Значение = Выборка.Регистратор;
		Попытка
			Набор.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации(""УдалениеДанных"",,,,ОписаниеОшибки());
			БылиОшибки=Истина;
		КонецПопытки;
		
		
		Кол=Кол+1;
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить(""Обработка завершена. Регистр"" +пИмяРегистра+"" очищен не до конца!!!"");
	КонецЕсли;
	
	

КонецПроцедуры


Процедура ОчисткаОснования()

	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.Ссылка КАК Ссылка,
		|	УстановкаЦенНоменклатуры.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	НЕ УстановкаЦенНоменклатуры.ДокументОснование.Ссылка ЕСТЬ NULL
		|"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.ДокументОснование=Неопределено;
		Попытка
			
			об.записать();
		Исключение
			ЗаписьЖурналаРегистрации(""УдалениеДанных"",,,,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры


Процедура УдалитьПомеченные_с_контролемСсылок(пМассивУдаляемыхСсылок)

	//Помеченные = НайтиПомеченныеНаУдаление();
	Помеченные=пМассивУдаляемыхСсылок;
	Найденные = 0;
	УдалитьОбъекты(Помеченные, Истина, Найденные);
	
	Для каждого Ссылка из Найденные Цикл
		СтрСообщения = ""Объект не удален: "" + СокрЛП(Ссылка[0]);
		СтрСсылка = "", используется в "" + СокрЛП(Ссылка[1]);
		Сообщить (СтрСообщения + СтрСсылка);
	КонецЦикла;
	

КонецПроцедуры


Процедура НайтиБитыеСсылки()

	

КонецПроцедуры


Процедура НайтиСсылкиНаСервере(МД, ПолноеИмяТаблицы)

    //массив будет содержать структуры с четырмя элементами:
    //1) Поле - имя и псевдоним в запросе ссылочного поля таблицы
    //2) ПолеЭтоБитаяСсылка - псевдоним в запросе поля булевого типа, которое
    //   в результате запроса будет Истина, если Поле содержит битую ссылку
    //3) МассивИменТаблиц - массив, состоящий из полных имен метаданных,
    //   на которые возможны ссылки из поля
    //4) МожетБытьНеопределено - может ли поле быть равно Неопределено
    МассивОписанийПолей = Новый Массив;
    ДобавитьОписаниеПолей(МассивОписанийПолей, ""Измерения"", МД);
    ДобавитьОписаниеПолей(МассивОписанийПолей, ""Ресурсы"", МД);
    ДобавитьОписаниеПолей(МассивОписанийПолей, ""Реквизиты"", МД);
    ДобавитьОписаниеПолей(МассивОписанийПолей, ""РеквизитыАдресации"", МД);

    Если МассивОписанийПолей.Количество() = 0 Тогда
        Возврат; //ссылочных полей нет
    КонецЕсли;

    //Теперь у нас есть ссылочные поля таблицы и имена таблиц, ссылки на которые
    //они могут содержать можно переходить к конструированию запроса
    БлокСсылочныхПолей = """";
    БлокБулевыхПолей = """";
    БлокУсловия = """";
    ПС = Символы.ПС;
    ТАБ = Символы.Таб;
    ТАБ3 = ТАБ+ТАБ+ТАБ;

    МаксИндексМассиваОписаний = МассивОписанийПолей.Количество() - 1;
    Для К = 0 По МаксИндексМассиваОписаний Цикл

        ОписаниеПоля = МассивОписанийПолей[К];
        БулевоВыражение = ""ВЫБОР КОГДА "" + ПС+ТАБ3+
                ?(ОписаниеПоля.МожетБытьНеопределено, ОписаниеПоля.Поле + "" <> НЕОПРЕДЕЛЕНО И "", """");

        Для Каждого ИмяТаблицы Из ОписаниеПоля.МассивИменТаблиц Цикл
            БулевоВыражение = БулевоВыражение + ОписаниеПоля.Поле
                                + "" <> ЗНАЧЕНИЕ(""+ИмяТаблицы+"".ПустаяСсылка) И "";
        КонецЦикла;

        БулевоВыражение = БулевоВыражение+ОписаниеПоля.Поле+"".Ссылка ЕСТЬ NULL""
                            +ПС+ТАБ3+""ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ"";
        БлокСсылочныхПолей = БлокСсылочныхПолей + ТАБ + ОписаниеПоля.Поле;
        БлокБулевыхПолей = БлокБулевыхПолей + ТАБ + БулевоВыражение + "" КАК ""+ОписаниеПоля.ПолеЭтоБитаяСсылка;
        БлокУсловия = БлокУсловия + ТАБ + БулевоВыражение;

        Если К <> МаксИндексМассиваОписаний Тогда //дальше будут еще поля
            БлокСсылочныхПолей = БлокСсылочныхПолей + "",""+ПС;
            БлокБулевыхПолей = БлокБулевыхПолей + "","" + ПС;
            БлокУсловия = БлокУсловия + "" ИЛИ "" + ПС;
        КонецЕсли;

    КонецЦикла;

    //СОБИРАЕМ ТЕКСТ, ДОБАВЛЯЕМ ТАБЫ И ПЕРЕНОСЫ ЧТОБЫ БЫЛО КРАСИВО
    ТекстЗапроса =  ""ВЫБРАТЬ"" +ПС+ПС+ БлокСсылочныхПолей + "",""+ПС+БлокБулевыхПолей+
                    ПС+ПС+""ИЗ "" + ПолноеИмяТаблицы+
                    ПС+ПС+""ГДЕ""+ПС+ПС+ БлокУсловия;

    Запрос = Новый Запрос(ТекстЗапроса);
    Выборка = Запрос.Выполнить().Выбрать();

    //Обходим записи с битыми ссылками и по булевым полям смотрим, какие именно поля содержат битые ссылки
    Пока Выборка.Следующий() Цикл
        Для Каждого ОписаниеПоля Из МассивОписанийПолей Цикл
            Если Выборка[ОписаниеПоля.ПолеЭтоБитаяСсылка] Тогда //ИСТИНА, значит ссылка битая

                БитаяСсылка = Выборка[ОписаниеПоля.Поле];
                Сообщить(БитаяСсылка); //ГОТОВО!!! ЗДЕСЬ ЧТО-ТО ДЕЛАЕМ С БИТОЙ ССЫЛКОЙ

            КонецЕсли;
        КонецЦикла;
    КонецЦикла;

КонецПроцедуры


//ВСПОМОГАТЕЛЬНЫЙ МЕТОД ДЛЯ ПОЛУЧЕНИЯ ОПИСАНИЯ ПОЛЕЙ ИЗ МЕТАДАННЫХ
Процедура ДобавитьОписаниеПолей(МассивОписанийПолей, ТипПолей, МД)
    Попытка
        Поля = МД[ТипПолей];
    Исключение   //если возникло исключение значит у этой таблицы
        Возврат; //нет такого типа полей и нам не нужно их обходить
    КонецПопытки;

    Для Каждого Поле Из Поля Цикл
        ТипыПоля = Поле.Тип.Типы();
        МассивПолныхИменМетаданных = Новый Массив;

        Для Каждого Тип Из ТипыПоля Цикл
            МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
            Если МетаданныеТипа <> Неопределено Тогда
                МассивПолныхИменМетаданных.Добавить(МетаданныеТипа.ПолноеИмя());
            КонецЕсли;
        КонецЦикла;

        Если МассивПолныхИменМетаданных.Количество() > 0 Тогда //Тип поля допускает хранение в нем ссылок
            МассивОписанийПолей.Добавить(Новый Структура(
                ""Поле, ПолеЭтоБитаяСсылка, МассивИменТаблиц, МожетБытьНеопределено"",
                Поле.Имя, Поле.Имя + ""ЭтоБитаяСсылка"", МассивПолныхИменМетаданных, ТипыПоля.Количество()>1));
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура УдалитьДанные(Команда)
	УдалитьДанныеНаСервере();
КонецПроцедуры
",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",36dcbbf6-77c8-4edf-897c-359b29184759}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"СписокЭлементов",
{1,1,
{"ru","Список элементов"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,1,
{9,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УдалитьДанные",
{1,1,
{"ru","Удалить данные"}
},
{1,1,
{"ru","Удалить данные"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"УдалитьДанные",3,0,0,
{0,0},1,0,1,0,0,2}
},
{0,0},
{0,0},0,0}