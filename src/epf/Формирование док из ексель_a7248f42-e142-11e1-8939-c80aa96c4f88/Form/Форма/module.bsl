Перем  ЛистЕксельВыб, СтруктураПолей;
//Перем мВалютаРегламентированногоУчета;

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета;
Перем мКурсУпрУчета;
Перем мКратностьУпрУчета;
Перем мОсновнойТипЦен;
Перем мтекПользователь;
Перем мСписокДокуметовБезКонтрагента;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Перем СписокДокументов;

	Отказ=_ОбщегоНазначения.ПроверкаЗаполненияПолейДиалога(ЭлементыФормы);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВидДокумента=Неопределено Тогда
	     Сообщить("Не заполенено поле вид документа",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	
	НачатьТранзакцию();

	
	Менеджер=ЭлементыФормы.ВидДокумента.Значение;
	СписокДокументов = СоздатьДокументы(ПрочитанныйФайл,Менеджер);

	

	ЗафиксироватьТранзакцию();

	ОбработатьСписокДокументов(СписокДокументов);

	КонецПроцедуры


Процедура ОбработатьСписокДокументов(СписДок)
	Перем Обработка;
	Перем Флаг;

	Если СписДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проведение документов
	Флаг = ЭлементыФормы.ФлагФормироватьСчетФактуру.Доступность И ФлагФормироватьСчетФактуру;
	Если ФлагПровести Тогда
		Для Каждого Док Из СписДок Цикл
			ОбъектДок = Док.Значение.ПолучитьОбъект();
	
			Попытка
				Если НачалоДня( ПолеВводаДатаАктуальности) = НачалоДня( ТекущаяДата()) Тогда
					ОбъектДок.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
				Иначе
					Сообщить("Обратботка позволяет проводить документы только текущим число (оперативно)."+ ОбъектДок+" не проведен",СтатусСообщения.Важное);
				КонецЕсли;
			Исключение
				Сообщить(" - Документ не проведен " + ОбъектДок.Номер + " " + ОбъектДок.Дата + " " + ОбъектДок.Метаданные().Синоним, СтатусСообщения.Внимание);
			КонецПопытки;

			Если Флаг И ОбъектДок.Проведен Тогда

				Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
					ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
				ИначеЕсли ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					ОбъектСчетаФактуры = Документы["СчетФактураПолученный"].СоздатьДокумент();
				Иначе
					Продолжить;
				КонецЕсли;

				ОбъектСчетаФактуры.Дата = ПолеВводаДатаАктуальности;
				ОбъектСчетаФактуры.УстановитьВремя();
				ОбъектСчетаФактуры.Заполнить(ОбъектДок.Ссылка);

				Попытка
					ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(" - Документ не проведен " + ОбъектСчетаФактуры.Номер + " " + ОбъектСчетаФактуры.Дата + " " + ОбъектСчетаФактуры.Метаданные().Синоним, СтатусСообщения.Внимание);
				КонецПопытки;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Формирование печатных форм документов
	Если ФлагПечатьФорм Тогда
		СпособПечати = ?(ПереключательСпособПечатиБезПросмотра = 0, 1, 0);

		Для Каждого Док Из СписДок Цикл
			УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(Док.Значение.ПолучитьОбъект());
		КонецЦикла;
	КонецЕсли;

	// Печать реестра документов
	Если ФлагПечатьРеестра Тогда
		Обработка = Обработки.ГрупповаяОбработкаСправочниковИДокументов.Создать();
		Обработка.ПечатьРеестра(СписДок.ВыгрузитьЗначения());
	КонецЕсли;

КонецПроцедуры // ОбработатьСписокДокументов()



// Формирует документы "ПеремещениеТоваров"
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументы(ТЗ, МенеджерФормируемогоДокумента)
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	ТаблицаЦен=Новый ТаблицаЗначений;


	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов .....", СтатусСообщения.Обычное);
	Сообщить("==============================================",   СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ИмяСклада=ТЗ.колонки.получить(2).Заголовок;
	Склад=Справочники.Склады.НайтиПоНаименованию(ИмяСклада,Истина);
	
	
	
	ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
	КурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,ПолеВводаДатаАктуальности)["Курс"];
     КратностьВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ПолеВводаДатаАктуальности)["Кратность"];
     ТипЦен=ПолеВводаТипЦен;
	
	// Для табличной части товаров получим нужные цены запросом
	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                  ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",         ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",       ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",           КурсВзаиморасчетов);
	СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",      КратностьВзаиморасчетов);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",           ФлагУчитыватьНДС);
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",        ФлагЦенаВключаетНДС);
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти", Истина);
	
	МассивТоваров=ТЗ.ВыгрузитьКолонку("Товар");

	
	ФлагУжеСообщали = Ложь;
	СчетчикКолонок=1;
	
	Для Каждого Колонка из ТЗ.Колонки Цикл
		Если СчетчикКолонок=1 или СчетчикКолонок=2 или  СчетчикКолонок=3 или Не ЗначениеЗаполнено(Колонка.заголовок) Тогда  // колонки цены и наименования товара пропустим
			СчетчикКолонок=СчетчикКолонок+1;
		     Продолжить;
		 КонецЕсли;
		
		
			
			Если ТЗ.Итог(Колонка.Имя) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
					
			НовыйДок = МенеджерФормируемогоДокумента.СоздатьДокумент();
			НовыйДок.Дата = ПолеВводаДатаАктуальности;
			НовыйДок.УстановитьВремя();
			
			МетаданныеДок=НовыйДок.Метаданные();
			
               Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладПолучатель",МетаданныеДок) Тогда
				НовыйДок.СкладПолучатель=Справочники.Склады.НайтиПоНаименованию(Колонка.Заголовок,Истина);
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Комментарий",МетаданныеДок) и ЗначениеЗаполнено(Комментарий) Тогда
                    НовыйДок.Комментарий=СокрЛП(Комментарий);
			КонецЕсли;
			
			
			Если ТипЗнч(НовыйДок)=Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
				Если НовыйДок.СкладПолучатель.Автообмен Тогда
					НовыйДок.ВидОперации= Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам;
				Иначе
					НовыйДок.ВидОперации= Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
				КонецЕсли;
			Иначе
				ТипСделки=?(ТипЗнч(НовыйДок)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг"),"Покупка","Продажа");	
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДок.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, );

			//НовыйДок.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			//НовыйДок.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			//НовыйДок.ОтражатьВНалоговомУчете=ФлагНалогУчет;
			
			НовыйДок.Подразделение        = ПолеВводаПодразделение;
			НовыйДок.Ответственный        = ПолеВводаОтветственный;
			НовыйДок.Организация          = ПолеВводаОрганизация;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОтправитель",МетаданныеДок) Тогда
				НовыйДок.СкладОтправитель     = Склад;
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер",МетаданныеДок) Тогда
				НовыйДок.СкладОрдер     = Склад;
			КонецЕсли;
			
						
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДок) Тогда
				НовыйДок.ВалютаДокумента     = ВалютаДокумента;
				НовыйДок.КурсВзаиморасчетов      = КурсВзаиморасчетов;
				НовыйДок.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС",МетаданныеДок) Тогда
				НовыйДок.УчитыватьНДС     = ФлагУчитыватьНДС;
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС",МетаданныеДок) Тогда
				НовыйДок.СуммаВключаетНДС     = ФлагЦенаВключаетНДС;
			КонецЕсли;

			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("НДСвСтоимостиТоваров",МетаданныеДок) Тогда
				НовыйДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			КонецЕсли;
			
					
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад",МетаданныеДок) и мСписокДокуметовБезКонтрагента.НайтиПоЗначению(МенеджерФормируемогоДокумента)<>Неопределено  Тогда
				НовыйДок.Склад=Справочники.Склады.НайтиПоНаименованию(Колонка.Заголовок,Истина);
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Склад",МетаданныеДок) Тогда	
				НовыйДок.Склад=Склад;
			КонецЕсли;
			
			Контрагент=Справочники.Контрагенты.ПустаяСсылка();
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент",МетаданныеДок) Тогда
				Если ПереключательРежимаПоискаКлиентаПоНаим=0 Тогда
					Контрагент=Справочники.Контрагенты.НайтиПоНаименованию(Колонка.Заголовок,Истина);
				Иначе
					Контрагент=Справочники.Контрагенты.НайтиПоКоду(Колонка.Заголовок);
				КонецЕсли;
				
				НовыйДок.Контрагент=Контрагент;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДок) Тогда
					НовыйДок.ДоговорКонтрагента=Контрагент.ОсновнойДоговорКонтрагента;
					
					ДопустимыеВидыДоговора=ПроверкаПравильностиВыбораДоговора(НовыйДок.ДоговорКонтрагента,НовыйДок.метаданные());
					
					Если (НовыйДок.ДоговорКонтрагента.Организация <> НовыйДок.Организация) или  ДопустимыеВидыДоговора.найти(НовыйДок.ДоговорКонтрагента.видДоговора)=Неопределено  Тогда
						
						НовыйДок.ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Продавец",    Контрагент);
						Запрос.УстановитьПараметр("Организация", НовыйДок.Организация);
						Запрос.УстановитьПараметр("ВидДоговора", ДопустимыеВидыДоговора);
						
						ТекстЗапроса = "ВЫБРАТЬ
						               |	ДоговорыКонтрагентов.Ссылка
						               |ИЗ
						               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						               |ГДЕ
						               |	ДоговорыКонтрагентов.Владелец = &Продавец
						               |	И ДоговорыКонтрагентов.Организация = &Организация
						               |	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)";
									   
						ДопУсловие="	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов <> &ВедениеВзаиморасчетов";
						
						Если  ТипЗнч(НовыйДок)=Тип("ДокументОбъект.СчетНаОплатуПокупателю") или  ТипЗнч(НовыйДок)=Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
							ТекстЗапроса=ТекстЗапроса+ДопУсловие;
							Запрос.УстановитьПараметр("ВедениеВзаиморасчетов", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
							
						ИначеЕсли  ТипЗнч(НовыйДок)=Тип("ДокументОбъект.ЗаказПоставщику") или  ТипЗнч(НовыйДок)=Тип("ДокументОбъект.ЗаказПокупателя") Тогда
							ТекстЗапроса=ТекстЗапроса+ДопУсловие;
							Запрос.УстановитьПараметр("ВедениеВзаиморасчетов", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);

						КонецЕсли;	
						Запрос.Текст=ТекстЗапроса;
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							НовыйДок.ДоговорКонтрагента = Выборка.Ссылка;
						Иначе 
							Сообщить("У контрагента " + Контрагент + " отсутствует договор на поставку с организацией " + НовыйДок.Организация + ".");
						КонецЕсли;
						
					КонецЕсли;
					ВалютаДокумента=ПолучитьВалютуДокумента(НовыйДок.ДоговорКонтрагента.ВалютаВзаиморасчетов);
					КурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,ПолеВводаДатаАктуальности)["Курс"];
					КратностьВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ПолеВводаДатаАктуальности)["Кратность"];
					
					// Для того чтобы товар не продавался по цене отличной то типа цен в  договоре, для документов с рекв. 
					// договор тип цен подчтавляется из договора, если там не заполнено тогда по основной цене продажи ОПТ5
					Если МенеджерФормируемогоДокумента=Документы.РеализацияТоваровУслуг Тогда
						ТипЦенДоговора=НовыйДок.ДоговорКонтрагента.типЦен;
						ТипЦен=?(ЗначениеЗаполнено(ТипЦенДоговора),ТипЦенДоговора,мОсновнойТипЦен);
					КонецЕсли;
					//-----------------------------------------------------------------------------------------------
				конецЕсли;
				
			КонецЕсли;
 

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен",МетаданныеДок) Тогда
				НовыйДок.ТипЦен     = ТипЦен;
			КонецЕсли;

			
			
			
			//НовыйДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			//ЕстьЦена = (НовыйДок.СкладОтправитель.ВидСклада   = Перечисления.ВидыСкладов.НТТ
			//ИЛИ НовыйДок.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
			ЕстьСтавкаНДСВТабЧасти=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС",МетаданныеДок,"Товары");
			ЕстьЦена=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена",МетаданныеДок,"Товары");
						   
			   // Для табличной части товаров получим нужные цены запросом
			   СтруктураЗначенийЦен = Новый Структура;
			   СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
			   СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                  ТипЦен);
			   СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",         ВалютаДокумента);
			   СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",       ВалютаДокумента);
			   СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",           КурсВзаиморасчетов);
			   СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",      КратностьВзаиморасчетов);
			   СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",           ФлагУчитыватьНДС);
			   СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",        ФлагЦенаВключаетНДС);
                  СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти", ЕстьСтавкаНДСВТабЧасти);
   
			
			Если ЕстьЦена Тогда
				РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначенийЦен,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				МассивТоваров,
				ПолеВводаДатаАктуальности, Контрагент);
				ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();
			КонецЕсли;
			
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЗ.Товар.ЕдиницаХраненияОстатков) Тогда
					Сообщить("Не заполнена ед. хранения остатков у товара с кодом "+СтрокаТЗ.Товар.Код+" этот товар не включен в раскладку",СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;	

				
				НоваяСтрока = НовыйДок.Товары.Добавить();
				НоваяСтрока.Номенклатура                 = СтрокаТЗ.Товар;
				//НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаДанных.Характеристика;
				НоваяСтрока.Количество                   = СтрокаТЗ[Колонка.Имя];
				НоваяСтрока.ЕдиницаИзмерения             = СтрокаТЗ.Товар.ЕдиницаХраненияОстатков;
				НоваяСтрока.Коэффициент                  = СтрокаТЗ.Товар.ЕдиницаХраненияОстатков.Коэффициент;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество",МетаданныеДок,"Товары") Тогда
					НоваяСтрока.Качество                     = Справочники.Качество.Новый;
				конецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КачествоНовое",МетаданныеДок,"Товары") Тогда
					НоваяСтрока.КачествоНовое                     = Справочники.Качество.НайтиПоНаименованию("Брак",Истина);
				конецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров",МетаданныеДок,"Товары") Тогда
					НоваяСтрока.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				конецЕсли;	
				
				Если ЕстьЦена Тогда
					Валюта = ТипЦен.ВалютаЦены;
					Цена   = СтрокаТЗ.получить(2);
					Если ЗначениеЗаполнено(Цена) Тогда
						Цена   = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(
						Цена, Валюта, мВалютаРегламентированногоУчета, 1, 1, ПолеВводаДатаАктуальности);
					Иначе
						//Цена=_ОбщегоНазначения.ПолучитьЦену(СтрокаТЗ.Товар,ПолеВводаТипЦен,ТаблицаЦен,ВалютаДокумента,ПолеВводаДатаАктуальности);
					КонецЕсли;
					Если МенеджерФормируемогоДокумента<>Документы.РеализацияТоваровУслуг Тогда
						НоваяСтрока.Цена = Цена;
					КонецЕсли;
				Конецесли;
			КонецЦикла;
			Если ТипЗнч(НовыйДок)=Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
				НовыйДок.ЗаполнитьПоСериям();
			КонецЕсли;
			
			
			ТабличнаяЧасть=НовыйДок.товары;
			
		
			
			Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
				Если ЕстьЦена Тогда
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
						Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(НовыйДок.ЭтотОбъект,
						СтрокаТабличнойЧасти,
						СтруктураПоиска,
						ВыборкаРезультатЗапросаЦен,
						СтруктураЗначенийЦен,
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
					КонецЕсли;
					
					
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС",МетаданныеДок,"Товары") Тогда
						ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, НовыйДок.ЭтотОбъект);
					КонецЕсли;
					Если   ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма",МетаданныеДок,"Товары") Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НовыйДок.ЭтотОбъект);
					КонецЕсли;	
					
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммуНДС",МетаданныеДок,"Товары") Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, НовыйДок.ЭтотОбъект);
					КонецЕсли;
					
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаРегл",МетаданныеДок,"Товары") Тогда
						СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ПолучитьВалютуУпрУчета(), 
						ПолучитьВалютуРегламентированногоУчета(), ПолучитьКурсУпрУчета(), 1, ПолучитьКратностьУпрУчета(), 1);
					конецЕсли;
				КонецЕсли;

			КонецЦикла;
			
			Попытка
				НовыйДок.Записать();
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);
				#КонецЕсли	
			КонецПопытки;
			СписокДокументов.Добавить(НовыйДок.Ссылка);
			Сообщить(" - " + НовыйДок.Номер + " " + НовыйДок.Дата + " " + НовыйДок.Метаданные().Синоним, СтатусСообщения.Обычное);
			ФлагУжеСообщали = Истина;
		КонецЦикла;
	

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("==============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.",             СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыПеремещения()


Функция ПроверкаПравильностиВыбораДоговора(Договор,МетаданныеДокумента)
	массивДопустимыхВидовДоговоров=Новый Массив;
	ВидДоговора=Договор.ВидДоговора;
	ЕстьОшибки=Ложь;
	
	МассивВидовДокументовПоставщика =Новый Массив(11);
	МассивВидовДокументовПоставщика.Добавить("ПоступлениеТоваровУслуг");
	МассивВидовДокументовПоставщика.Добавить("ЗаказПоставщику");
	МассивВидовДокументовПоставщика.Добавить("ВозвратТоваровПоставщикуИзНТТ");
	МассивВидовДокументовПоставщика.Добавить("ОтчетКомитентуОПродажах");
	МассивВидовДокументовПоставщика.Добавить("ПереоценкаТоваровПринятыхНаКомиссию") ;
	МассивВидовДокументовПоставщика.Добавить("ПоступлениеДопРасходов");
	МассивВидовДокументовПоставщика.Добавить("ПоступлениеТоваровУслугВНТТ");
	МассивВидовДокументовПоставщика.Добавить("СчетНаОплатуПоставщика");
	МассивВидовДокументовПоставщика.Добавить("СчетФактураПолученный");
	МассивВидовДокументовПоставщика.Добавить("КредитНота");
	МассивВидовДокументовПоставщика.Добавить("ВозвратТоваровПоставщику");
	
	МассивВидовДокументовПокупателя=Новый Массив(7);
	МассивВидовДокументовПокупателя.Добавить("ЗаказПокупателя");
	МассивВидовДокументовПокупателя.Добавить("ИнвентаризацияТоваровОтданныхНаКомиссию");
	МассивВидовДокументовПокупателя.Добавить("ОтчетКомиссионераОПродажах");
	МассивВидовДокументовПокупателя.Добавить("ПереоценкаТоваровОтданныхНаКомиссию");
	МассивВидовДокументовПокупателя.Добавить("СчетНаОплатуПокупателю");
	МассивВидовДокументовПокупателя.Добавить("СчетФактураВыданный");
	МассивВидовДокументовПокупателя.Добавить("РеализацияТоваровУслуг");
	
	МассивДокументовПрочее= Новый Массив(2);
	МассивДокументовПрочее.Добавить("ГТДИмпорт");
	МассивДокументовПрочее.Добавить("ОтчетОРозничныхПродажах");
	
	
	Если  МассивВидовДокументовПокупателя.Найти(МетаданныеДокумента.имя)<> Неопределено   Тогда
		Если  (ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем или  ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			массивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			массивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		КонецЕсли;	
	ИначеЕсли  МассивВидовДокументовПоставщика.Найти(МетаданныеДокумента.имя)<> Неопределено  Тогда	
		Если ( ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком или  ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
			массивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			массивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		КонецЕсли;	
	ИначеЕсли  МассивДокументовПрочее.Найти(МетаданныеДокумента.имя)<> Неопределено  Тогда
		Если  ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			массивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		КонецЕсли;
	Иначе
		массивДопустимыхВидовДоговоров.Добавить(ВидДоговора);
	конецЕсли;	
	Возврат массивДопустимыхВидовДоговоров;	
КонецФункции	


Процедура НачалоВыбораФайла(Элемент)
	ВыборФайла(Элемент);
	
	
КонецПроцедуры  // НачалоВыбораФайла()



Процедура ПутьДоФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент)    ;
	
КонецПроцедуры

Процедура ПутьДоФайлаОткрытие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение(Элемент.Значение);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр     = "Файл данных (*.xls)|*.xls|Файл данных 07(*.xlsx)|*.xlsx";
	ДиалогВыбора.Расширение = "xls";
	
	ДиалогВыбора.Заголовок ="Выберите файл для загрузки данных ";
	
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	ДиалогВыбора.ПолноеИмяФайла				=	Элемент.Значение;
	
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;			
	
КонецПроцедуры



Процедура прочитать(Элемент)
	//мТабДок.Очистить();
	Если _ОбщегоНазначения.ПроверкаЗаполненияПолейДиалога(ЭлементыФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитанныйФайл.Колонки.Очистить();	
	
	//ПрочитанныйФайл=СчитатьЛистЕксельВТЗ(ПутьДоФайла,ЛистЕксельВыб);
	НомерЛиста=?(ЗначениеЗаполнено(ЛистЕксль),ЛистЕксль,1);
	ОбластьСчитывания=Новый Структура("ПерваяКолонка, ПоследняяКолонка, НачальнаяСтрока, КонечнаяСтрока, НомерЛиста",1,КонКолонка,НачСтрока,КонСтрока,НомерЛиста);
	
	ПрочитанныйФайл=СчитатьОбластьЕксельВТЗ(ПутьДоФайла,ОбластьСчитывания,200,Истина);
	
	
	ЭлементыФормы.ПрочитанныйФайл.СоздатьКолонки();
	
	ЕстьОшибки=_ОбщегоНазначения.ПроверкаСтруктурыКолонокТЗ(ПрочитанныйФайл,СтруктураПолей);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки=ПроверкаЗаполненияЗначенийПолейТЗ (ПрочитанныйФайл);
	Если ЕстьОшибки Тогда
		//мТабДок.показать();
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Ложь;
		Возврат;
	КонецЕсли;
	
	
	Если ПрочитанныйФайл.количество()>0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Истина;  
	КонецЕсли;	
	
	КонецПроцедуры

Функция СчитатьЛистЕксельВТЗ(ИмяФайла,Знач НомерЛиста=1)
	Тз = Новый ТаблицаЗначений;
	
	
	
	Попытка
		Excel     = Новый COMОбъект("Excel.Application");
		WB         = Excel.Workbooks.Open(ИмяФайла);
		WS         = WB.Worksheets(НомерЛиста);
		arr     = WS.UsedRange.Value;
		WB.Close(0);
	Исключение
		Предупреждение("Внимание! Файл не открыт."+Символы.ПС+"Попробуйте открыть и пересохранить данный файл программой Эксель.",15);
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		МассивКолонок = arr.Выгрузить();
	Исключение
		Предупреждение("Возникли проблемы при считывании данных с листа "+НомерЛиста+", проверьте заполнен ли это лист"+Символы.ПС+"          (на листе должно быть несколько значений).",15);
		Возврат Неопределено;
	КонецПопытки;
	
	СчетчикКолонок=0;	   
	Для Каждого Колонка из МассивКолонок Цикл 
		СчетчикСтрок=0;
		Для Каждого Строка из Колонка Цикл 
			Если СчетчикСтрок=0 тогда
				НаименованиеКолонки=_ОбщегоНазначения.КорректировкаНаименования(строка,Ложь);
				Если не ЗначениеЗаполнено(НаименованиеКолонки) Тогда
					НаименованиеКолонки="_"+Строка(СчетчикКолонок);
				КонецЕсли;	
				ТЗ.Колонки.Добавить(НаименованиеКолонки,,строка,СтрДлина(НаименованиеКолонки)+5);
				СчетчикСтрок=СчетчикСтрок+1;
				Продолжить;
			КонецЕсли;
			Если СчетчикКолонок=0 тогда
				НоваяСтрока=ТЗ.Добавить();
			КонецЕсли;	
			ТЗ[СчетчикСтрок-1][СчетчикКолонок]=Строка;
			СчетчикСтрок=СчетчикСтрок+1;
		КонецЦикла;
		СчетчикКолонок=СчетчикКолонок+1;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции	



Функция ПроверкаЗаполненияЗначенийПолейТЗ (ТЗ)
	ЕстьОшибки=Ложь;                
	МассивНаименованийТоваров=Новый ТаблицаЗначений;
	
	МассивПромеж=ТЗ.ВыгрузитьКолонку("Наименование_товара");
	МассивНаименованийТоваров.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));	
	
	Для Н=1 По МассивПромеж.Количество() Цикл
		МассивНаименованийТоваров.Добавить();
	КонецЦикла; 

	
	МассивНаименованийТоваров.ЗагрузитьКолонку(МассивПромеж,"Наименование");
	
	НаименованиеСкладаОтправителя=ТЗ.колонки[2].заголовок;
	СсылкаНаСклОтправитель=Справочники.Склады.НайтиПоНаименованию(НаименованиеСкладаОтправителя,Истина);
	
	Если СсылкаНаСклОтправитель=Справочники.Склады.ПустаяСсылка() или СсылкаНаСклОтправитель=Неопределено Тогда
		Сообщение="Не найдено наименование склада отправителя "+НаименованиеСкладаОтправителя;
		ЕстьОшибки=Истина;
		#Если Клиент Тогда
			Сообщить(Сообщение);
		#КонецЕсли
		Возврат ЕстьОшибки;
	КонецЕсли;	
	
	МенджВР=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенджВР;
	//Массив=ТЗ.ВыгрузитьКолонку("Наименование");
	Отбор=Новый Структура("Ссылка",Null);
	МассивСкладов=Новый ТаблицаЗначений;
	МассивСкладов.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
	
	
	////  проверка наименований товаров---------------------------------------
	//Запрос.Текст="ВЫБРАТЬ
	//			 |	ВнешнийИсточник.Наименование
	//			 |ПОМЕСТИТЬ ВнешнийИсточник
	//			 |ИЗ
	//			 |	&ВнешнийИсточник КАК ВнешнийИсточник
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	Номенклатура.Ссылка,
	//			 |	ВнешнийИсточник.Наименование
	//			 |ИЗ
	//			 |	ВнешнийИсточник КАК ВнешнийИсточник
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	//			 |		ПО (ВнешнийИсточник.Наименование ПОДОБНО Номенклатура.Наименование)";
	//			 //|ГДЕ
	//			 //|	ВнешнийИсточник.Наименование <> &ПустаяСтрока";

	//
	//   Запрос.УстановитьПараметр("ВнешнийИсточник",МассивНаименованийТоваров);
	//  Запрос.УстановитьПараметр("ПустаяСтрока","");
	//  РЗ=Запрос.Выполнить().Выгрузить();
	//  МассивТоваров=РЗ.ВыгрузитьКолонку("Ссылка");

	//  
	//   Если РЗ.Количество()=0 Тогда
	//	  Сообщение="НЕ найдено ни одно наименование товара";
	//	  	#Если Клиент Тогда
	//	  		Сообщить(Сообщение);
	//		#КонецЕсли
	//		ЕстьОшибки=Истина;
	//  КонецЕсли;  
	// 	  
	//  	  
	//  МассивОшибок=Рз.НайтиСтроки(Отбор);
	//  
	//  
	//  Для Каждого Элемент ИЗ МассивОшибок Цикл
	//		 Сообщение="Не найдено наименование товара "+Элемент.наименование;
	//	 	#Если Клиент Тогда
	//	 		Сообщить(Сообщение,СтатусСообщения.Важное);
	//		#КонецЕсли
	//		Рз.Удалить(Элемент);
	//  КонецЦикла;  
	//  
	//Запрос.Текст="Уничтожить ВнешнийИсточник";
	// Запрос.Выполнить();
	//   	  
	//  
	//   //ЕстьОшибки=?(МассивОшибок.Количество()>0,Истина,ЕстьОшибки);
	//  
	////проверка наименований товаров---------------------------------------

	//МассивОшибок.Очистить();
	
	
	
	// проверка складов-----------------------------------------------------------
	СчетчикКолонок=0;   // колонку склада отправителя добавлять не будем
	Для Каждого Колонка из ТЗ.колонки  Цикл
		Если НЕ((Колонка.Заголовок="Наименование товара")или(Колонка.Заголовок="") или СчетчикКолонок=1)   Тогда
			НовСтр=МассивСкладов.Добавить();
			НовСтр.Наименование=Колонка.Заголовок;  
		КонецЕсли;
		СчетчикКолонок=СчетчикКолонок+1;
	КонецЦикла;  
	
	МассивТипов = Новый Массив;
     МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
     ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , ,);
	
	ТЗ.колонки.Добавить("Товар",ДопустимыеТипы);
	 МассивУдаляемыхСтрок=Новый Массив;
	Для Каждого СтрокаТЗ из ТЗ Цикл
		ТоварССылка=Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТЗ.Наименование_товара,Истина);
		Если ТоварССылка=Справочники.Номенклатура.ПустаяСсылка() или ТоварССылка=Неопределено Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТЗ);
			Сообщение="Не найдено наименование товара "+СтрокаТЗ.Наименование_товара;
		 	#Если Клиент Тогда
		 		Сообщить(Сообщение,СтатусСообщения.Важное);
			#КонецЕсли

		Иначе
			 СтрокаТЗ.товар=ТоварССылка;
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого ЭлМ из МассивУдаляемыхСтрок Цикл 
		ТЗ.удалить(ЭлМ);
	КонецЦикла;	
	
	//ТЗ.ЗагрузитьКолонку(МассивТоваров,"Товар");
		
     КонтрольОстатков(ТЗ, КонтрольОстатков,ЕстьОшибки);
	
	Текст=  "ВЫБРАТЬ
	               |	ВнешнийИсточник.Наименование
	               |ПОМЕСТИТЬ ВнешнийИсточник
	               |ИЗ
	               |	&ВнешнийИсточник КАК ВнешнийИсточник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Склады.Ссылка,
	               |	ВнешнийИсточник.Наименование
	               |ИЗ
	               |	ВнешнийИсточник КАК ВнешнийИсточник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%Склады% КАК Склады
	               |		ПО ВнешнийИсточник.Наименование = Склады.%Наименование%";
				   //|ГДЕ
				   //|	ВнешнийИсточник.Наименование <> &ПустаяСтрока";

	  
	   
	   Если   мСписокДокуметовБезКонтрагента.НайтиПоЗначению(ВидДокумента)<>Неопределено  Тогда
		   Текст=СтрЗаменить(Текст,"%Склады%","Склады");
		   Текст=СтрЗаменить(Текст,"%Наименование%","Наименование");
	   Иначе
		   Текст=СтрЗаменить(Текст,"%Склады%","Контрагенты");
		   Если ПереключательРежимаПоискаКлиентаПоНаим<>0 Тогда
			   Текст=СтрЗаменить(Текст,"%Наименование%","Код");
		   иначе
			    Текст=СтрЗаменить(Текст,"%Наименование%","Наименование");
		   КонецЕсли;
	   КонецЕсли;  
	   
	  Запрос.Текст=Текст;
	  Запрос.УстановитьПараметр("ВнешнийИсточник",МассивСкладов);
	  Запрос.УстановитьПараметр("ПустаяСтрока","");

	  РЗ=Запрос.Выполнить().Выгрузить();
	  
	 
	  
	 	  
	  МассивОшибок=Рз.НайтиСтроки(Отбор);
	  
	  КодНаименование =?(ПереключательРежимаПоискаКлиентаПоНаим<>0," код "," наименование ");

	  ОбъектПоиска=?(ВидДокумента=Документы.ПеремещениеТоваров,"Склада","Контрагента");
	  
	  Если РЗ.Количество()=0 Тогда
		  Сообщение="НЕ найдено ни одно "+ КодНаименование +ОбъектПоиска;
		  	#Если Клиент Тогда
		  		Сообщить(Сообщение);
			#КонецЕсли
			//ЕстьОшибки=Истина;
	  КонецЕсли;  
	  
	  Для Каждого Элемент ИЗ МассивОшибок Цикл
		     Сообщение="Не найдено "+ КодНаименование+ОбъектПоиска+" "+Элемент.наименование;
		 	#Если Клиент Тогда
		 		Сообщить(Сообщение,СтатусСообщения.Важное);
			#КонецЕсли
			Рз.Удалить(Элемент);
		КонецЦикла; 	
		
		
		
		МассивСкладов.Очистить();
		//МассивСкладов=РЗ.ВыгрузитьКолонку("Ссылка");

	// проверка складов-----------------------------------------------------------
			   
	ЕстьОшибки=?(МассивОшибок.Количество()>0,Истина,ЕстьОшибки);

	// проверка начличия остатка
	
	 Запрос.Текст="Уничтожить ВнешнийИсточник";
	 Запрос.Выполнить();

	 
	мОсновнойТипЦен=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОсновнойТипЦенПродажи");
	Если НЕ ЗначениеЗаполнено(мОсновнойТипЦен)  Тогда
		Сообщение="Не заполнена настройка пользователя ОсновнойТипЦенПродажи, заполните ее!";
		#Если Клиент Тогда
			Сообщить(Сообщение);
		#КонецЕсли	
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	 
	 
	 
	КонецФункции 

// процедура птроверяет достаточно ли товара на складе отправителе

Процедура      КонтрольОстатков(ТЗ, ПроверятьОстатки,ЕстьОшибки);
	Если НЕ ПроверятьОстатки Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяСклада=ТЗ.колонки.получить(2).Заголовок;
	Склад=Справочники.Склады.НайтиПоНаименованию(ИмяСклада,Истина);
     МассивТоваров= Тз.выгрузитьКолонку("Товар");
	
	Если Склад=Неопределено или Склад=Справочники.Склады.ПустаяСсылка() Тогда
		ЕстьОшибки=Истина;
		Сообщить("Не найден склад отправитель "+ИмяСклада);
		Возврат;
	КонецЕсли;	
	
	Тз.колонки.добавить("ИтоговоеКоличество",Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(10, 2 )));
	КоличествоКолонок= Тз.Колонки.количество()-2;
	//КоличествоСтрок= Тз.количество();
	//ПерваяСтрока=Истина;
	
	Для Каждого СтрокаТЗ из ТЗ Цикл
			
		ИтогКолПоСтроке=0;
		Для  каждого Колонка из ТЗ.колонки Цикл
			Если колонка=ТЗ.колонки.получить(2) или Колонка.имя="НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(СтрокаТЗ[Колонка.имя])=Тип("Число") Тогда
				ИтогКолПоСтроке=ИтогКолПоСтроке+СтрокаТЗ[Колонка.имя];
			КонецЕсли;
		КонецЦикла;
		СтрокаТЗ.ИтоговоеКоличество=ИтогКолПоСтроке;
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	
	Запросы = "ВЫБРАТЬ
	          |	ВнешнийИсточник.Товар,
	          |	ВнешнийИсточник.ИтоговоеКоличество
	          |ПОМЕСТИТЬ ВнешнийИсточник
	          |ИЗ
	          |	&ВнешнийИсточник КАК ВнешнийИсточник
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ВнешнийИсточник.Товар,
	          |	ЕСТЬNULL(ВложенныйЗапрос.СвободныйОстаток, 0) - ВнешнийИсточник.ИтоговоеКоличество КАК НеХватает,
	          |	ВложенныйЗапрос.СвободныйОстаток
	          |ИЗ
	          |	ВнешнийИсточник КАК ВнешнийИсточник
	          |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	          |			СвободныеОстатки.Номенклатура КАК Номенклатура,
	          |			СУММА(СвободныеОстатки.ТоварыНаСкладахОстатки - СвободныеОстатки.ТоварыВРезервеСкладахОстатки - СвободныеОстатки.ТоварыКПередачеСоСкладовОстатки) КАК СвободныйОстаток
	          |		ИЗ
	          |			(ВЫБРАТЬ
	          |				ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	          |				ТоварыНаСкладахОстатки.Склад КАК Склад,
	          |				ТоварыНаСкладахОстатки.КоличествоОстаток КАК ТоварыНаСкладахОстатки,
	          |				0 КАК ТоварыВРезервеСкладахОстатки,
	          |				0 КАК ТоварыКПередачеСоСкладовОстатки,
	          |				ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
	          |			ИЗ
	          |				РегистрНакопления.ТоварыНаСкладах.Остатки(
	          |						,
	          |						Номенклатура В (&Номенклатура)
	          |							И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	          |			
	          |			ОБЪЕДИНИТЬ ВСЕ
	          |			
	          |			ВЫБРАТЬ
	          |				ТоварыВРезервеСкладахОстатки.ХарактеристикаНоменклатуры,
	          |				ТоварыВРезервеСкладахОстатки.Склад,
	          |				0,
	          |				ТоварыВРезервеСкладахОстатки.КоличествоОстаток,
	          |				0,
	          |				ТоварыВРезервеСкладахОстатки.Номенклатура
	          |			ИЗ
	          |				РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	          |						,
	          |						Номенклатура В (&Номенклатура)
	          |							И Склад = &Склад) КАК ТоварыВРезервеСкладахОстатки
	          |			
	          |			ОБЪЕДИНИТЬ ВСЕ
	          |			
	          |			ВЫБРАТЬ
	          |				ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры,
	          |				ТоварыКПередачеСоСкладовОстатки.Склад,
	          |				0,
	          |				0,
	          |				ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток,
	          |				ТоварыКПередачеСоСкладовОстатки.Номенклатура
	          |			ИЗ
	          |				РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	          |						,
	          |						Номенклатура В (&Номенклатура)
	          |							И Склад = &Склад) КАК ТоварыКПередачеСоСкладовОстатки) КАК СвободныеОстатки
	          |		
	          |		СГРУППИРОВАТЬ ПО
	          |			СвободныеОстатки.Номенклатура) КАК ВложенныйЗапрос
	          |		ПО ВнешнийИсточник.Товар = ВложенныйЗапрос.Номенклатура
	          |ГДЕ
	          |	ЕСТЬNULL(ВложенныйЗапрос.СвободныйОстаток, 0) - ВнешнийИсточник.ИтоговоеКоличество < 0
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |УНИЧТОЖИТЬ ВнешнийИсточник";
	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Запрос.УстановитьПараметр("Склад",Склад );
	Запрос.УстановитьПараметр("ВнешнийИсточник",ТЗ);
	Запрос.Текст = Запросы;
	//РЗ=Запрос.Выполнить().Выгрузить();
	НедостающиеТовары = Запрос.Выполнить().Выгрузить();
	
	

	
	
	Если НедостающиеТовары.Количество()>0 тогда
		
		
		
		ВыбранныйВариант=ОткрытьФормуВыбораВарианта(НедостающиеТовары);
		
		Если ЗначениеЗаполнено(ВыбранныйВариант) Тогда
			Если ВыбранныйВариант=1 Тогда
				УдалитьНедостающиеПозиции(ТЗ,НедостающиеТовары);
			ИначеЕсли ВыбранныйВариант =2 Тогда
				РаспределитьЛишнее(ТЗ,НедостающиеТовары);
			иначе
				ЕстьОшибки=Истина;
			КонецЕсли;
		Иначе
			ЕстьОшибки=Истина;
	    КонецЕсли;
	КонецЕсли;	
	
		
	

	
	
КонецПроцедуры	


Процедура УдалитьНедостающиеПозиции(ТаблицаРаскладки,ТаблицаУдаляемыхТоваров)
	СтруктураОтбора=Новый Структура("Товар");
	МассивУдалемыхСтрок=Новый Массив;
	Для Каждого СтрокаТЗ из ТаблицаУдаляемыхТоваров Цикл
		Если НЕ СтрокаТЗ.пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураОтбора.Вставить("Товар",СтрокаТЗ.Товар);
		УдаляемыеСтроки=ТаблицаРаскладки.найтиСтроки(СтруктураОтбора);
		Для Каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
			МассивУдалемыхСтрок.Добавить(УдаляемаяСтрока);
		КонецЦикла;	
	КонецЦикла;	
	
	Для Каждого ЭлементМассива из МассивУдалемыхСтрок Цикл
		Сообщить("Из раскладки удалены строки с товаром "+ЭлементМассива.Товар,СтатусСообщения.Важное);
		ТаблицаРаскладки.удалить(ЭлементМассива);
	КонецЦикла;	
КонецПроцедуры

Процедура РаспределитьЛишнее(ТаблицаРаскладки,ТаблицаУдаляемыхТоваров)
	СтруктураОтбора=Новый Структура("Товар");
	Для Каждого СтрокаТЗ из ТаблицаУдаляемыхТоваров Цикл
		Если НЕ СтрокаТЗ.пометка Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора.Вставить("Товар",СтрокаТЗ.Товар);
		НайденныеСтроки=ТаблицаРаскладки.найтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				РаспределитьКоличествоПоКолонкам(строкаТЗ.НеХватает, НайденнаяСтрока);
		КонецЦикла;	
	КонецЦикла;		
	
КонецПроцедуры

Функция ОткрытьФормуВыбораВарианта(НедостающиеТовары)
	
	ФормаВыбораВарианта=ПолучитьФорму("ФормаВыбораВариантаРаскладки");
	
	ФормаВыбораВарианта.ОтсутсвующиеТовары=НедостающиеТовары;
	ТипБулево=Новый ОписаниеТипов("Булево");
	ФормаВыбораВарианта.ОтсутсвующиеТовары.Колонки.Вставить(0,"Пометка",ТипБулево," ",3);
	ФормаВыбораВарианта.ОтсутсвующиеТовары.ЗаполнитьЗначения(Истина,"Пометка");
	
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.СоздатьКолонки(); 		
	
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.Колонки.Пометка.ДанныеФлажка="Пометка";
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.Колонки.Пометка.Данные="";
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.Колонки.Пометка.УстановитьЭлементУправления(Тип("Флажок"));
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.Колонки.Пометка.РежимРедактирования=РежимРедактированияКолонки.Непосредственно;
	
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.Колонки.НеХватает.ТекстШапки="Не хватает";
	
	ФормаВыбораВарианта.ЭлементыФормы.ОтсутсвующиеТовары.Колонки.НеХватает.ЦветТекстаПоля=Новый Цвет(255, 0, 0); 
	
	ФормаВыбораВарианта.ОткрытьМодально(500);
	
	Возврат ФормаВыбораВарианта.вариант;

КонецФункции	

// Распределяет заданную сумму по выбранной колонке 
//
// Параметры: 
//  ИмяКолонки         - cтрока, имя колонки, по которой распределяется сумма ("Количество" или "Сумма");
//  СуммаРаспределения - число, распределяемая сумма
//
//
Процедура РаспределитьКоличествоПоКолонкам(СуммаРаспределения, СтрокаРаскладки)

	// Посчитаем общую помеченных позиций
	ОбщаяСумма = СтрокаРаскладки.ИтоговоеКоличество;
     ТЗ=СтрокаРаскладки.Владелец();
	
	Если ОбщаяСумма = 0 Тогда
		Сообщить("Общая сумма помеченных строк нулевая! по товару "+ СтрокаРаскладки.Товар+"
		               |Распределение невозможно.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	// Теперь распределяем
	ИмяКолонкиМаксимальнойСуммы = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; // Значение максимальной суммы.
	ЕдиницаРаспределения    =СуммаРаспределения / ОбщаяСумма;
	НепогашеннаяСумма       = СуммаРаспределения;

	// отсортируем колонки по убыванию по количеству в кажд. магазин
	СписокКолонок=ПолучитьСортированныйСписокКолонок(СтрокаРаскладки, ТЗ);

	// пройдемся по строке ТЗ в порядке убывания количества на магазин
	Для  каждого Колонка  из СписокКолонок Цикл
				

			ТекущаяСумма = СтрокаРаскладки[Колонка.Представление];
			Дельта       = Окр(ЕдиницаРаспределения * СтрокаРаскладки[Колонка.Представление]);

			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				ИмяКолонкиМаксимальнойСуммы = Колонка.Представление;
			КонецЕсли;

			// Учеличиваем значение
			СтрокаРаскладки[Колонка.Представление] = ТекущаяСумма + Дельта;

			// Остаток нераспределенной суммы надо уменьшать на дельту реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаРаскладки[Колонка.Представление] - ТекущаяСумма);

			Если НепогашеннаяСумма>=0 Тогда
				Прервать;
			КонецЕсли;
	КонецЦикла;

	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСумма <> 0 И ИмяКолонкиМаксимальнойСуммы <> Неопределено Тогда
		ТекущаяСумма=СтрокаРаскладки[ИмяКолонкиМаксимальнойСуммы];
		СтрокаРаскладки[ИмяКолонкиМаксимальнойСуммы]=Макс(СтрокаРаскладки[ИмяКолонкиМаксимальнойСуммы] + НепогашеннаяСумма,0);
		НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаРаскладки[ИмяКолонкиМаксимальнойСуммы]-ТекущаяСумма);
	КонецЕсли;
	
	Дельта=-1;	
	Если НепогашеннаяСумма <> 0 Тогда   // если опять не все рапсределили, значит в колонка с макс. суммой меньше суммы к погашению
		Для  каждого Колонка  из СписокКолонок Цикл  // пройдемся еще раз и будем отнимать по единице
			ТекущаяСумма = СтрокаРаскладки[Колонка.Представление];
			СтрокаРаскладки[Колонка.Представление] =Макс(ТекущаяСумма + Дельта,0);
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаРаскладки[Колонка.Представление] - ТекущаяСумма);
			
			Если НепогашеннаяСумма>=0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры// РаспределитьСуммуПоКолонке()

// отсортируем колонки по убыванию по количеству в кажд. магазин

Функция  ПолучитьСортированныйСписокКолонок(СтрокаТаблицыЗначений, ТЗ)
	СписокКолонок=Новый СписокЗначений;
	
	Для  каждого Колонка из ТЗ.колонки Цикл
			Если колонка=ТЗ.колонки.получить(2) или Колонка.имя="НомерСтроки" или Колонка.имя="ИтоговоеКоличество" Тогда
				Продолжить;
			КонецЕсли;	
			Если Не ТипЗнч(СтрокаТаблицыЗначений[Колонка.имя])=Тип("Число") Тогда
				Продолжить;
			КонецЕсли;
               СписокКолонок.Добавить(СтрокаТаблицыЗначений[Колонка.имя],Колонка.имя);
	 КонецЦикла;
	 
	 СписокКолонок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	 
	 Возврат СписокКолонок;
КонецФункции


	
	Процедура ПриОткрытии()
		мтекПользователь=глЗначениеПеременной("глТекущийПользователь");
		
		ПолеВводаДатаАктуальности=ТекущаяДата();
		
		ФлагУпрУчет = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОтражатьДокументыВУправленческомУчете");
		ФлагБухУчет= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
		ФлагНалогУчет= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОтражатьДокументыВНалоговомУчете");
		
		ФлагУчитыватьНДС=Истина;
		ФлагЦенаВключаетНДС=Истина;
			
		//  Если Не ЗначениеЗаполнено(ОформлятьВВалюте) Тогда
		//	ОформлятьВВалюте=Константы.ВалютаРегламентированногоУчета.Получить();
		//КонецЕсли;
		
		 Если Не ЗначениеЗаполнено(ПолеВводаОрганизация) Тогда
         		ПолеВводаОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОсновнаяОрганизация");
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ПолеВводаОтветственный) Тогда
			ПолеВводаОтветственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОсновнойОтветственный");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолеВводаПодразделение) Тогда
			ПолеВводаПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОсновноеПодразделение");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолеВводаТипЦен) Тогда
			ПолеВводаТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мтекПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		// Заполнить список выбора вида валюты цен
		ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора.Добавить("ВалютаРеглУчета",  "Документы в валюте регламентированного учета");
		ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора.Добавить("ВалютаПоДоговору", "Документы в валюте взаиморасчетов по договору");
		ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение;
		

 	КонецПроцедуры
	
	// Возвращает валюту документа в зависимости от валюты
// регламентированного учета и валюты договора
//
// Параметры: 
//  ВалютаДоговора - валюта договора
//
// Возвращаемое значение:
//  Валюта документа
//
Функция ПолучитьВалютуДокумента(ВалютаДоговора)

	Если ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение Тогда
		Возврат ВалютаДоговора;
	Иначе
		Возврат мВалютаРегламентированногоУчета;
	КонецЕсли;

КонецФункции 

// Процедура - обработчик события "ПриИзменении"
// поля выбора вида валюты.
//
Процедура ПолеВыбораВидВалютыПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПолеВыбораВидВалюты.Значение) Тогда
		ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение;
	КонецЕсли;

КонецПроцедуры

	
	Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		СписокДок=новый СписокЗначений();
		
		СписокДок.Добавить(Документы.ПоступлениеТоваровУслуг,"ПоступлениеТоваровУслуг");	
		СписокДок.Добавить(Документы.РеализацияТоваровУслуг,"РеализацияТоваровУслуг");
		СписокДок.Добавить(Документы.ПеремещениеТоваров,"Перемещение");
		СписокДок.Добавить(Документы.ВозвратТоваровОтПокупателя,"ВозвратТоваровОтПокупателя");
		СписокДок.Добавить(Документы.ВозвратТоваровПоставщику,"ВозратПостащику");
		СписокДок.Добавить(Документы.ОприходованиеТоваров,"ОприходованиеТоваров");
		//СписокДок.Добавить(Документы.ПланПродаж,"ПланПродаж");
		СписокДок.Добавить(Документы.ЗаказПокупателя,"Заказ покупателя");
		СписокДок.Добавить(Документы.ЗаказПоставщику, "ЗаказПостащику");
		СписокДок.Добавить(Документы.КорректировкаКачестваТоваров,"Корректировка качества");
		СписокДок.Добавить(Документы.СписаниеТоваров,"Списание");
		СписокДок.Добавить(Документы.СчетНаОплатуПоставщика,"Счет На Оплату Поставщика");
		СписокДок.Добавить(Документы.СчетНаОплатуПокупателю,"Счет На Оплату Покупателю");

		
		
		
		
		
		ЭлементыФормы.ВидДокумента.СписокВыбора=СписокДок;
		
		Если ВидДокумента=Неопределено Тогда
			ЭлементыФормы.ВидДокумента.Значение=ЭлементыФормы.ВидДокумента.СписокВыбора[1].Значение;
		КонецЕсли;
		
	КонецПроцедуры

// Возвращает значение переменной мВалютаУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты – значение переменной мВалютаУпрУчета
//
Функция ПолучитьВалютуУпрУчета() Экспорт

	Если мВалютаУпрУчета = Неопределено Тогда
		мВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;

	Возврат мВалютаУпрУчета;

КонецФункции // ПолучитьВалютуУпрУчета()

// Возвращает значение переменной мВалютаРегламентированногоУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты – значение переменной мВалютаРегламентированногоУчета
//
Функция ПолучитьВалютуРегламентированногоУчета() Экспорт

	Если мВалютаРегламентированногоУчета = Неопределено Тогда
		мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	Возврат мВалютаРегламентированногоУчета;

КонецФункции // ПолучитьВалютуРегламентированногоУчета()

// Инициализирует курс и кратность упр. учета
//
Процедура ИнициализироватьКурсИКратностьУпрУчета()
 
	СтруктураКурса     = МодульВалютногоУчета.ПолучитьКурсВалюты(ПолучитьВалютуУпрУчета(), ПолеВводаДатаАктуальности);
	мКурсУпрУчета      = СтруктураКурса.Курс;
	мКратностьУпрУчета = СтруктураКурса.Кратность;
	
КонецПроцедуры // ИнициализироватьКурсИКратностьУпрУчета()

// Возвращает значение переменной мКурсУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Число – значение переменной мКурсУпрУчета
//
Функция ПолучитьКурсУпрУчета() Экспорт

	Если мКурсУпрУчета = Неопределено Тогда	
		ИнициализироватьКурсИКратностьУпрУчета()
	КонецЕсли; 
	
	Возврат мКурсУпрУчета; 

КонецФункции // ПолучитьКурсУпрУчета()

// Возвращает значение переменной мКратностьУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Число – значение переменной мКратностьУпрУчета
//
Функция ПолучитьКратностьУпрУчета() Экспорт

	Если мКратностьУпрУчета = Неопределено Тогда	
		ИнициализироватьКурсИКратностьУпрУчета()
	КонецЕсли; 
	
	Возврат мКратностьУпрУчета; 

КонецФункции // ПолучитьКратностьУпрУчета()

Процедура ПутьДоФайлаПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Ложь;
КонецПроцедуры

Процедура ВидДокументаПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Ложь;
КонецПроцедуры

Процедура ПереключательРежимаПоискаКлиентаПоНаимПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Ложь;
КонецПроцедуры

Процедура ПереключательРежимаПоискаКлиентаПоКодуПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Ложь;
КонецПроцедуры



// <Описание>
// Считывает область Ексель в ТЗ
// возращает ТЗ
//
// Параметры
//  <ПолноеИмяФайла>  - <Строка> - <Путь+имя файла>
//             
//  <СтруктураПараметров>  - <структура> - <координаты считываемой области>
//  МаксРазмерКолонки - число -количество символов которое нужно выделять под считываемую информацию             
//
Функция  СчитатьОбластьЕксельВТЗ(ПолноеИмяФайла, СтруктураПараметров, МаксРазмерКолонки=500, НазванияКолонокВПервойСтроке=Ложь)	   Экспорт 
	
	Тз = Новый ТаблицаЗначений;
	НомерЛиста=СтруктураПараметров["НомерЛиста"];
	//ПоследняяКолонка=СтруктураПараметров.Свойство("ПоследняяКолонка");
	ПоследняяКолонка=?(НЕ СтруктураПараметров.Свойство("ПоследняяКолонка"),СтруктураПараметров["ПерваяКолонка"],СтруктураПараметров["ПоследняяКолонка"]);
	ПерваяКолонка=СтруктураПараметров["ПерваяКолонка"];
	ЧислоРазрядовДляХраненияНомераСтроки=10;
	
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(МаксРазмерКолонки);
	//КД = Новый КвалификаторыДаты (ЧастиДаты.Дата);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
     Массив.Добавить(Тип("Число"));
     ДопустимыеТипы = Новый ОписаниеТипов(Массив,КЧ , КС);	
	
	Попытка
		Excel     = Новый COMОбъект("Excel.Application");
		WB         = Excel.Workbooks.Open(ПолноеИмяФайла);
		WS         = WB.Worksheets(НомерЛиста);
	Исключение
		#Если Клиент Тогда
			Предупреждение("Внимание! Файл не открыт."+Символы.ПС+"Попробуйте открыть и пересохранить данный файл программой Эксель.",15);
		#КонецЕсли
		Возврат Неопределено;
	КонецПопытки;

	Тз.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(ЧислоРазрядовДляХраненияНомераСтроки)));   // колонка для хранения номера строки файла
	                                                                                                                                    // откуда считали данные
     ДопКоэф=?(НазванияКолонокВПервойСтроке,1,0); 
	
	Для j=ПерваяКолонка по ПоследняяКолонка Цикл                                 // цикл по колонкам
		Если НазванияКолонокВПервойСтроке Тогда 
			ИмяКолонки=WS.Cells(СтруктураПараметров["НачальнаяСтрока"], j).Value;
			Если ЗначениеЗаполнено(ИмяКолонки) Тогда
				Попытка
					ТекКолонка=Тз.Колонки.Добавить(_ОбщегоНазначения.КорректировкаНаименования(ИмяКолонки,Ложь),ДопустимыеТипы,ИмяКолонки,СтрДлина(ИмяКолонки));
				Исключение
					ТекКолонка=Тз.Колонки.Добавить("_"+Строка(j),ДопустимыеТипы);
				КонецПопытки;
			Иначе
				ТекКолонка=Тз.Колонки.Добавить("_"+Строка(j),ДопустимыеТипы);
			КонецЕсли;
		Иначе
			ТекКолонка=Тз.Колонки.Добавить("_"+Строка(j),ДопустимыеТипы);
		КонецЕсли;
		
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Состояние("Считывание файла "+j+" %");
		#КонецЕсли
	
		Для i=(СтруктураПараметров["НачальнаяСтрока"]+ДопКоэф) По СтруктураПараметров["КонечнаяСтрока"] Цикл     // цикл по строкам
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			//Если i=СтруктураПараметров["НачальнаяСтрока"] Тогда
			//	Продолжить;
			//КонецЕсли;	
			
			Если j=ПерваяКолонка Тогда
				НоваяСтрока=Тз.Добавить();
				НоваяСтрока["НомерСтроки"]=i;
			Иначе
				НоваяСтрока=Тз[i-СтруктураПараметров["НачальнаяСтрока"]-ДопКоэф];
			КонецЕсли;
			СчитывавемоеЗначение=WS.Cells(i, j).Value;

			//Если  НЕ((Найти(НРЕГ(имяКолонки),"цена")=1) или (Найти(НРЕГ(имяколонки),"количество")=1)) Тогда
			//	СчитывавемоеЗначение=?(ТипЗнч(СчитывавемоеЗначение)=Тип("Число"),формат(СчитывавемоеЗначение,"ЧГ=0"),СчитывавемоеЗначение);
			//КонецЕсли;
			НоваяСтрока[ТекКолонка.Имя]=?(ТипЗнч(СчитывавемоеЗначение)=Тип("Строка"),СокрЛП(Строка(СчитывавемоеЗначение)),СчитывавемоеЗначение);
		КонецЦикла;
	КонецЦикла;

	Попытка
		WB.Close(ПолноеИмяФайла);
	Исключение
		#Если Клиент Тогда
			Сообщить("Не могу закрыть файл "+ПолноеИмяФайла);
		#КонецЕсли
	КонецПопытки;
	Excel.Quit();
	Excel=Неопределено;
	Возврат ТЗ;
КонецФункции // ()


ЛистЕксельВыб = 1;
СтруктураПолей=Новый Структура("Наименование","Наименование_товара");
ЭлементыФормы.ОсновныеДействияФормы.Кнопки["ОсновныеДействияФормыВыполнить"].Доступность=Ложь;

мСписокДокуметовБезКонтрагента=Новый СписокЗначений;
мСписокДокуметовБезКонтрагента.Добавить(Документы.ПеремещениеТоваров);
мСписокДокуметовБезКонтрагента.Добавить(Документы.ОприходованиеТоваров);
мСписокДокуметовБезКонтрагента.Добавить(Документы.КорректировкаКачестваТоваров);
мСписокДокуметовБезКонтрагента.Добавить(Документы.СписаниеТоваров);