Перем мфСтруктураЗагружаемыхКолонок;
// загрузка ///////////////////////////////////////////

&НаКлиенте
Процедура Загрузить(Команда)
	АдресФайла = "";
	ИмяФайлаДляРасширения = "";

	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСервВызов", ЭтотОбъект, Новый Структура());
	НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, ИмяФайла ,Ложь, УникальныйИдентификатор);

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Загрузка завершена";
	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();
	
	//ЗагрузитьСервВызов(Истина, АдресФайла, ИмяФайлаДляРасширения, Неопределено);
	 //Форма=Документ.ПолучитьФорму();
	 Если ВладелецФормы<>Неопределено Тогда
		 ВладелецФормы.прочитать();
	 КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСервВызов(Результат, пАдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры)

	ВремФайл=Новый Файл(ИмяФайла);
	
	ЗагрузкаИз_csv=ВремФайл.Расширение=".csv";
	
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ВременноеУникальноеИмяФайла=ПолучитьИмяВременногоФайла("xls");
	//ВременноеУникальноеИмяФайла=ПолучитьИмяВременногоФайла(СтрЗаменить(ВремФайл.Расширение,".",""));
	
	
	ВремФайл=Новый Файл (ВременноеУникальноеИмяФайла);
	
	ПолноеИмяФВеренногоФайла=КаталогВременныхФайлов()+ВремФайл.Имя;

	
 	ИмяФайлаНаСервере(пАдресФайла, ПолноеИмяФВеренногоФайла);

	
	ЗагрузитьНаСервере(ПолноеИмяФВеренногоФайла,  ДополнительныеПараметры, ЗагрузкаИз_csv);
	
	
	
	
	//ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   

	ВремФайл=Новый Файл (ПолноеИмяФВеренногоФайла);

	
	Если ВремФайл.Существует() Тогда
		Попытка
			УдалитьФайлы(ВремФайл.ПолноеИмя);
		Исключение
			СообщитьСерв("Ошибка удаления временного файла "+ПолноеИмяФВеренногоФайла,ЭтаФорма);
		КонецПопытки
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
процедура ИмяФайлаНаСервере(АдресФайла, НовоеИмяФайлаНаСервере)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(НовоеИмяФайлаНаСервере);
	
конецПроцедуры // ИмяФайлаНаСервере()

&НаКлиенте
процедура ИмяФайлаНаКлиент(АдресФайла, НовоеИмяФайлаНаСервере)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(НовоеИмяФайлаНаСервере);
	
конецПроцедуры // ИмяФайлаНаСервере()



&НаСервере
Функция ПрочитатьБыстроЛистExcel(ТЗ = Неопределено, ЛистЭксель = Неопределено, НомерПервойСтроки = 1, НомерПервойКолонки = 1, ВсегоСтрок = 0, ВсегоКолонок = 0, СчитываемыйОбъект="Value") Экспорт
	
	Если ЛистЭксель = Неопределено Тогда
		ЛистЭксель = ПолучитьCOMОбъект(,"Excel.Application");
	КонецЕсли;
	Если ВсегоСтрок = 0 Тогда
		ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
	КонецЕсли;
	Если ВсегоКолонок = 0 Тогда
		ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	КонецЕсли;
	
 	КоличествоКолонок=ВсегоКолонок-НомерПервойКолонки+1;

	
	Если ТЗ = Неопределено Тогда
		ТЗ =  Новый ТаблицаЗначений;
		//Для Счетчик = 1 По ВсегоКолонок Цикл
		Для Счетчик = 1 По КоличествоКолонок Цикл
			ТЗ.Колонки.Добавить("Колонка"+Счетчик, Новый ОписаниеТипов("Строка"));
		КонецЦикла;
	КонецЕсли;
	Для Счетчик = НомерПервойСтроки По ВсегоСтрок Цикл
		НоваяСтрока = ТЗ.Добавить();
	КонецЦикла;
	
	Область = ЛистЭксель.Range(ЛистЭксель.Cells(НомерПервойСтроки,НомерПервойКолонки), ЛистЭксель.Cells(ВсегоСтрок,ВсегоКолонок));
	//Данные = Область.Value.Выгрузить();
	Данные = Область[СчитываемыйОбъект].Выгрузить();
	
	
	//Для Счетчик = 0 По ВсегоКолонок-1 Цикл
	Для Счетчик = 0 По КоличествоКолонок-1 Цикл
		ТЗ.ЗагрузитьКолонку(Данные[Счетчик], Счетчик);
	КонецЦикла;
	ЛистЭксель = Неопределено;
	Возврат ТЗ;
КонецФункции

//ПреобразоватьТекстCSVвТЗ () импортирует данные в ТЗ из текста формата CSV
//Параметры:
//ТекстCSV 		- Строка, содержащая текст в формате csv
//Разделитель 	- Для формата CSV разделителем является ',', но т.к. 
//				  Excel берет разделитель из региональных стандартов, то
//				  используется ';', поддерживает многострочные поля
//
Функция ПреобразоватьТекстCSVвТЗ(пИмяФайла, Разделитель=";", пКодировка) Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ОсобаяСтрока = "$#%^&*!xyxb$#%&*!^";	// для замены ""
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Число"));
	КвЧисла = Новый КвалификаторыЧисла(15, 2);
	КвСтроки = Новый КвалификаторыСтроки(300);
	
	ДопустимыеТипы = Новый ОписаниеТипов( МассивТипов,КвЧисла, КвСтроки);
	
	
	Попытка
		ЗагружаемыйФайл.Прочитать(пИмяФайла, пКодировка);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Тз;
	КонецПопытки;
	
    ТекстCSV=ЗагружаемыйФайл.ПолучитьТекст();
	
	НомерСтроки = 1;
	Стр = СтрПолучитьСтроку(ТекстCSV,НомерСтроки);
	Пока НомерСтроки <= СтрЧислоСтрок(ТекстCSV) Цикл
		СтрокаТЗ = ТЗ.Добавить();
		НомерПоля = 0;
		Пока Стр <> "" Цикл
			Токен = "";
			ПозицияРазделителя = Найти(стр, Разделитель);
			ПозицияОткрКавычек = Найти(стр, """");
			Если (ПозицияРазделителя > ПозицияОткрКавычек ИЛИ ПозицияРазделителя = 0) И ПозицияОткрКавычек > 0 Тогда
				// начинающееся с кавычек читаем до тех пор
				Токен = Сред(Стр, 1, ПозицияОткрКавычек);
				Стр = СтрЗаменить(Сред(Стр, ПозицияОткрКавычек+1), """""", ОсобаяСтрока);
				
				ПозицияЗакрКавычек = Найти(Стр, """");
				Пока ПозицияЗакрКавычек = 0 Цикл
					Токен = Токен + Стр + Символы.ПС;
					НомерСтроки = НомерСтроки + 1;
					Стр = СтрПолучитьСтроку(ТекстCSV, НомерСтроки);
					Стр = СтрЗаменить(Стр, """""", ОсобаяСтрока);
					// пока не встретим закрывающие
					ПозицияЗакрКавычек = Найти(Стр, """");
				КонецЦикла;
				ПозицияРазделителя=Найти(Сред(Стр,ПозицияЗакрКавычек), Разделитель);
				ПозицияРазделителя = ?(ПозицияРазделителя>0, ПозицияЗакрКавычек + ПозицияРазделителя-1, 0);
			КонецЕсли;

			Токен = Токен + ?(ПозицияРазделителя>0, Сред(Стр, 1, ПозицияРазделителя-1), Стр);
			Стр = ?(ПозицияРазделителя>0, Сред(Стр, ПозицияРазделителя+1), "");
			
			Если Лев(Токен, 1) = """" Тогда
				Токен = Сред(Токен, 2);
				Токен = ?(Прав(Токен, 1) = """", Сред(Токен, 1, СтрДлина(Токен)-1), Токен);
			КонецЕсли;
			Токен = СтрЗаменить(Токен, ОсобаяСтрока, """");
			
			НомерПоля = НомерПоля + 1;
			Если ТЗ.Колонки.Количество()<НомерПоля Тогда
				ТЗ.Колонки.Добавить("Колонка"+НомерПоля, ДопустимыеТипы, Токен);
			КонецЕсли;
			СтрокаТЗ[НомерПоля-1] = Токен;

		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
		Стр = СтрПолучитьСтроку(ТекстCSV, НомерСтроки);
	КонецЦикла;
	
	Тз.Удалить(0);   // удалим колонку заголовков
	
	Возврат ТЗ;
КонецФункции


&НаСервере
Процедура ЗагрузитьНаСервере(пИмяФайла, пДополнительныеПараметры, пЗагрузка_из_csv)

	НачальнаяСтрока=1;
	НачальнаяКолонка=1;
	
	КонечнаяСтрока=41;
	КонечнаяКолонка=5;
	
	ТабДок=Новый ТабличныйДокумент;
	ТаблицаИзФайла=Новый ТаблицаЗначений;
	
	//мПрочитатьТабличныйДокументИзCalc(ТабДок,пИмяФайла, 1);
	//
	//ПрочитатьТабДокумент_вТЗ(ТабДок,ТабДок.Область(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка), ТаблицаИзФайла);

	ТаблицаИзФайла=ПреобразоватьТекстCSVвТЗ(пИмяФайла,";", КодировкаТекста.ANSI);
	
	//пДополнительныеПараметры.Вставить("Загрузка_из_csv", Истина);
	ОбработкаТаблицыФайла(ТаблицаИзФайла,   пДополнительныеПараметры);
	

КонецПроцедуры



// загрузка ///////////////////////////////////////////

Функция мПрочитатьТабличныйДокументИзCalc(ТабличныйДокумент, ИмяФайла, НомерЛистаCalc = 1) Экспорт

    ВыбФайл = Новый Файл(ИмяФайла);
    Если НЕ ВыбФайл.Существует() Тогда
        Сообщить("Файл не существует!");
        Возврат Ложь;
    КонецЕсли;

    Попытка
        ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
        Desktop = ServiceManager.CreateInstance("com.sun.star.frame.Desktop");
		//Desktop.getCurrentFrame().getContainerWindow().setVisible(Ложь);  //невидимым основное окно.

        //установим параметры - не показывать таблицу Calc
        ПараметрыЗагр = Новый COMSafeArray("VT_DISPATCH", 1);
        СвойствоЗагр = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
        СвойствоЗагр.Name = "Hidden";
        СвойствоЗагр.Value = true;
        ПараметрыЗагр.SetValue(0,СвойствоЗагр);

        Document = Desktop.LoadComponentFromURL("file:///" + ИмяФайла, "_blank", 0, ПараметрыЗагр);
		//Состояние("Обработка файла Office Calc ...");
        Листы = Document.getSheets();
        Лист = Листы.getByIndex(НомерЛистаCalc-1);
    Исключение
        Сообщить("Ошибка загрузки данных. Возможно неверно указан номер листа книги Calc."+ОписаниеОшибки());
        Возврат ложь;
    КонецПопытки;

    ТабличныйДокумент.Очистить();

    //Определение максимум ячейки с данными...
    НульЯчейка = Лист.GetCellbyPosition(0,0);
    НульКурсор = Лист.createCursorByRange(НульЯчейка);
    НульКурсор.GotoEndOfUsedArea(1);
    НульАдрес  = НульКурсор.RangeAddress;
    ПослСтрока = НульАдрес.EndRow;
    ПослКолонка = НульАдрес.EndColumn;
	
	Для Column = 1 По ПослКолонка + 1  Цикл     
		Для Row = 1 По ПослСтрока + 1  Цикл     
			
			Если Лист.getCellByPosition(Column-1,Row-1).getType() = 0 Или Лист.getCellByPosition(Column-1,Row-1).getType() = 1 Тогда      
				
				ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = Лист.getCellByPosition(Column-1,Row-1).value;
				
			ИначеЕсли Лист.getCellByPosition(Column-1,Row-1).getType() = 2 Тогда
				
				ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = Лист.getCellByPosition(Column-1,Row-1).string;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
    //ServiceManager.quit();
    Document.Dispose();
    Document = 0;
    ПараметрыЗагр = 0;
    Desktop = 0;
    ServiceManager = 0;

    Возврат Истина;

КонецФункции


// Процедура считавает табличный документ
// Параметры:
// пТабДокумент- табличный документ/область таб. док из которого происходит чтение
// пТЗ - ТЗ - пустая, приемник для заполнения данных из ТД
// пОбласть - считываемая область ТД
// в пТЗ добавляются колонки вида: Колонка1, Колонка2... КолонкаN, где N кол-во колонок ТД
Процедура ПрочитатьТабДокумент_вТЗ(пТабДокумент, пОбласть, пТЗ)  Экспорт 
	
	 КС=Новый КвалификаторыСтроки(300);
	 КЧ=Новый КвалификаторыЧисла(15,2);
	 МассивТипов = Новый Массив;
	 МассивТипов.Добавить(Тип("Число"));
	 МассивТипов.Добавить(Тип("Строка"));

	 ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов,,, КЧ,КС);

	//цикл по столбцам ТД
	Для Колонка=пОбласть.Лево по пОбласть.Право  Цикл
		 ИмяКолонки="Колонка"+Колонка;
		 пТз.Колонки.Добавить(ИмяКолонки, ДопустимыеТипы);
		//вл. цикл по строкам ТД
		Для СтрокаТД=пОбласть.Верх по  пОбласть.Низ Цикл
			Если Колонка=пОбласть.Лево Тогда   // при первом обходе добавляем строки
				НоваяСтрока=пТз.Добавить();
			Иначе
				НоваяСтрока=пТЗ[СтрокаТД-пОбласть.Верх];   // тек. строка
			КонецЕсли;
			НоваяСтрока[ИмяКолонки]=СтрЗаменить(пТабДокумент.Область(СтрокаТД, Колонка).Текст, Символы.НПП, "");
		КонецЦикла;
	КонецЦикла;	
	

КонецПроцедуры




// Чтение из файла//////////////////////////////////

&НаСервере
Процедура ОбработкаТаблицыФайла(пТзИзФайла,   пДополнительныеПараметры)
	
	
	 Отказ=Ложь;
	 
	 
	  
	 ИменоватьКолонкиТз(пТзИзФайла);

	 
	 
 
     ДобавитьСвойства(пТзИзФайла, пДополнительныеПараметры);
	 
КонецПроцедуры

// Есть ошибки - возращает Ложь, иначе истина
функция ПроверкаСтруктурыКолонокТЗ(ТЗ,СписокПолей, ПоКлючам=Ложь)  Экспорт
	Если (СписокПолей.количество()=0)И(Тз.Колонки.Количество()<>0) Тогда
		Возврат Истина;  // error
	КонецЕсли;
	
	Если НЕ ПоКлючам Тогда      // названия полей хранятся в значениях структура
		Для каждого ЭлементСтр Из СписокПолей Цикл
			Если Тз.колонки.Найти(ЭлементСтр.Значение)=Неопределено Тогда	
				Сообщить("В файл отсутствует колонка "+СокрЛП(ЭлементСтр.Значение));
				Возврат Истина; // error    
			КонецЕсли;
		КонецЦикла;	 
	Иначе                 // названия полей хранятся в ключах структура
		Для каждого ЭлементСтр Из СписокПолей Цикл
			Если Тз.колонки.Найти(ЭлементСтр.Ключ)=Неопределено Тогда	
				Сообщить("В файл отсутствует колонка "+СокрЛП(ЭлементСтр.Ключ));
				Возврат Истина; // error    
			КонецЕсли;
		КонецЦикла;	 
	КонецЕсли;
	
	
	Возврат ложь;
КонецФункции


&НаСервере
Процедура ДобавитьСвойства(пТаблицаИзФайла,  пДополнительныеПараметры)
	
	
	
	Для Каждого СтрокаИзФайла из пТаблицаИзФайла Цикл
		
		
        ИскомоеЗначениеСвойства=ПолучитьЗначение(СтрокаИзФайла.ID, Свойство, СтрокаИзФайла.Название);
		
	КонецЦикла;	


	


	
КонецПроцедуры




Функция ПолучитьЗначение(пЗначение, пСвойство, пНовоеНаименование)

	
	ИскомаяСсылка=Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(пЗначение,Истина,,пСвойство);
	
	
	Если ИскомаяСсылка.Пустая() Тогда
		
		
		//ИскомаяСсылка=ПолучитьЗначениеФрагмент(пЗначение, пСвойство);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найден бренд "+пЗначение;
		Сообщение.Сообщить();

		
	Иначе
		
		ОбъекьСпр=ИскомаяСсылка.ПолучитьОбъект();
		ОбъекьСпр.Наименование= пНовоеНаименование;
		ОбъекьСпр.Записать();
		
	КонецЕсли;	
	
	Возврат ИскомаяСсылка;
			


КонецФункции

Функция ПолучитьЗначениеФрагмент(пЗначение, пСвойство)
	
	
	НовыйЭлемент=Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	НовыйЭлемент.Наименование=пЗначение;
	НовыйЭлемент.Владелец=пСвойство;
	
	
	Попытка
		
		НовыйЭлемент.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка записи знач. "+ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;

	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции // ПолучитьЗначение()



Функция ПолучитьТзСвойств(пМассивНаборовойств)
	
	Перем Запрос, РезультатЗапроса, ТзСвойсвтв;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств в (&МассивНабороввойств)";
	
	Запрос.УстановитьПараметр("МассивНабороввойств", пМассивНаборовойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТзСвойсвтв=РезультатЗапроса.Выгрузить();
	Возврат ТзСвойсвтв;

КонецФункции // ()


Процедура ДобавитьКолонку_в_ТзФайла(пТзИзФайла, пТзСсылок, пИмяКолонкиПоиска_в_файле, пИмяДобавляемойКолонки)

	 пТзИзФайла.Колонки.Добавить(пИмяДобавляемойКолонки);
	 
	 КопияТз=пТзИзФайла.СкопироватьКолонки();
	 
	 Для каждого СтрокаТЗ Из пТзИзФайла Цикл
		 
		 
		 
		 МассивСтрокТЗ=пТзСсылок.найтиСтроки(Новый Структура("ЗначениеПоиска", СтрокаТЗ[пИмяКолонкиПоиска_в_файле]));
		 
		 
		 Если МассивСтрокТЗ.Количество()=0 Тогда
			 Продолжить;
		 КонецЕсли;	
		 
		 СтрокаТЗ[пИмяДобавляемойКолонки]=МассивСтрокТЗ[0].Ссылка;
		 
		 Для i=1 по   МассивСтрокТЗ.Количество()-1 Цикл
		     
		     НоваяСтрокаКопииТЗ=КопияТз.Добавить();
		     ЗаполнитьЗначенияСвойств(НоваяСтрокаКопииТЗ, СтрокаТЗ);
		     
		 КонецЦикла;	
		 
		 
	 КонецЦикла;
	 
	 
	 Для  каждого строкаКопииТЗ Из КопияТз Цикл
	        НоваяСтрокаОргинальнойТЗ=пТзИзФайла.Добавить();
	    	ЗаполнитьЗначенияСвойств(НоваяСтрокаОргинальнойТЗ, строкаКопииТЗ);
	 КонецЦикла;
	 
 КонецПроцедуры

&НаСервере
// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);
	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
	Иначе
		Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

&НаСервере
Процедура ИменоватьКолонкиТз(пТзИзФайла)
	НомерСтрокиЗаголовков=0;
	
	СтрокаИменколонок="";
	
	//Для Каждого КолонкаТз из пТзИзФайла.Колонки Цикл
	//	
	//	Для Каждого ЭлементСтрукт из мфСтруктураЗагружаемыхКолонок Цикл
	//		
	//		Если Нрег(пТзИзФайла[НомерСтрокиЗаголовков][КолонкаТз.имя])=НреГ(ЭлементСтрукт.Значение) Тогда
	//			
	//			пТзИзФайла.Колонки[КолонкаТз.имя].Имя=ЭлементСтрукт.Ключ;
	//			СтрокаИменколонок=СтрокаИменколонок+ЭлементСтрукт.Ключ+", ";
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;	
	//	
	//КонецЦикла;	

	
	Кол1=пТзИзФайла.Колонки.Найти("Колонка1");
	Кол2=пТзИзФайла.Колонки.Найти("Колонка5");
	Кол1.имя="Название";
	Кол2.Имя="ID"
	
	//СтрокаИменколонок=Лев(СтрокаИменколонок, СтрДлина(СтрокаИменколонок)-2);
	//
	//пТзИзФайла.Удалить(пТзИзФайла[НомерСтрокиЗаголовков]);
	//
	//пТзИзФайла.свернуть(СтрокаИменколонок);
	
	
	
КонецПроцедуры



Процедура ДобавитьКолонкуНоменклатура_в_ТзФайла(пТзИзФайла, пТзСсылок)

	 пТзИзФайла.Колонки.Добавить("Номенклатура");
	
	 Для каждого СтрокаТЗ Из пТзИзФайла Цикл
		 
		 Если ЗначениеЗаполнено(СтрокаТЗ.Характеристика) Тогда
			 СтрокаТЗ.Номенклатура=СтрокаТЗ.Характеристика.Владелец;
			 Продолжить;
		 КонецЕсли; 
		
		СтрокаТзСсылок=НайтиСтрокуТабЧасти(пТзСсылок, Новый Структура("ЗначениеПоиска", СтрокаТЗ.Наименование));
		
		Если  СтрокаТзСсылок<>Неопределено Тогда
			
			СтрокаТЗ.Номенклатура= СтрокаТзСсылок.Ссылка;
			
			//СнятьПометкуУдаления(СтрокаТЗ.Номенклатура)

		Иначе
			СообщитьСерв("Не найден товар "+СтрокаТЗ.Наименование, ЭтотОбъект)
		КонецЕсли;	
		
	 КонецЦикла;

КонецПроцедуры


Процедура СнятьПометкуУдаления(пНоменклатураСсылка)
	//пНоменклатураСсылка=Справочники.Номенклатура.ПустаяСсылка();
	
	Если пНоменклатураСсылка.ПометкаУдаления Тогда
		ОбъектНоменклатура=пНоменклатураСсылка.получитьобъект();
		ОбъектНоменклатура.ПометкаУдаления=Ложь;
		ОбъектНоменклатура.Записать();
	КонецЕсли;	

КонецПроцедуры


&НаСервере
// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()


&НаСервере
// Ф-ия возращает Тз с колонками:
// Ссылка - спр. ,
// ЗначениеПоиска - строка - значение по которому ищем в спр-ке
// Параметры: 
// пТзЗначенийПолейДляПоиска Тз - с колонками пИмяПоляДляПоиска, список значений по которому ищмем в спр-ке 
// пИмяСправочника - строка - Имя таблицы справочника, в котором ищем  
// пИмяПоляДляПоиска - строка - имя колонки в  пТзЗначенийПолейДляПоиска по которой ищем
// пИмяРеквизита - строк - имя реквизита в справочнике с которым сраниваем значение из колонки ТЗ  пИмяПоляДляПоиска
Функция НайтиСсылкуПоРеквизиту(пТзЗначенийПолейДляПоиска, пИмяСправочника, пИмяПоляДляПоиска , пИмяРеквизита, Отказ)  Экспорт 
	
	
	Запрос=Новый Запрос;

	Отбор=Новый Структура("Ссылка",Null);
	
	
	//  проверка наименований товаров---------------------------------------
	Запрос.Текст="ВЫБРАТЬ
	             |	ВнешнийИсточник."+пИмяПоляДляПоиска+"
	             |ПОМЕСТИТЬ ВнешнийИсточник
	             |ИЗ
	             |	&ВнешнийИсточник КАК ВнешнийИсточник
				 //|ГДЕ
				 //|	ВнешнийИсточник.Наименование <> &ПустаяСтрока
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка,
	             |	ВнешнийИсточник."+пИмяПоляДляПоиска+" как ЗначениеПоиска 
	             |ИЗ
	             |	ВнешнийИсточник КАК ВнешнийИсточник
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник."+пИмяСправочника+" КАК Номенклатура
	             |		ПО (ВнешнийИсточник."+пИмяПоляДляПоиска+" = Номенклатура."+пИмяРеквизита+")
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ВнешнийИсточник";

	
	Запрос.УстановитьПараметр("ВнешнийИсточник",пТзЗначенийПолейДляПоиска);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	Тз=Запрос.Выполнить().Выгрузить();

	  
	Если Тз.Количество()=0 Тогда
		Сообщение="Не найден ни один элемент из справочника "+пИмяСправочника;
		СообщитьСерв(Сообщение, ЭтаФорма);
		Отказ=Истина;
	КонецЕсли;  
	 	  
	  	  
	МассивОшибок=Тз.НайтиСтроки(Отбор);
	
	
	Для Каждого Элемент ИЗ МассивОшибок Цикл
		//Сообщение="Не найдено элемент в справочнике "+пИмяСправочника+" "+Элемент.ЗначениеПоиска;
		//СообщитьСерв(Сообщение, ЭтаФорма);
		Тз.Удалить(Элемент);
		Отказ=Истина;
	КонецЦикла;  
	  

	Возврат Тз;
	
	
КонецФункции // НайтиНоменклатураПоНаименованию()


// Чтение из файла ///////////////////////////////////


&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции


&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

//////////// Обработчки элементов формы  ///////////////////////////////////////


// выбор файла
&НаКлиенте
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)

	

	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр     = "Файл данных xls (*.xls)|*.xls|Файл данных (*.csv)|*.csv";
	ДиалогВыбора.Расширение = "xls";
	
	ДиалогВыбора.Заголовок ="Выберите файл для загрузки данных ";
	
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	//ДиалогВыбора.ПолноеИмяФайла				=	Элемент.Значение;
	
	
	Если ДиалогВыбора.Выбрать() Тогда
		//Элемент = ДиалогВыбора.ПолноеИмяФайла;
		ИмяФайла= ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;			
	


КонецПроцедуры // ВыборФойла()

&НаКлиенте
Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ЗапуститьПриложение(ИмяФайла);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ВыборФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ВыборФайла(Элемент);
КонецПроцедуры
// выбор файла



//////////// Обработчки элементов формы  ///////////////////////////////////////

///Вспомогательные ф-ии/////////////////////////

&НаСервере
Процедура СообщитьСерв(пСтрокаСообщения, пОбъект)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = пСтрокаСообщения;
	//Сообщение.Поле = "";
	//Сообщение.КлючДанных=пОбъект.ссылка;
	Сообщение.УстановитьДанные(пОбъект);
	Сообщение.Сообщить();
	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
  //  //Вставить содержимое обработчика
  //   Сообщение = Новый СообщениеПользователю;
  //Сообщение.Текст = Строка(ВладелецФормы.Объект.Дата);
  ////Сообщение.Поле = "";
  //Сообщение.УстановитьДанные(ЭтаФорма);
  //Сообщение.Сообщить();
  //Документ=ВладелецФормы.Объект;
КонецПроцедуры


///Вспомогательные ф-ии/////////////////////////



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ОбъектыНазначения") тогда
		Документ = Параметры.ОбъектыНазначения[0];
		
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = Строка(Документ);
		////Сообщение.Поле = "";
		//Сообщение.УстановитьДанные(ЭтаФорма);
		//Сообщение.Сообщить();

	КонецЕсли;
КонецПроцедуры


мфСтруктураЗагружаемыхКолонок=Новый Структура("Название, ID",
											  "Название", "ID");