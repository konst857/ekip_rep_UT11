



Перем ВременныйКаталог;
Перем ФайлЭкзель;
Перем Лист Экспорт;
Перем СписокСтрок;

Функция ОткрытьФайл(ПутьКФайлу) Экспорт
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлЭкзель = ПутьКФайлу;
	ВременныйКаталог = КаталогВременныхФайлов() + "\Excel2007";
	УдалитьФайлы(ВременныйКаталог);
	
	РаспаковатьФайл(ФайлЭкзель, ВременныйКаталог);
	
	ФайлСтрок = ВременныйКаталог + "\xl\sharedStrings.xml";
	СписокСтрок = ПрочитатьСписокСтрок(ФайлСтрок);
	
	Возврат Истина;
КонецФункции

Процедура РаспаковатьФайл(Файл, Каталог)
	Зип = Новый ЧтениеZipФайла;
	Зип.Открыть(Файл);
	Зип.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать);
КонецПроцедуры

Функция ПрочитатьСписокСтрок(ФайлСтрок)
	Строки = Новый СписокЗначений;
	
	хмл = Новый ЧтениеXML;
	хмл.ОткрытьФайл(ФайлСтрок);
	
	Пока хмл.Прочитать() Цикл
		Если хмл.ТипУзла = ТипУзлаXML.Текст Тогда
			Строки.Добавить(хмл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	хмл.Закрыть();
	
	Возврат Строки;
КонецФункции

Функция ОткрытьЛист(НомерЛиста) Экспорт
	
	
	
	ФайлЛиста = ВременныйКаталог + "\xl\worksheets\sheet" + НомерЛиста + ".xml";
	Файл = Новый Файл(ФайлЛиста);
	Если НЕ Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивБукв = ПолучитьМассивБукв();
	ДеревоДанных = ПолучитьДеревоДанных(ФайлЛиста);
	//ДеревоДанных.ВыбратьСтроку();
	
	Лист = Новый ТаблицаЗначений;
	
	//создаем колонки
	Колонки = ДеревоДанных.Строки.Найти("dimension", "Объект", Истина);
	Счетчик = 0;    
	Для Каждого Стр Из Колонки.Строки Цикл
		Если Стр.Объект = "ref" Тогда
			Диапозон = Стр.Значение; 
			//поиск максимального значения колонки
			Счетчик=МассивБукв.Количество();
			Пока Счетчик>0 Цикл 
				Счетчик = Счетчик - 1;
				Если Найти(Диапозон, МассивБукв[Счетчик])>0 Тогда
					Для Индекс=0 По Счетчик Цикл                    
						Лист.Колонки.Добавить(МассивБукв[Индекс],  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(700)));
					КонецЦикла;    
					Счетчик = 0;
				КонецЕсли;    
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//читаем строки
	СтрСтрок = ДеревоДанных.Строки.Найти("sheetData", "Объект", Истина);
	Для Каждого Строка Из СтрСтрок.Строки Цикл
		НоваяСтрока = Лист.Добавить();
		
		ИндексСтроки = -1;
		Для Каждого Колонка Из Строка.Строки Цикл
			Если Колонка.Объект <> "c" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЯчейки = Неопределено;
			ИндексСтроки = ИндексСтроки + 1;
			
			СтрЗначение = Колонка.Строки.Найти("v", "Объект");
			Если СтрЗначение <> Неопределено Тогда
				ЗначениеЯчейки = СтрЗначение.Значение;
			КонецЕсли;
			
			СтрЗначение = Колонка.Строки.Найти("t", "Объект");
			Если СтрЗначение <> Неопределено И СтрЗначение.Значение = "s" И ЗначениеЯчейки <> Неопределено Тогда
				ЗначениеЯчейки = СписокСтрок.Получить(Число(ЗначениеЯчейки)).Значение;
			КонецЕсли;
			
			НоваяСтрока[МассивБукв[ИндексСтроки]] = ЗначениеЯчейки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция Записать(ПутьКФайлу) Экспорт
	ФайлЭкзель = ПутьКФайлу;
	ВременныйКаталог = КаталогВременныхФайлов() + "Excel2007";
	УдалитьФайлы(ВременныйКаталог);
	
	ФайлШаблон = КаталогВременныхФайлов() + "\Template.xlsx";
	ПолучитьМакет("Шаблон").Записать(ФайлШаблон);
	РаспаковатьФайл(ФайлШаблон, ВременныйКаталог);
	
	СписокСтрок = СоздатьСписокСтрок();
	ФайлСтрок = ВременныйКаталог + "\xl\sharedStrings.xml";
	ЗаписатьСписокСтрок(ФайлСтрок, СписокСтрок);
	
	ЗаписатьЛист(1);
	
	ЗапаковатьФайл(ФайлЭкзель);
	
	Возврат Истина;
КонецФункции

Процедура ЗапаковатьФайл(ФайлЭкзель)
	Зип = Новый ЗаписьZipФайла(ФайлЭкзель);
	Зип.Добавить(ВременныйКаталог + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Зип.Записать();
КонецПроцедуры

Функция СоздатьСписокСтрок()
	Строки = Новый СписокЗначений;
	
	Для Каждого Стр Из Лист Цикл
		Для Каждого Кол Из Лист.Колонки Цикл
			Ячейка = Строка(Стр[Кол.Имя]);
			Если СокрЛП(Ячейка) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			//в список строк должны попасть только строковые значения ячеек
			Попытка
				А = Число(Ячейка);
				ЭтоЧисло = Истина;
			Исключение
				ЭтоЧисло = Ложь;
			КонецПопытки;
			
			Если ЭтоЧисло Тогда
				Продолжить;
			КонецЕсли;
						
			Если Строки.НайтиПоЗначению(Ячейка) = Неопределено Тогда
				Строки.Добавить(Ячейка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Строки;
КонецФункции

Процедура ЗаписатьСписокСтрок(ФайлСтрок, Строки)
	хмл = Новый ЗаписьXML;
	хмл.ОткрытьФайл(ФайлСтрок);
	хмл.ЗаписатьОбъявлениеXML();
	
	хмл.ЗаписатьНачалоЭлемента("sst");
	хмл.ЗаписатьАтрибут("xmlns", "http://schemas.openxmlformats.org/spreadsheetml/2006/main");
	хмл.ЗаписатьАтрибут("count", Строка(Строки.Количество()));
	хмл.ЗаписатьАтрибут("uniqueCount", Строка(Строки.Количество()));
	
	Для Каждого Стр Из Строки Цикл
		хмл.ЗаписатьНачалоЭлемента("si");
		хмл.ЗаписатьНачалоЭлемента("t");
		хмл.ЗаписатьТекст(Стр.Значение);
		хмл.ЗаписатьКонецЭлемента();
		хмл.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	хмл.ЗаписатьКонецЭлемента();
	хмл.Закрыть();
КонецПроцедуры

Процедура ЗаписатьЛист(НомерЛиста)
	ФайлЛиста = ВременныйКаталог + "\xl\worksheets\sheet" + НомерЛиста + ".xml";
	хмл = Новый ЗаписьXML;
	хмл.ОткрытьФайл(ФайлЛиста);
	хмл.ЗаписатьОбъявлениеXML();
	
	хмл.ЗаписатьНачалоЭлемента("worksheet");
	хмл.ЗаписатьАтрибут("xmlns", "http://schemas.openxmlformats.org/spreadsheetml/2006/main");
	хмл.ЗаписатьАтрибут("xmlns:r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");

	хмл.ЗаписатьНачалоЭлемента("dimension");
	Область = ПолучитьОбласть(Лист.Количество() - 1, Лист.Колонки.Количество() - 1);
	хмл.ЗаписатьАтрибут("ref", "A1:" + Область);
	хмл.ЗаписатьКонецЭлемента();
	
	хмл.ЗаписатьНачалоЭлемента("sheetViews");
	хмл.ЗаписатьНачалоЭлемента("sheetView");
	хмл.ЗаписатьАтрибут("tabSelected", "1");
	хмл.ЗаписатьАтрибут("workbookViewId", "0");
	хмл.ЗаписатьКонецЭлемента();
	хмл.ЗаписатьКонецЭлемента();
	
	хмл.ЗаписатьНачалоЭлемента("sheetFormatPr");
	хмл.ЗаписатьАтрибут("defaultRowHeight", "15");
	хмл.ЗаписатьКонецЭлемента();

	хмл.ЗаписатьНачалоЭлемента("sheetData");
	ЗаписатьДанныеЛиста(хмл);
	хмл.ЗаписатьКонецЭлемента();
	
	хмл.ЗаписатьНачалоЭлемента("pageMargins");
	хмл.ЗаписатьАтрибут("left", "0.7");
	хмл.ЗаписатьАтрибут("right", "0.7");
	хмл.ЗаписатьАтрибут("top", "0.75");
	хмл.ЗаписатьАтрибут("bottom", "0.75");
	хмл.ЗаписатьАтрибут("header", "0.3");
	хмл.ЗаписатьАтрибут("footer", "0.3");
	
	хмл.ЗаписатьКонецЭлемента();
	
	хмл.ЗаписатьКонецЭлемента();
	хмл.Закрыть();
КонецПроцедуры

Функция ПолучитьОбласть(Строка, Колонка)
	Возврат ПолучитьИмяКолонки(Колонка) + ПолучитьИмяСтроки(Строка);
КонецФункции

Функция ПолучитьИмяКолонки(Колонка)
	НачСимвол = 65;
	Стр = Символ(НачСимвол + Колонка);
	Возврат Стр;
КонецФункции

Функция ПолучитьИмяСтроки(а)
	Возврат Формат(а + 1,"ЧГ="); 
КонецФункции

Процедура ЗаписатьДанныеЛиста(хмл)
	ЧислоСтрок = Лист.Количество();
	ЧислоКолонок = Лист.Колонки.Количество();
	
	Для иСтр = 0 По ЧислоСтрок - 1 Цикл
		хмл.ЗаписатьНачалоЭлемента("row");
		хмл.ЗаписатьАтрибут("r", ПолучитьИмяСтроки(иСтр));
		хмл.ЗаписатьАтрибут("spans", "1:" + ЧислоСтрок);
		
		Для иКол = 0 По ЧислоКолонок - 1 Цикл
			хмл.ЗаписатьНачалоЭлемента("c");
			хмл.ЗаписатьАтрибут("r", ПолучитьОбласть(иСтр, иКол));
			
			ЗначЯчейки = Лист.Получить(иСтр).Получить(иКол);
			Попытка
				А = Число(ЗначЯчейки);
				ЭтоЧисло = Истина;
			Исключение
				ЭтоЧисло = Ложь;
			КонецПопытки;
			
			Т = ТипЗнч(ЗначЯчейки);
			Если НЕ ЭтоЧисло И ТипЗнч(ЗначЯчейки) = Тип("Строка") Тогда
				хмл.ЗаписатьАтрибут("t", "s");
				Элем = СписокСтрок.НайтиПоЗначению(ЗначЯчейки);
				ЗначЯчейки = СписокСтрок.Индекс(Элем);
			КонецЕсли;
			
			хмл.ЗаписатьНачалоЭлемента("v");
			хмл.ЗаписатьТекст(Строка(ЗначЯчейки));
			хмл.ЗаписатьКонецЭлемента();
			
			хмл.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		хмл.ЗаписатьКонецЭлемента();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДеревоДанных(Файл)
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Объект");
	ДеревоДанных.Колонки.Добавить("Значение");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Файл);
	
	ТекЭлемент = Неопределено;
	ТекБаза = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			РежимЗагрузки = ЧтениеXML.Имя;
			
			Если ТекЭлемент = Неопределено Тогда
				ТекЭлемент = ДеревоДанных.Строки.Добавить();
				ТекЭлемент.Объект = РежимЗагрузки;
			Иначе
				ТекЭлемент = ТекЭлемент.Строки.Добавить();
				ТекЭлемент.Объект = РежимЗагрузки;					
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ТекЭлемент = Неопределено Тогда
				ТекЭлемент = Неопределено;
			Иначе
				ТекЭлемент = ТекЭлемент.Родитель;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ТекЭлемент.Значение = ЧтениеXML.Значение;
		КонецЕсли;
		
		Для сч = 0 По ЧтениеXML.КоличествоАтрибутов() - 1 Цикл
			Стр = ТекЭлемент.Строки.Добавить();
			Стр.Объект = ЧтениеXML.ИмяАтрибута(сч);
			Стр.Значение = ЧтениеXML.ЗначениеАтрибута(сч);
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ДеревоДанных;
КонецФункции

Функция ПолучитьМассивБукв()
	МассивБукв = Новый Массив;
	МассивБукв.Добавить("A");
	МассивБукв.Добавить("B");
	МассивБукв.Добавить("C");
	МассивБукв.Добавить("D");
	МассивБукв.Добавить("E");
	МассивБукв.Добавить("F");
	МассивБукв.Добавить("G");
	МассивБукв.Добавить("H");
	МассивБукв.Добавить("I");
	МассивБукв.Добавить("J");
	МассивБукв.Добавить("K");
	МассивБукв.Добавить("L");
	МассивБукв.Добавить("M");
	МассивБукв.Добавить("N");
	МассивБукв.Добавить("O");
	МассивБукв.Добавить("P");
	МассивБукв.Добавить("Q");
	МассивБукв.Добавить("R");
	МассивБукв.Добавить("S");
	МассивБукв.Добавить("T");
	МассивБукв.Добавить("U");
	МассивБукв.Добавить("V");
	МассивБукв.Добавить("W");
	МассивБукв.Добавить("X");
	МассивБукв.Добавить("Y");
	МассивБукв.Добавить("Z");
	
	Возврат МассивБукв;
КонецФункции







  Функция СведенияОВнешнейОбработке() Экспорт
	  
	  РегистрационныеДанные = Новый Структура;
         РегистрационныеДанные.Вставить("Наименование", "Создание номенклатуры из таблицы");
         РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
         РегистрационныеДанные.Вставить("Версия", "1.0");
         
         //ДополнительнаяОбработка
         //ДополнительныйОтчет
         //ЗаполнениеОбъекта
         //Отчет
         //ПечатнаяФорма
         //СозданиеСвязанныхОбъектов
         РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
         
         РегистрационныеДанные.Вставить("Информация", " Обработка позволяется создавать номенклатуру из Excel");
         
         ///////////// команды /////////////////////////
         тзКоманд = Новый ТаблицаЗначений;
         тзКоманд.Колонки.Добавить("Идентификатор");
         тзКоманд.Колонки.Добавить("Представление");
         тзКоманд.Колонки.Добавить("Модификатор");
         тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
         тзКоманд.Колонки.Добавить("Использование");
         
         строкаКоманды = тзКоманд.Добавить();
         строкаКоманды.Идентификатор = "1";
         строкаКоманды.Представление = "Создание номенклатуры из Excel (ОткрытиеФормы)";
         строкаКоманды.ПоказыватьОповещение = Истина;
         строкаКоманды.Использование = "ОткрытиеФормы";
         
		 //строкаКоманды = тзКоманд.Добавить();
		 //строкаКоманды.Идентификатор = "2";
		 //строкаКоманды.Представление = "команда ""Hello Word"" (ВызовКлиентскогоМетода)";
		 //строкаКоманды.ПоказыватьОповещение = Истина;
		 //строкаКоманды.Использование = "ВызовКлиентскогоМетода";
		 //
		 //строкаКоманды = тзКоманд.Добавить();
		 //строкаКоманды.Идентификатор = "3";
		 //строкаКоманды.Представление = "команда ""Hello Word"" (ВызовСерверногоМетода)";
		 //строкаКоманды.ПоказыватьОповещение = Истина;
		 //строкаКоманды.Использование = "ВызовСерверногоМетода";
         
         РегистрационныеДанные.Вставить("Команды", тзКоманд);
         
         ////////////// назначение (в каких объектах используется) /////////////////////////
         //для печ.форм, заполнения, ввода свазанных объектов
		 //МассивНазначений = Новый Массив;
		 //МассивНазначений.Добавить("Документ.*"); // все документы назначаются
		 ////МассивНазначений.Добавить("Документ.АвансовыйОтчет");
		 ////МассивНазначений.Добавить("Документ.ЗаказПокупателя");
		 //РегистрационныеДанные.Вставить("Назначение", МассивНазначений);
         
         Возврат РегистрационныеДанные;
         
     КонецФункции