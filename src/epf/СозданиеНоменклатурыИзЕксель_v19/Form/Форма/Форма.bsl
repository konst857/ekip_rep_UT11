Перем мфСтруктСоответствияПолейФайла_РеквизитовНоменклатуры;
Перем мфСоотвНаименованийПолйФайла_СвойствПВХ;
Перем мфСтруктОбязательныхКолонок;

//Перем ТзСвойсвтв Экспорт; 
Перем мфТзЦветов Экспорт;
Перем мфТзЦветовПроизводителя Экспорт;

Перем мфТзРазмеров Экспорт;
Перем мфТзРазмеровRUS Экспорт;

Перем мфСтруктИменКолонокДляСозданияХарактеристики Экспорт; 
Перем мфСтрукКонстант Экспорт; 
Перем мфСоотвКолонокЗапрещеноДобавлениеЗначение Экспорт;

// загрузка ///////////////////////////////////////////

&НаКлиенте
Процедура Загрузить(Команда)
	
	ТабДок =Новый ТабличныйДокумент;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Начало "+ТекущаяДата();
	Сообщение.Сообщить();
	
	
	СтруктДопПараметров=Новый Структура("Родитель, Производитель,  ЕдиницаИзмерения, ТабДок, ПапкаПервогоУровня, ВидЦены, ВидЦеныПоставщика", ГруппаДляНовыхТоваров,
	Производитель,  ЕдиницаИзмерения, ТабДок, КорневойРодитель, ВидЦены, ВидЦеныПоставщика);
	
	ЗагрузитьСервВызов(Неопределено,СтруктДопПараметров, ТабДок);
	
	Если ВладелецФормы<>Неопределено Тогда
		ВладелецФормы.прочитать();
	КонецЕсли;
	
	ТабДок.Защита=Истина;
	ТабДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыКартинок(пИмяКаталога, пМассивФайловОписаний)
	
	
	МассивФайловКартинок=НайтиФайлы(пИмяКаталога, "*.jpg");
	
	Для каждого Файл  Из МассивФайловКартинок  Цикл      // добавим файлы картинок
		
		пМассивФайловОписаний.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя));
		
	КонецЦикла;
	
КонецПроцедуры





&НаСервере
Процедура ЗагрузитьСервВызов(ПомещенныеФайлы, ДополнительныеПараметры, ТабДок)
	
	
	ОбъектОбработки=РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработки.ПолучитьМакет("МакетОшибок");
	ДополнительныеПараметры.Вставить("Макет", Макет);	
	
	ВывестиШапкуМакетаОшибок(ТабДок, Макет);
	
	ВремФайл=Новый Файл(ИмяФайла);
	
	
	ДобавитьСвойства_в_Параметры(ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ТабДок", ТабДок);
	ДополнительныеПараметры.Вставить("ВариантПриемкиТоваров",  Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным);

	ТзИзФайлаЕксель=ЗагрузитьНаСервере(ДополнительныеПараметры);    // загрузим файл xlsx c товарами
	
	ТабДок=ДополнительныеПараметры.ТабДок;
	
	Если ЗначениеЗаполнено(КаталогЛога) Тогда
		ТабДок.записать(КаталогЛога+"\Log_1c.xlsx", ТипФайлаТабличногоДокумента.XLSX);
		СообщитьСерв("Записан файл "+КаталогЛога+"\Log_1c.xlsx", ЭтаФорма);
	КонецЕсли;
	
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Конец "+ТекущаяДата();
	Сообщение.Сообщить();
	
	
КонецПроцедуры


Процедура ПроверкаЗаполненияЗначений(пТзИзФайла , Отказ=Ложь)
	
	//НаименованиеСвойстваАртикул=мфСтрукКонстант.НаименованиеСвойстваАртикул;
	//НаименованиеСвойстваЦвет=мфСтрукКонстант.НаименованиеСвойстваЦвет;
	//НаименованиеСвойстваРазмер=мфСтрукКонстант. НаименованиеСвойстваРазмер;
	//НаименованиеСвойстваЦветПроизводителя=мфСтрукКонстант.НаименованиеСвойстваЦветПроизводителя;
	
	НаименованиеСвойстваАртикул=мфСтрукКонстант.НаименованиеСвойстваАртикул;
	НаименованиеСвойстваЦвет=мфСтрукКонстант.НаименованиеСвойстваЦвет;
	НаименованиеСвойстваРазмер=мфСтрукКонстант. НаименованиеСвойстваРазмер;
	НаименованиеСвойстваЦветПроизводителя=мфСтрукКонстант.НаименованиеСвойстваЦветПроизводителя;
    НаименованиеСвойстваРазмерRUS=	мфСтрукКонстант.НаименованиеСвойстваРазмерRUS;
	
	ДополнительноеУсловиеЗАпроса=" ГДЕ Номенклатура.ПометкаУдаления = Ложь ";
	
	
	ИменоватьКолонкиТз(пТзИзФайла);
	
	Если ЗаписыватьЦены Тогда
		мфСтруктОбязательныхКолонок.Вставить("Цена_Розничная", Ложь);
		мфСтруктОбязательныхКолонок.Вставить("Цена_Закупки", Ложь);
	КонецЕсли;	
	
	Отказ=ПроверкаСтруктурыКолонокТЗ(пТзИзФайла, мфСтруктОбязательныхКолонок, Истина);
	
	ПроверкаНаличияПустыхЗначений(Отказ, пТзИзФайла);
	
	
	ТзСсылокПроизводители=НайтиСсылкуПоРеквизиту(пТзИзФайла, "Производители", "Производитель", "Наименование", Отказ,,Истина);
	
	ДобавитьКолонку_в_ТзФайла(пТзИзФайла,ТзСсылокПроизводители, "Производитель", "ПроизводительСсылка"); 
	
	ДобавитьКолонку_в_ТзФайла(пТзИзФайла,НайтиСсылкуПоРеквизиту(пТзИзФайла, "ВидыНоменклатуры", "Подгруппа2", "Наименование", Отказ, ДополнительноеУсловиеЗАпроса,Истина),"Подгруппа2" , "ВидНоменклатуры");
	
	ТзСвойствХарактеристик=мфСтрукКонстант.ТзСвойствХарактеристик;
	
	Если  ПоискНоменклатуры="Артикул" Тогда
		ПроверкаНаличияДублейТз(пТзИзФайла, "АртикулSKU",, Отказ);
	КонецЕсли;

	
	Если ЦветЯвляетсяХарактеристикой Тогда
		мфТзЦветов=ЗаполнитьТзЗначенийСвойств(ПолучитьСвВо(НаименованиеСвойстваЦвет, ТзСвойствХарактеристик, Отказ));
		мфТзЦветовПроизводителя=ЗаполнитьТзЗначенийСвойств(ПолучитьСвВо(НаименованиеСвойстваЦветПроизводителя, ТзСвойствХарактеристик, Отказ));
	КонецЕсли;	
	
	мфТзРазмеров=ЗаполнитьТзЗначенийСвойств(ПолучитьСвВо(НаименованиеСвойстваРазмер, ТзСвойствХарактеристик, Отказ));
	мфТзРазмеровRUS=ЗаполнитьТзЗначенийСвойств(ПолучитьСвВо(НаименованиеСвойстваРазмерRUS, ТзСвойствХарактеристик, Отказ));

	
	СвойствоАртикул=ПолучитьСвВо(НаименованиеСвойстваАртикул, ТзСвойствХарактеристик, Отказ);
	
КонецПроцедуры

Процедура ПроверкаНаличияПустыхЗначений(Отказ,  пТзИзФайла)
	
	
	НомерСтроки=0;
	Для Каждого СтрокаТз из пТзИзФайла Цикл
		
		НомерСтроки=НомерСтроки+1;
		
		Для Каждого ЭлСтркутуры из мфСтруктОбязательныхКолонок Цикл
			
			// Если [ЭлСтркутуры.Значение]=Истина, значит поле обязательно для заполнения
			Если ЭлСтркутуры.Значение=Истина и Не ЗначениеЗаполнено(СтрокаТз[ЭлСтркутуры.Ключ]) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполены данные в  колонке "+Строка(ЭлСтркутуры.Ключ)+", в строке "+строка(НомерСтроки);
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Отказ=Истина;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры


функция ПроверкаСтруктурыКолонокТЗ(ТЗ,СписокПолей, ПоКлючам=Ложь)  Экспорт
	Отказ=Ложь;
	
	Если (СписокПолей.количество()=0)И(Тз.Колонки.Количество()<>0) Тогда
		Возврат Истина;  // error
	КонецЕсли;
	
	
	
	Если НЕ ПоКлючам Тогда      // названия полей хранятся в значениях структура
		Для каждого ЭлементСтр Из СписокПолей Цикл
			Если Тз.колонки.Найти(ЭлементСтр.Значение)=Неопределено Тогда	
				СтрСообщение="В файл отсутствует колонка "+СокрЛП(ЭлементСтр.Значение);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрСообщение;
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Отказ= Истина; // error    
			КонецЕсли;
		КонецЦикла;	 
	Иначе                 // названия полей хранятся в ключах структура
		Для каждого ЭлементСтр Из СписокПолей Цикл
			Если Тз.колонки.Найти(ЭлементСтр.Ключ)=Неопределено Тогда	
				СтрСообщение="В файл отсутствует колонка "+СокрЛП(ЭлементСтр.Ключ);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрСообщение;
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				
				Отказ= Истина; // error    
			КонецЕсли;
		КонецЦикла;	 
	КонецЕсли;
	
	
	Возврат Отказ;
КонецФункции


Функция ЗаполнитьТзЗначенийСвойств(пВладелец)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование КАК ЗначениеПоиска
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И ЗначенияСвойствОбъектов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", пВладелец);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
	
	
КонецФункции


Функция СформироватьНаименование(пСтрокаТзИзФайла, пОбъектСпр, пДзИзФайла, пФормироватьПоШаблону=Истина)
	
	Если ЗначениеЗаполнено(пОбъектСпр.Наименование) и не ПерезаписыватьНаименование Тогда
		Возврат пОбъектСпр.Наименование;
	КонецЕсли;	
	
	Наименование=СформироватьНаименованиеПоШаблону(пОбъектСпр, пСтрокаТзИзФайла.Артикулобщий);
	
	Если ЗначениеЗаполнено(Наименование) и пФормироватьПоШаблону Тогда
		Возврат Наименование;
	КонецЕсли;	
	
	Бренд=?(пДзИзФайла.Колонки.найти("Бренд")<>Неопределено, пСтрокаТзИзФайла.Бренд, пСтрокаТзИзФайла.Производитель);
	
	
	
	Разделитель=", ";
	Возраст=?(ЗначениеЗаполнено(пСтрокаТзИзФайла.Возраст) и Нрег(пСтрокаТзИзФайла.Возраст)<>"взрослый",Разделитель+пСтрокаТзИзФайла.Возраст+Разделитель,"");
	Пол=?(ЗначениеЗаполнено(пСтрокаТзИзФайла.Пол) и пСтрокаТзИзФайла.Пол<>"м",Лев(СокрЛП(пСтрокаТзИзФайла.Пол),1)+Разделитель,"");
	Цвет=?(ЦветЯвляетсяХарактеристикой,"",Разделитель+пСтрокаТзИзФайла.ЦветПроизводителя+Разделитель);
	
	
	Наименование=пСтрокаТзИзФайла.АртикулОбщий+Разделитель+пСтрокаТзИзФайла.Подгруппа3+Разделитель+Пол+
	Бренд+Разделитель+пСтрокаТзИзФайла.Модель+Возраст+пСтрокаТзИзФайла.Сезон;
	
	Возврат Наименование;
	
КонецФункции // СформироватьНаименование()


Функция СформироватьНаименованиеХарактеристики(пСтрокаТзИзФайла, пОбъектСпр)
	
	Если ЗначениеЗаполнено(пОбъектСпр.Наименование) и не ПерезаписыватьНаименование Тогда
		Возврат пОбъектСпр.Наименование;
	КонецЕсли;	
	
	Наименование=СформироватьНаименованиеПоШаблонуХарактеристикии(пОбъектСпр);
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Возврат Наименование;
	КонецЕсли;	
	
	
	
	Цвет=?(ЦветЯвляетсяХарактеристикой,", "+пСтрокаТзИзФайла.ЦветПроизводителя,"");
	
	Разделитель=", ";
	
	
	НаименованиеХарактеристики=пСтрокаТзИзФайла.Размер+Цвет;
	
	Возврат НаименованиеХарактеристики;
	
КонецФункции // СформироватьНаименование()


Функция СформироватьНаименованиеПоШаблону(пОбъектСпр, пАртикул)
	
	СтароеНаименование=пОбъектСпр.Наименование;
	
	Попытка
	
		ВидНоменклатуры=пОбъектСпр.ВидНоменклатуры;

	
	Исключение
		
		ВызватьИсключение Строка(пОбъектСпр)+" "+Строка(ТипЗнч(пОбъектСпр))+строка(СтароеНаименование)+" "+Строка(пАртикул);
		
	КонецПопытки;
	
	Наименование="";
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ШаблонРабочегоНаименованияНоменклатуры");
	СтруктураРеквизитов.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры");
	СтруктураРеквизитов.Вставить("ШаблонНаименованияДляПечатиНоменклатуры");
	СтруктураРеквизитов.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры");
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры, СтруктураРеквизитов);
	
	
	Если  ЗначениеЗаполнено(РеквизитыОбъекта.ШаблонРабочегоНаименованияНоменклатуры) 
		И (РеквизитыОбъекта.ЗапретРедактированияРабочегоНаименованияНоменклатуры ) Тогда
		
		Если Не ПерезаписыватьНаименование и ЗначениеЗаполнено(СтароеНаименование) Тогда
			Возврат Наименование;
		КонецЕсли;	
		
		ШаблонНаименования = РеквизитыОбъекта.ШаблонРабочегоНаименованияНоменклатуры;
		Наименование = НоменклатураСервер.НаименованиеПоШаблону(ШаблонНаименования, пОбъектСпр);
		
	КонецЕсли;
	
	
	Возврат Наименование;
	
	
КонецФункции // СформироватьНаименованиеПоШаблону()



Функция СформироватьНаименованиеПоШаблонуХарактеристикии(пОбъктСпр)
	
	СтароеНаименование=пОбъктСпр.Наименование;
	Наименование="";
	Владелец=пОбъктСпр.Владелец;
	ФормироватьРабочееНаименование=Истина;
	
	СтруктураРеквизитов = Новый Структура;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		СтруктураРеквизитов.Вставить("ШаблонРабочегоНаименованияХарактеристики");
		СтруктураРеквизитов.Вставить("ЗапретРедактированияРабочегоНаименованияХарактеристики");
		СтруктураРеквизитов.Вставить("ШаблонНаименованияДляПечатиХарактеристики");
		СтруктураРеквизитов.Вставить("ЗапретРедактированияНаименованияДляПечатиХарактеристики");
	Иначе 
		СтруктураРеквизитов.Вставить("ШаблонРабочегоНаименованияХарактеристики","ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики");
		СтруктураРеквизитов.Вставить("ЗапретРедактированияРабочегоНаименованияХарактеристики","ВидНоменклатуры.ЗапретРедактированияРабочегоНаименованияХарактеристики");
		СтруктураРеквизитов.Вставить("ШаблонНаименованияДляПечатиХарактеристики","ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики");
		СтруктураРеквизитов.Вставить("ЗапретРедактированияНаименованияДляПечатиХарактеристики","ВидНоменклатуры.ЗапретРедактированияНаименованияДляПечатиХарактеристики");
	КонецЕсли;
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, СтруктураРеквизитов);
	
	Если ФормироватьРабочееНаименование 
		И ЗначениеЗаполнено(РеквизитыОбъекта.ШаблонРабочегоНаименованияХарактеристики) 
		И (РеквизитыОбъекта.ЗапретРедактированияРабочегоНаименованияХарактеристики ) Тогда
		
		Если Не ПерезаписыватьНаименование и ЗначениеЗаполнено(СтароеНаименование) Тогда
			Возврат Наименование;
		КонецЕсли;	
		
		ШаблонНаименования = РеквизитыОбъекта.ШаблонРабочегоНаименованияХарактеристики;
		Наименование = НоменклатураСервер.НаименованиеПоШаблону(ШаблонНаименования, пОбъктСпр);
	КонецЕсли;
	
	Возврат Наименование;	
	
	
КонецФункции // СформироватьНаименованиеПоШаблонуХарактеристикии()


функция ПолучитьТзСвойств(пНаборСвойств)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств";
	
	Запрос.УстановитьПараметр("НаборСвойств", пНаборСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабСвойсвтв=РезультатЗапроса.Выгрузить();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат ТабСвойсвтв;
	
КонецФункции // ()

// Получим все возможные свойства характеристик для каждого вида 
// номенклатуры
// Возращат Тз, с колонками ссылка - св-во, видНоменкалтуры, Наименование -наим. св-ва.
Функция ПолучитьТзСвойствХарактеристик()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВрТабДопРеквизиты_Общие
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство) КАК Наименование,
	|	ВидыНоменклатуры.Ссылка КАК ВидыНоменклатуры
	|ПОМЕСТИТЬ ВрТабДопРеквизиты_Индивидуальные
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|		ПО ВидыНоменклатуры.НаборСвойствХарактеристик = НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТабДопРеквизиты_Общие.Ссылка КАК Ссылка,
	|	ВрТабДопРеквизиты_Общие.Наименование КАК Наименование,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
	|ИЗ
	|	ВрТабДопРеквизиты_Общие КАК ВрТабДопРеквизиты_Общие,
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВрТабДопРеквизиты_Индивидуальные.Ссылка,
	|	ВрТабДопРеквизиты_Индивидуальные.Наименование,
	|	ВрТабДопРеквизиты_Индивидуальные.ВидыНоменклатуры
	|ИЗ
	|	ВрТабДопРеквизиты_Индивидуальные КАК ВрТабДопРеквизиты_Индивидуальные
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Тз= Запрос.Выполнить().Выгрузить();
	
	//Для Каждого СтрокаТз из Тз Цикл
	//	
	//	СтрокаТз.Наименование=ПолучитьСимолыСлеваДоСимвола(СтрокаТз.Наименование, "(");
	//	
	//КонецЦикла;	
	
	Возврат Тз;
	
	
	
	
КонецФункции // ПолучитьТзСвойствХарактеристик()


// Получим все возможные свойства характеристик для каждого вида 
// номенклатуры
// Возращат Тз, с колонками ссылка - св-во, видНоменкалтуры, Наименование -наим. св-ва.
Функция ПолучитьТзСвойствНоменклатуры()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство) КАК Наименование,
	|	ВидыНоменклатуры.Ссылка КАК ВидыНоменклатуры
	|ПОМЕСТИТЬ ВрТаб_ИндивидДопРеквизиты
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|		ПО ВидыНоменклатуры.НаборСвойств = НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДополнительныеСведения.Ссылка КАК Ссылка,
	|	ОбщиеДополнительныеСведения.Наименование КАК Наименование,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ОбщиеДополнительныеСведения,
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ОбщиеДополнительныеСведения.Ссылка В
	|			(ВЫБРАТЬ
	|				НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))
	|	И НЕ ОбщиеДополнительныеСведения.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВрТаб_ИндивидДопРеквизиты.Ссылка КАК Ссылка
	|				ИЗ
	|					ВрТаб_ИндивидДопРеквизиты КАК ВрТаб_ИндивидДопРеквизиты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВрТаб_ИндивидДопРеквизиты.Ссылка,
	|	ВрТаб_ИндивидДопРеквизиты.Наименование,
	|	ВрТаб_ИндивидДопРеквизиты.ВидыНоменклатуры
	|ИЗ
	|	ВрТаб_ИндивидДопРеквизиты КАК ВрТаб_ИндивидДопРеквизиты";
	
	Тз= Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТз из Тз Цикл
		
		СтрокаТз.Наименование=ПолучитьСимолыСлеваДоСимвола(СтрокаТз.Наименование, "(");
		
	КонецЦикла;	
	
	Возврат Тз;
	
	
КонецФункции // ПолучитьТзСвойствХарактеристик()

Функция ПолучитьСимолыСлеваДоСимвола(пИсходнаяСтрока, пСимвол)
	
	ПозицияСимвола=СтрНайти(пИсходнаяСтрока, пСимвол);
	
	Если ПозицияСимвола=0 Тогда
		Возврат пИсходнаяСтрока;
	КонецЕсли;	
	
	Возврат СокрЛП(Лев(пИсходнаяСтрока, ПозицияСимвола-1));
	
	
КонецФункции // ПолучитьСимолыСлеваДоСимвола()


&НаСервере
Процедура ДобавитьСвойства_в_Параметры(ДополнительныеПараметры)
	
	//ДополнительныеПараметры.Вставить("Производитель",Справочники.Производители.НайтиПоНаименованию("Husqvarna"));
	ДополнительныеПараметры.Вставить("СвВоРазмер_Одежда", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Размер"));
	
КонецПроцедуры

&НаСервере
процедура ИмяФайлаНаСервере(АдресФайла, НовоеИмяФайлаНаСервере)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(НовоеИмяФайлаНаСервере);
	
конецПроцедуры // ИмяФайлаНаСервере()

&НаКлиенте
процедура ИмяФайлаНаКлиент(АдресФайла, НовоеИмяФайлаНаСервере)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(НовоеИмяФайлаНаСервере);
	
конецПроцедуры // ИмяФайлаНаСервере()



&НаСервере
Функция ПрочитатьБыстроЛистExcel(ТЗ = Неопределено, ЛистЭксель = Неопределено, НомерПервойСтроки = 1, НомерПервойКолонки = 1, ВсегоСтрок = 0, ВсегоКолонок = 0, СчитываемыйОбъект="Value") Экспорт
	
	Если ЛистЭксель = Неопределено Тогда
		ЛистЭксель = ПолучитьCOMОбъект(,"Excel.Application");
	КонецЕсли;
	Если ВсегоСтрок = 0 Тогда
		ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
	КонецЕсли;
	Если ВсегоКолонок = 0 Тогда
		ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	КонецЕсли;
	
	КоличествоКолонок=ВсегоКолонок-НомерПервойКолонки+1;
	
	
	Если ТЗ = Неопределено Тогда
		ТЗ =  Новый ТаблицаЗначений;
		//Для Счетчик = 1 По ВсегоКолонок Цикл
		Для Счетчик = 1 По КоличествоКолонок Цикл
			ТЗ.Колонки.Добавить("Колонка"+Счетчик, Новый ОписаниеТипов("Строка"));
		КонецЦикла;
	КонецЕсли;
	Для Счетчик = НомерПервойСтроки По ВсегоСтрок Цикл
		НоваяСтрока = ТЗ.Добавить();
	КонецЦикла;
	
	Область = ЛистЭксель.Range(ЛистЭксель.Cells(НомерПервойСтроки,НомерПервойКолонки), ЛистЭксель.Cells(ВсегоСтрок,ВсегоКолонок));
	//Данные = Область.Value.Выгрузить();
	Данные = Область[СчитываемыйОбъект].Выгрузить();
	
	
	//Для Счетчик = 0 По ВсегоКолонок-1 Цикл
	Для Счетчик = 0 По КоличествоКолонок-1 Цикл
		ТЗ.ЗагрузитьКолонку(Данные[Счетчик], Счетчик);
	КонецЦикла;
	ЛистЭксель = Неопределено;
	Возврат ТЗ;
КонецФункции


&НаСервере
Функция ЗагрузитьНаСервере( ДополнительныеПараметры)
	
	Отказ=Ложь;
	
	ТаблицаИзФайла=Новый ТаблицаЗначений;
	ТаблицаИзФайла=МакетВТаблицуЗначений(ПолеДанных,ТаблицаИзФайла);
	
	ПроверкаЗаполненияЗначений(ТаблицаИзФайла, Отказ);
	
	Если Отказ Тогда
		Возврат ТаблицаИзФайла;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("СозданиеНоменклатурыИзЕксель", УровеньЖурналаРегистрации.Информация,,,"Обработка таблица файла");
	
	
	ОбработкаТаблицыФайла(ТаблицаИзФайла, ДополнительныеПараметры, Отказ);
	
	ЗаписьЖурналаРегистрации("СозданиеНоменклатурыИзЕксель", УровеньЖурналаРегистрации.Информация,,,"Создание карточек");
	
	ДзИзФайла=ПолучитьДеревоЗначенийИзТз(ТаблицаИзФайла, ПолучитьСтрокуИменКолонокНоменклатуры(ТаблицаИзФайла, мфСтруктИменКолонокДляСозданияХарактеристики));
	
	ЗаполнитьПустуюНоменклатуруДляХарактеристик(ДзИзФайла);
	
	//ПроверитьНаличиеДублейСтрокиДз(ДзИзФайла, "АртикулОбщий", Отказ);
	Если   ПоискНоменклатуры="Артикул" Тогда
		ИмяКолонкиПоиска="АртикулОбщий, АртикулSKU";
	ИначеЕсли ПоискНоменклатуры="GUID" Тогда
		ИмяКолонкиПоиска="ХарактеристикаСсылка,  НоменклатураСсылка";
	иначе
		ИмяКолонкиПоиска=ПоискНоменклатуры;
	КонецЕсли;	
	

	ПроверитьНаличиеДублейСтрокиДз(ДзИзФайла, ИмяКолонкиПоиска, Отказ);

	
	
	Если Отказ Тогда
		Возврат ТаблицаИзФайла;
	КонецЕсли;	
	
	СозданиеКарточекТовара(ДзИзФайла, ДополнительныеПараметры);
	
	Если ЗаписыватьЦены Тогда
		ДобавитьДанныеИзФайла_в_Документ_УстЦен(ДзИзФайла, "Товары", ДополнительныеПараметры);
		ДобавитьДанныеИзФайла_в_ДокументЦенПоставщика(ДзИзФайла, "Товары", ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДзИзФайла.Колонки.Найти("Количество")<>Неопределено Тогда
		//ДополнительныеПараметры.Вставить("Партнер", ДополнительныеПараметры.ВидЦеныПоставщика.Владелец);
		ДобавитьДанныеИзФайла_в_Документ(ДзИзФайла, "ПриобретениеТоваровУслуг", "Товары", ДополнительныеПараметры);
	КонецЕсли;

	Возврат ТаблицаИзФайла;
	
КонецФункции


Процедура ПроверитьНаличиеДублейСтрокиДз(пДз, пИмяПроверяемойКолонки, Отказ)

	 Тз=Новый ТаблицаЗначений;
	 ДобавитКолонкуТз(Тз, пИмяПроверяемойКолонки);
	 
	 
	 
	 Для Каждого СтрокаДз из пДз.Строки Цикл
		 
		 
		 Для каждого ДетальнаяСтрокаДз из СтрокаДз.Строки цикл
			 
			 НоваяСтр=Тз.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтр, ДетальнаяСтрокаДз);
			 
		 КонецЦикла;
		 
	 КонецЦикла;	 
	 
	 ПроверкаНаличияДублейТз(Тз, пИмяПроверяемойКолонки,, Отказ);
	 
КонецПроцедуры


Функция ПрочитьФайлЕксель_в_Тз_Средствами_1с(пИмяФайла, пНомерЛиста, Отказ)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	////чтение
	Если НЕ Обработка.ОткрытьФайл(пИмяФайла) Тогда
		СообщитьСерв("Файл " + ИмяФайла + " не открыт!", ЭтаФорма);
		УдалитьФайлы(пИмяФайла);
		Отказ=Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Обработка.ОткрытьЛист(пНомерЛиста) Тогда
		СообщитьСерв("Лист "+пНомерЛиста+" не открыт!", ЭтаФорма);
		УдалитьФайлы(пИмяФайла);
		Отказ=Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаИзФайла=Обработка.Лист;
	
	//ТаблицаИзФайла=Обработка.ЗагрузитьМетодом_NativeXLSX_НаСервере(пИмяФайла, пНомерЛиста, "", 1, 3, 3);
	
	Возврат ТаблицаИзФайла;
	
КонецФункции // ПрочитьФайлЕксель_в_Тз_Средствами_1с()


Процедура ЗаполнитьПустуюНоменклатуруДляХарактеристик(пДЗ)
	ИмяКолонки="Номенклатура";
	
	Для Каждого СтрокаДз из пДЗ.Строки Цикл
		
		СтрокаДз.Строки.Сортировать(ИмяКолонки+" Убыв");
		
		Если  СтрокаДз.Строки.Количество()>0 и ЗначениеЗаполнено(СтрокаДз.Строки[0][ИмяКолонки]) Тогда
			Номенклатура=СтрокаДз.Строки[0][ИмяКолонки];
			
			// Здесь цикл по характеристкам одной номенклатуры, 
			// Если по каким то причинам наменклатура в этих строках разная
			// установим везде одинаковую.
			
			МассивТоваров=СтрокаДз.Строки.ВыгрузитьКолонку(ИмяКолонки);
			
			Для i=0 по МассивТоваров.Количество()-1 Цикл
				МассивТоваров.Установить(i, Номенклатура);
			КонецЦикла; 
			
			СтрокаДз.Строки.ЗагрузитьКолонку(МассивТоваров, ИмяКолонки);
			
			СтрокаДз[ИмяКолонки]=Номенклатура;
			
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	//пДз.ВыбратьСтроку();
	
КонецПроцедуры



Функция ПолучитьСтрокуИменКолонокНоменклатуры(пТзИзФайла, пСтруктКолонокХарактеристик)
	
	СтрИменКолонок="";
	
	Для Каждого Колонка из пТзИзФайла.Колонки Цикл
		
		
		Если Не ЗначениеЗаполнено(Колонка.Имя) или пСтруктКолонокХарактеристик.Свойство(Колонка.Имя)
			Или нрег(Колонка.Имя) ="товар" Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Разделитель=?(ЗначениеЗаполнено(СтрИменКолонок),", ","");
		
		СтрИменКолонок=СтрИменКолонок+Разделитель+Колонка.Имя 
		
	КонецЦикла;	
	
	
	Возврат  СтрИменКолонок;
	
КонецФункции // ПолучитьСтрокуИменКолонокНоменклатуры()


Функция ПолучитьДеревоЗначенийИзТз(Таблица, пСтрИменаГруппируемыхКолонок) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Дерево.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения,Колонка.Заголовок);
	КонецЦикла;
	
	
	КопияТз=Таблица.Скопировать();
	КопияТз.Свернуть(пСтрИменаГруппируемыхКолонок);
	
	Для Каждого СтрокаТаблицы Из КопияТз Цикл
		
		НоваяСтрокаДз=Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДз, СтрокаТаблицы);
		
		СтруктОтбора=Новый Структура(пСтрИменаГруппируемыхКолонок);
		ЗаполнитьЗначенияСвойств(СтруктОтбора, СтрокаТаблицы);
		
		
		МассивСтрокТз=Таблица.НайтиСтроки(СтруктОтбора);
		
		Для Каждого СтрокаТз из МассивСтрокТз Цикл
			
			ДетальнаяСтрокаДз=НоваяСтрокаДз.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ДетальнаяСтрокаДз, СтрокаТз);
			
		КонецЦикла;	
		
		
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции //ВыгрузитьТаблицуЗначенийВДеревоЗначений()

// Процедура устанавливает значение во всем дереве значений

&НаСервере
Процедура ДобавитьДанныеИзФайла_в_Документ_УстЦен(пТаблицаИзФайла, пИмяТЧ, пДополнительныеПараметры)
	
	ИмяКолонкиЦены="Цена_Розничная";
	
	ДокументОбъект=Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	//ДокументОбъект= ДокументСсылка;
	ДокументОбъект.Дата=ТекущаяДата();
	ДокументОбъект.УстановитьНовыйНомер();
	ДокументОбъект.Статус=Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	НоваяВидЦен=ДокументОбъект.ВидыЦен.Добавить();
	НоваяВидЦен.ВидЦены=пДополнительныеПараметры.ВидЦены;
	
	Для Каждого СтрокаИзФайлаНоменклатуры из пТаблицаИзФайла.Строки Цикл
		
		Для Каждого СтрокаИзФайла из СтрокаИзФайлаНоменклатуры.Строки Цикл
			
			НоваяСтрокаТЧ=ДокументОбъект[пИмяТЧ].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИзФайла);
			
			НоваяСтрокаТЧ.Упаковка=НоваяСтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрокаТЧ.ВидЦены=пДополнительныеПараметры.ВидЦены;
			НоваяСтрокаТЧ.ЦенаИзмененаВручную=Истина;
			НоваяСтрокаТЧ.Цена=СтрокаИзФайла[ИмяКолонкиЦены];
			
		КонецЦикла;
	КонецЦикла;	
	
	
	Попытка
		
		ДокументОбъект.Записать();
		СообщитьСерв("Записан "+Строка(ДокументОбъект), ДокументОбъект);
		Сообщить_о_записи(ДокументОбъект, пДополнительныеПараметры, Истина);
	Исключение
		СообщитьСерв(ОписаниеОшибки(), ЭтаФорма);
		
	КонецПопытки;
	
	
	
	
КонецПроцедуры


Процедура ДобавитьДанныеИзФайла_в_Документ(пДзИзФайла, пИмяДокумента, пИмяТЧ, пДополнительныеПараметры)
	
	ИмяКолонкиЦены="Цена_Закупки";
	
	ДокументОбъект=Документы[пИмяДокумента].СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, пДополнительныеПараметры); 
	
	ДокументОбъект.Дата=ТекущаяДата();
	
	Для Каждого СтрокаДз из пДзИзФайла.Строки Цикл
		
		Для Каждого СтрокаИзФайла из СтрокаДз.Строки Цикл
			
			
			НоваяСтрокаТЧ=ДокументОбъект[пИмяТЧ].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИзФайла);
			
			НоваяСтрокаТЧ.Упаковка=НоваяСтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			
			НоваяСтрокаТЧ.Цена=СтрокаИзФайла[ИмяКолонкиЦены];
		 	ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, пДополнительныеПараметры);
			
			ТоварыНоменклатураПриИзменении(ДокументОбъект, НоваяСтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла;	
	
	Попытка
		
		ДокументОбъект.Записать();
		СообщитьСерв("Записан "+Строка(ДокументОбъект), ДокументОбъект);
		Сообщить_о_записи(ДокументОбъект, пДополнительныеПараметры, Истина);
	Исключение
		СообщитьСерв(ОписаниеОшибки(), ЭтаФорма);
		
	КонецПопытки;
	

	
	
	
	
КонецПроцедуры


&НаСервере
Процедура ТоварыНоменклатураПриИзменении(пДокумент, пНоваяСтрокаТЧ)
	
	ТекущаяСтрока = пНоваяСтрокаТЧ;
	ИмяТЧ="Товары";
	СтруктураДействий = Новый Структура;
	
	пНоваяСтрокаТЧ.КоличествоУпаковок=пНоваяСтрокаТЧ.Количество;
	
	//СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	//СтруктураДействий.Вставить("ПроверитьФлагРезервирования");
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	
	
	Если ЕстьРеквизитТабЧастиДокумента("КоличествоФакт", пДокумент.метаданные(), "Товары") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	КонецЕсли;
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", пДокумент.метаданные()) Тогда
		СтруктураПараметровСтавкиНДС.Вставить("Склад"      , пДокумент.Склад) ;
	иначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", пДокумент.метаданные()) Тогда
		СтруктураПараметровСтавкиНДС.Вставить("Склад"      , пДокумент.СкладОтправитель) ;
	КонецЕсли;
	
	
	Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", пДокумент.метаданные(), ИмяТЧ) Тогда
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , пДокумент.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", пДокумент.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
	КонецЕсли;
	
	
	
	Если ЕстьРеквизитТабЧастиДокумента("Сумма", пДокумент.метаданные(), ИмяТЧ) Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ЕстьРеквизитТабЧастиДокумента("Продавец", пДокумент.метаданные(), ИмяТЧ) Тогда
		СтруктураДействий.Вставить("ПроставитьПродавца", пДокумент.Продавец);
	КонецЕсли;
	
	Если ЕстьРеквизитТабЧастиДокумента("СуммаАвтоматическойСкидки", пДокумент.метаданные(), ИмяТЧ) Тогда
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		
	КонецЕсли;	
	СтруктураТЧ = Новый Структура;
	//СтруктураТЧ.Вставить("СтрокиТЧ" , Документ.Товары);
	СтруктураТЧ.Вставить("ТекущаяСтрока" , ТекущаяСтрока);
	
	
	ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт
	
	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);
	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
	Иначе
		Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ЕстьРеквизитТабЧастиДокумента()


&НаСервере
Процедура ДобавитьДанныеИзФайла_в_ДокументЦенПоставщика(пТаблицаИзФайла, пИмяТЧ, пДополнительныеПараметры)
	
	ИмяКолонкиЦены="Цена_Закупки";
	
	ДокументОбъект=Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
	ДокументОбъект.Дата=ТекущаяДата();
	ДокументОбъект.УстановитьНовыйНомер();
	ДокументОбъект.Партнер=  ВидЦеныПоставщика.Владелец;
	//ДокументОбъект= ДокументСсылка;
	
	//НоваяВидЦен=ДокументОбъект.ВидыЦен.Добавить();
	//НоваяВидЦен.ВидЦены=пДополнительныеПараметры.ВидЦены;
	
	Для Каждого СтрокаИзФайлаНоменклатуры из пТаблицаИзФайла.Строки Цикл
		Для Каждого СтрокаИзФайла из СтрокаИзФайлаНоменклатуры.Строки Цикл
			
			НоваяСтрокаТЧ=ДокументОбъект[пИмяТЧ].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИзФайла);
			
			НоваяСтрокаТЧ.Упаковка=НоваяСтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрокаТЧ.ВидЦеныПоставщика=пДополнительныеПараметры.ВидЦеныПоставщика;
			//НоваяСтрокаТЧ.ЦенаИзмененаВручную=Истина;
			НоваяСтрокаТЧ.Цена=СтрокаИзФайла[ИмяКолонкиЦены];
			
		КонецЦикла;
	КонецЦикла;	
	
	
	
	Попытка
		
		ДокументОбъект.Записать();
		СообщитьСерв("Записан "+Строка(ДокументОбъект), ДокументОбъект);
		
		Сообщить_о_записи(ДокументОбъект, пДополнительныеПараметры, Истина);
		
	Исключение
		СообщитьСерв(ОписаниеОшибки(), ЭтаФорма);
		
	КонецПопытки;
	
	
	
КонецПроцедуры


&НаСервере
Функция ПолучениеФайловКартинокИзХранилища(ПомещенныеФайлы, пТзИзФайлаЕксель, пСруктМакета) Экспорт
	Отказ=Ложь;
	ИмяКолонкиФайлаКартинки="ИмяФайла";
	ИмяКолонкиСопоставленияКартинокНоменклатуры="АртикулОбщий";
	
	//СпискоИменКопируемыхКолонок="Номенклатура, АртикулSKU";
	СпискоИменКопируемыхКолонок="Номенклатура, Артикул";
	
	//ТзНоменклатурыКартинок=пТзИзФайлаЕксель.Скопировать(, СпискоИменКопируемыхКолонок);
	//ТзНоменклатурыКартинок.Колонки.Добавить(ИмяКолонкиФайлаКартинки);
	
	
	ТзНоменклатурыКартинок=ДобавитьИменаФайлов_в_Таблицу(ПолучитьТзИменФайловАртикулов(ПомещенныеФайлы,ИмяКолонкиСопоставленияКартинокНоменклатуры), пТзИзФайлаЕксель,ИмяКолонкиСопоставленияКартинокНоменклатуры);
	
	ТзНоменклатурыКартинок.Свернуть("Номенклатура, ИмяФайла");
	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("jpg");
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Хранение);
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ФайлВрем=Новый Файл(Файл.Имя);
			
			//ИмяФайлаДляПоиска2=ПривестиИмяФайла_к_Артикулу(ФайлВрем.ИмяБезРасширения, "_");
			
			МассивСтрокТзНоменклатуры=ТзНоменклатурыКартинок.найтиСтроки(Новый Структура(ИмяКолонкиФайлаКартинки, ФайлВрем.ИмяБезРасширения));
			
			
			Для Каждого СтрокаМассива из МассивСтрокТзНоменклатуры Цикл
				Если ЗначениеЗаполнено(СтрокаМассива.Номенклатура) Тогда
					СохранитьФайлКартинкиИБ(ИмяВременногоФайла, ФайлВрем.ИмяБезРасширения, СтрокаМассива.Номенклатура, пСруктМакета);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
		КонецПопытки;
		
		
		
		
	КонецЦикла;
	
	Попытка
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось удалить временный файл";
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	
	Возврат истина;
	
КонецФункции


Функция ПривестиИмяФайла_к_Артикулу(Знач пИмяФайла, пРазделитель)
	
	ИмяФайлаАрт="";
	
	МассивСлов=СтрРазделить(пИмяФайла, пРазделитель, Ложь);
	
	КоличествоСлов=МассивСлов.Количество();
	
	//Удалим последнее слово там инф-я о разрешении
	//МассивСлов.Удалить(КоличествоСлов-1);
	//
	//Для каждого Слово Из МассивСлов Цикл
	//	ИмяФайлаАрт = ?(ЗначениеЗаполнено(ИмяФайлаАрт),ИмяФайлаАрт+" ",ИмяФайлаАрт) + Слово;
	//КонецЦикла;
	
	ИмяФайлаАрт=МассивСлов[0];
	
	Возврат ИмяФайлаАрт;
	
КонецФункции // ПривестиИмяФайла_к_Артикулу()


Функция ДобавитьИменаФайлов_в_Таблицу(пТзИменФайловКартинок, пТаблицаИзФайла, пИмяПоляТаблицыДляПоискаФайла)
	
	
	
	ТзНоменклатура_ИмяФайла=Новый ТаблицаЗначений;
	ТзНоменклатура_ИмяФайла.Колонки.Добавить("Номенклатура");
	ТзНоменклатура_ИмяФайла.Колонки.Добавить("ИмяФайла");
	
	Для Каждого СтрокаТз из пТаблицаИзФайла Цикл
		
		//// передаю артикул, получаю массив имен файлов для этого арт.
		//МассивКлючейПоискаФайла= ПривестиКлючПоиска(СтрокаТз[пИмяПоляТаблицыДляПоискаФайла]);   		
		
		МассивИменФайлов=пТзИменФайловКартинок.НайтиСтроки(Новый Структура(пИмяПоляТаблицыДляПоискаФайла, СтрокаТз[пИмяПоляТаблицыДляПоискаФайла]));
		
		Для Каждого СтрокаТзИменФайлов из МассивИменФайлов Цикл
			
			НоваяСтрока=ТзНоменклатура_ИмяФайла.Добавить();
			НоваяСтрока.Номенклатура=СтрокаТз.Номенклатура;
			НоваяСтрока.ИмяФайла=СтрокаТзИменФайлов.ИмяФайла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТзНоменклатура_ИмяФайла
	
КонецФункции

// привести ключ поиска к нужному виду
Функция ПривестиКлючПоиска(пКлючПоиска, Разделитель="_");
	
	//МассивСтрок=СтрРазделить(пКлючПоиска, Разделитель, Ложь);	
	// уберем из ратикула размер, должен быть отделен от артикула "-", FGS105 0010-S
	НомерСимвола=СтрНайти(пКлючПоиска, "-", НаправлениеПоиска.СКонца); 
	пКлючПоиска=Лев(пКлючПоиска, НомерСимвола-1);	 
	
	МассивИменФайлов=Новый Массив;
	МассивИменФайлов.Добавить(пКлючПоиска+"MF");
	МассивИменФайлов.Добавить(пКлючПоиска+"UF");
	МассивИменФайлов.Добавить(пКлючПоиска+"LF");
	МассивИменФайлов.Добавить(пКлючПоиска+"MB");
	МассивИменФайлов.Добавить(пКлючПоиска+"UB");
	МассивИменФайлов.Добавить(пКлючПоиска+"LB");
	
	Возврат МассивИменФайлов;
	
КонецФункции // ПривестиКлючПоиска()


Функция ПолучитьТзИменФайловАртикулов(пПомещенныйФайлы, пИмяКритерияПоискаКартинок)
	
	Тз_ИмяФайлаАртикул=Новый ТаблицаЗначений;
	Тз_ИмяФайлаАртикул.Колонки.Добавить(пИмяКритерияПоискаКартинок);
	Тз_ИмяФайлаАртикул.Колонки.Добавить("ИмяФайла");
	Тз_ИмяФайлаАртикул.Индексы.Добавить(пИмяКритерияПоискаКартинок);
	
	Для Каждого Файл из пПомещенныйФайлы Цикл
		
		ФайлВрем=Новый Файл(Файл.Имя);
		
		//ИмяФайлаИзм=ПривестиИмяФайла_к_Артикулу(ФайлВрем.ИмяБезРасширения , "_");
		
		Артикул=ПривестиИмяФайла_к_Артикулу(ФайлВрем.ИмяБезРасширения , "_");
		
		НоваяСтрТз=Тз_ИмяФайлаАртикул.Добавить();
		НоваяСтрТз[пИмяКритерияПоискаКартинок]=Артикул;
		НоваяСтрТз.ИмяФайла=ФайлВрем.ИмяБезРасширения; 
		
		
	КонецЦикла;	
	
	Возврат Тз_ИмяФайлаАртикул;
	
КонецФункции // ПолучитьМассивИменФайлов()





&НаСервере
Процедура СохранитьФайлКартинкиИБ(пИмяФайла, пИмяФайлаБезРасширения, пВладелец, пСруктМакета)
	
	Фото=Новый ДвоичныеДанные(пИмяФайла);
	СжатиеФайла = Новый СжатиеДанных(9);
	
	ХранилищеКартинки=Новый ХранилищеЗначения(Фото,СжатиеФайла);
	
	Прицеп = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
	Прицеп.Автор = ПараметрыСеанса.ТекущийПользователь;
	Прицеп.УстановитьНовыйКод();
	Прицеп.Наименование = пИмяФайлаБезРасширения;
	Прицеп.ВладелецФайла = пВладелец;
	Прицеп.ПодписанЭП = Ложь;
	Прицеп.Зашифрован = Ложь;
	Прицеп.Описание = "основная фотография номенклатуры";
	Прицеп.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	Прицеп.ФайлХранилище = ХранилищеКартинки;
	Прицеп.Расширение = ".jpg";
	
	Прицеп.Записать();
	
	НаборЗаписей=РегистрыСведений.ПрисоединенныеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрисоединенныйФайл.установить(Прицеп.Ссылка);
	НаборЗаписей.Очистить();
	
	НоваяЗапись=НаборЗаписей.Добавить();
	НоваяЗапись.ПрисоединенныйФайл=Прицеп.Ссылка;
	НоваяЗапись.ХранимыйФайл=ХранилищеКартинки;
	
	Попытка
		НаборЗаписей.записать();
		ВывестиИнормацию_о_записиОбъекта(пСруктМакета, "Записан файл картинки "+Прицеп+" для товара "+пВладелец);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(пВладелец.ФайлКартинки) Тогда	
		пВладалецОбъект=пВладелец.получитьОбъект();
		пВладалецОбъект.ФайлКартинки=Прицеп.Ссылка;
		пВладалецОбъект.Записать();
	КонецЕсли;
	//СообщитьСерв("Записан "+Прицеп, Прицеп.Ссылка);
	
КонецПроцедуры


Процедура СозданиеКарточекТовара(пДзИзФайла, пДополнительныеРеквизитыНоменклатуры)
	
	
	Для Каждого СтрокаФайла из пДзИзФайла.Строки Цикл
		
	Если ЗначениеЗаполнено(СтрокаФайла.Номенклатура) Тогда         // есть в ИБ
			
			Если не ПерезаписыватьНоменклатуру Тогда
				Продолжить;
			КонецЕсли;	
			ОбъектНоменклатура=СтрокаФайла.Номенклатура.ПолучитьОбъект();
			//ОбъектНоменклатура.Наименование=СформироватьНаименование(СтрокаФайла, ОбъектНоменклатура, пДзИзФайла, Ложь);
			ОбъектНоменклатура.Родитель=глФормированиеРодителя(СформироватьПутьСтрокой(СтрокаФайла, пДополнительныеРеквизитыНоменклатуры, пДзИзФайла));
			ОбъектНоменклатура.Артикул=СтрокаФайла.АртикулОбщий;
			
		ИначеЕсли СоздаватьНовыеКарточки Тогда              // новый
			
			ОбъектНоменклатура=Справочники.Номенклатура.СоздатьЭлемент();
			
			//Если СтрокаФайла.Строки.Количество()=1 и НЕ ЗначениеЗаполнено(СтрокаФайла.Строки[0].Размер) Тогда // бех х-к
			//	ОбъектНоменклатура.ВидНоменклатуры=ВидНоменклатуры;
			//Иначе	
			//	ОбъектНоменклатура.ВидНоменклатуры= СтрокаФайла.ВидНоменклатуры;
			//КонецЕсли;
			
			ОбъектНоменклатура.ВидНоменклатуры= СтрокаФайла.ВидНоменклатуры;
			ЗаполнитьОбязательныеПоляНовойНоменклатуры(ОбъектНоменклатура, пДополнительныеРеквизитыНоменклатуры);
			//ОбъектНоменклатура.Наименование=СформироватьНаименование(СтрокаФайла, ОбъектНоменклатура, пДзИзФайла, Ложь);
			ОбъектНоменклатура.Родитель=глФормированиеРодителя(СформироватьПутьСтрокой(СтрокаФайла, пДополнительныеРеквизитыНоменклатуры, пДзИзФайла));
			ОбъектНоменклатура.Артикул=СтрокаФайла.АртикулОбщий;
		Иначе
			
			Продолжить;
			
		КонецЕсли;	
		
		//ОбъектНоменклатура.НаименованиеПолное= ОбъектНоменклатура.Наименование;

		
		ЗаполнитьСпецРеквизиты(ОбъектНоменклатура, СтрокаФайла, пДзИзФайла);
		
		ЗаполнитьСсылочныеРеквиизты(ОбъектНоменклатура, СтрокаФайла, Истина);
		
		ЗаполнитьСтроковыеРеквизитыНоменклатуры(СтрокаФайла, ОбъектНоменклатура, мфСтруктСоответствияПолейФайла_РеквизитовНоменклатуры, пДополнительныеРеквизитыНоменклатуры);
		
		ЗаписатьДополнительныеРеквизиты(ОбъектНоменклатура , мфСтрукКонстант.ТзСвойствНоменклатуры, СтрокаФайла);
		
		
			
		
		ОбъектНоменклатура.Наименование=СформироватьНаименование(СтрокаФайла, ОбъектНоменклатура, пДзИзФайла, Истина);
        ОбъектНоменклатура.НаименованиеПолное= ОбъектНоменклатура.Наименование;
		
		Если ЗначениеЗаполнено(ОбъектНоменклатура.Наименование) Тогда
			ОбъектНоменклатура.ДополнительныеСвойства.Вставить("РабочееНаименованиеСформировано",Истина);
			ОбъектНоменклатура.ДополнительныеСвойства.Вставить("НаименованиеДляПечатиСформировано",Истина);
		КонецЕсли;	

		
		Попытка
			
			ЭтоНовый=ОбъектНоменклатура.ЭтоНовый();			
			ОбъектНоменклатура.Записать();
			Сообщить_о_записи(ОбъектНоменклатура, пДополнительныеРеквизитыНоменклатуры, ЭтоНовый);
			
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбъектНоменклатура.Наименование+" "+ОписаниеОшибки();
			Сообщение.Сообщить();
			
		КонецПопытки;
		
		СтрокаФайла.Номенклатура=ОбъектНоменклатура.Ссылка;
		
				
		
		Для Каждого ДетальнаяСтрокаДз из СтрокаФайла.Строки Цикл
			
			ДетальнаяСтрокаДз.Номенклатура=СтрокаФайла.Номенклатура;
			
			СоздатьХарактеристику(СтрокаФайла.Номенклатура, ДетальнаяСтрокаДз, мфСтрукКонстант.ТзСвойствХарактеристик, пДополнительныеРеквизитыНоменклатуры);
			
			ЗаписьШтрихкода(ОбъектНоменклатура.Ссылка, ДетальнаяСтрокаДз["Характеристика"] , ДетальнаяСтрокаДз["Штрихкод"], пДополнительныеРеквизитыНоменклатуры);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры


Функция ПолучитьМнЧислоТоварнойКатегории(пНаименованиеТоварнойКатегории)
	
	ТоварнаяКатегория=Справочники.ТоварныеКатегории.НайтиПоНаименованию(пНаименованиеТоварнойКатегории);
	
	Если  Не ТоварнаяКатегория.Пустая() Тогда
		
		Если ТоварнаяКатегория.ДополнительныеРеквизиты.Количество()>0  и  ТоварнаяКатегория.ДополнительныеРеквизиты[0].Свойство.Наименование=
			"МножественноеЧисло (Товарные категории)"  и ЗначениеЗаполнено(ТоварнаяКатегория.ДополнительныеРеквизиты[0].Значение) Тогда
			
			Возврат  ТоварнаяКатегория.ДополнительныеРеквизиты[0].Значение;
		Иначе
			
			Возврат  пНаименованиеТоварнойКатегории;
			
		КонецЕсли;  
	Иначе	  
		
		Возврат  пНаименованиеТоварнойКатегории;
		
		
	КонецЕсли; 
	
КонецФункции // ПолучитьМнЧислоТоварнойКатегории()



Функция СформироватьПутьСтрокой(пСтрокаФайла, пДопРеквизиты , пДзИзФайла)
	
	Если пДзИзФайла.Колонки.найти("Путь")<>Неопределено Тогда
		Возврат пСтрокаФайла.Путь;
	КонецЕсли;	
	
	Разделитель="#";
	ПапкаВерхнегоУровня=?(ЗначениеЗаполнено(пДопРеквизиты.ПапкаПервогоУровня),Строка(ПапкаВерхнегоУровня)+Разделитель,"");
	Подгруппа1=?(пДзИзФайла.Колонки.найти("Подгруппа1")<>Неопределено, пСтрокаФайла.Подгруппа1+Разделитель,"");
	Бренд=?(пДзИзФайла.Колонки.найти("Бренд")<>Неопределено, пСтрокаФайла.Бренд, пСтрокаФайла.Производитель);
	
	Подгруппа3=ПолучитьМнЧислоТоварнойКатегории(пСтрокаФайла.Подгруппа3);
	
	Путь=Строка(ПапкаВерхнегоУровня)+Подгруппа1+Строка(пСтрокаФайла.Подгруппа2)+Разделитель+Подгруппа3+Разделитель+Бренд+Разделитель;
	
	Возврат Путь;
	
КонецФункции // СформироватьПутьСтрокой()


Функция глФормированиеРодителя(ИсхСтр) Экспорт 
	Родитель = Справочники.Номенклатура.ПустаяСсылка();
	Родитель1=Справочники.Номенклатура.ПустаяСсылка(); // #KO 22/03/12 для правильного поиска по самому верхнему родителю
	МассивРодителей = Новый Массив;
	КолУр=СтрЧислоВхождений(ИсхСтр,"#");//0987890790876908769806
	КолУрСлеш=СтрЧислоВхождений(ИсхСтр,"/");
	//Если КолУрСлеш > 0 Тогда
	//ИсхСтр	 =  ИсхСтр + "/";
	//КолУрСлеш=СтрЧислоВхождений(ИсхСтр,"/");
	//
	//КонецЕсли;
	Если Не КолУр = 0 Тогда
		Для ку=1 По КолУр Цикл 
			ПерВх=Найти(ИсхСтр,"#");
			СтрПоз=Лев(ИсхСтр,ПерВх-1);
			//СпТ.ДобавитьЗначение(СтрПоз);
			Если ку > 1 Тогда
				Родитель1 = МассивРодителей[КолУр-ку+1];	
			КонецЕсли; 
			Родитель = Справочники.Номенклатура.НайтиПоНаименованию(СтрПоз,Истина,Родитель1);
			Если Родитель = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Родитель = Справочники.Номенклатура.СоздатьГруппу();
				Родитель.Наименование = СтрПоз;
				//Родитель.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Товар;
				Родитель.Родитель = Родитель1;
				Родитель.Записать();
			КонецЕсли; 
			
			
			МассивРодителей.Вставить(КолУр-ку,Родитель.Ссылка);
			ИсхСтр=Сред(ИсхСтр,ПерВх+1);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если Не МассивРодителей.Количество() = 0 Тогда
		Родитель = МассивРодителей[0];
	КонецЕсли; 
	Возврат Родитель
КонецФункции


&НаСервере
функция ПолучитьСвВо(пНаименованиеСвойства, пТзСвойств, Отказ=Ложь)
	
	
	МасссивСтрокТз=пТзСвойств.НайтиСтроки(Новый Структура("Наименование", пНаименованиеСвойства));
	
	Если МасссивСтрокТз.Количество()>0 Тогда
		Возврат   МасссивСтрокТз[0].ссылка;
	Иначе
		СообщитьСерв("Не найден дополнительный реквизит/сведение в базе "+пНаименованиеСвойства+" загрузка прервана", ЭтаФорма);
		Отказ=Истина;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции





Процедура СоздатьХарактеристику(пНоменклатура,пДанныеДляСозданияХарактеристики, пТзСвойствХарактеристик, пДополнительныеРеквизитыНоменклатуры)
	
	НаименованиеСвойстваЦвет="Цвет (Справочник ""Характеристики номенклатуры"" (Общие))";
	НаименованиеСвойстваРазмер="Размер (Справочник ""Характеристики номенклатуры"" (Общие))";
	НаименованиеСвойстваАртикул="Артикул (Справочник ""Характеристики номенклатуры"" (Общие))";
	НаименованиеСвойстваЦветПроизв="Цвет производителя (Справочник ""Характеристики номенклатуры"" (Общие))";
	НаименованиеСвойстваРазмерRUS="Размер RUS (Справочник ""Характеристики номенклатуры"" (Общие))";

	
	
	//
	//НаименованиеСвойстваЦвет="Цвет";
	//НаименованиеСвойстваРазмер="Размер";
	//НаименованиеСвойстваАртикул="Артикул";
	//НаименованиеСвойстваЦветПроизв="Цвет производителя";
	
	
	
	Если пНоменклатура.Пустая() или пНоменклатура.ИспользованиеХарактеристик =Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		Возврат
	КонецЕсли;	
	
	
	Если НЕ ЗначениеЗаполнено(пДанныеДляСозданияХарактеристики.Характеристика) и СоздаватьНовыеКарточки Тогда
		НоваяХарактеристика=Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	ИначеЕсли 	 НЕ ЗначениеЗаполнено(пДанныеДляСозданияХарактеристики.Характеристика) Тогда
		Возврат;
	Иначе
		НоваяХарактеристика=пДанныеДляСозданияХарактеристики.Характеристика.ПолучитьОбъект();
	КонецЕсли;
	
	НоваяХарактеристика.Владелец=пНоменклатура;
	
	Если НЕ ЗначениеЗаполнено(НоваяХарактеристика.наименование) Тогда
		НаименованиеХарактеристики=СформироватьНаименованиеХарактеристики(пДанныеДляСозданияХарактеристики, НоваяХарактеристика);
		НоваяХарактеристика.Наименование=СокрЛП(НаименованиеХарактеристики);
	КонецЕсли;
	
	
	
	Размер=НайтиЗначениеСвойства(пДанныеДляСозданияХарактеристики.Размер, мфТзРазмеров, ПолучитьСвВо(НаименованиеСвойстваРазмер, пТзСвойствХарактеристик));
	РазмерRUS=НайтиЗначениеСвойства(пДанныеДляСозданияХарактеристики.РазмерRUS, мфТзРазмеровRUS, ПолучитьСвВо(НаименованиеСвойстваРазмерRUS, пТзСвойствХарактеристик));
	
	Если ЦветЯвляетсяХарактеристикой Тогда
		ЦветПроизводителя=НайтиЗначениеСвойства(пДанныеДляСозданияХарактеристики.ЦветПроизводителя, мфТзЦветовПроизводителя, ПолучитьСвВо(НаименованиеСвойстваЦветПроизв, пТзСвойствХарактеристик));
		Цвет=НайтиЗначениеСвойства(пДанныеДляСозданияХарактеристики.Цвет, мфТзЦветов, ПолучитьСвВо(НаименованиеСвойстваЦвет, пТзСвойствХарактеристик));
	КонецЕсли;
	
	
	
	СтруктСвойств=Новый Соответствие;
	СтруктСвойств.Вставить(НаименованиеСвойстваАртикул, пДанныеДляСозданияХарактеристики.АртикулSKU);
	СтруктСвойств.Вставить(НаименованиеСвойстваРазмер, Размер);
	СтруктСвойств.Вставить(НаименованиеСвойстваРазмерRUS, РазмерRUS);
	
	Если ЦветЯвляетсяХарактеристикой Тогда
		СтруктСвойств.Вставить(НаименованиеСвойстваЦвет, Цвет);
		СтруктСвойств.Вставить(НаименованиеСвойстваЦветПроизв, ЦветПроизводителя);
	КонецЕсли;
	
	ЗаписатьСвойстваХарактеристики(НоваяХарактеристика, СтруктСвойств, пТзСвойствХарактеристик, пДанныеДляСозданияХарактеристики);
	
	
	Попытка
		ЭтоНовый=НоваяХарактеристика.Этоновый();
		
		НоваяХарактеристика.Записать();
		пДанныеДляСозданияХарактеристики.Характеристика=НоваяХарактеристика.Ссылка;
		
		//Сообщить_о_записи(НоваяХарактеристика, пДополнительныеРеквизитыНоменклатуры, ЭтоНовый);
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Ошибка создания характеристики "+НоваяХарактеристика.Наименование+" "+Строка(пНоменклатура)+" "+ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
	
	НоваяХарактеристика.Наименование=СформироватьНаименованиеХарактеристики(пДанныеДляСозданияХарактеристики, НоваяХарактеристика);
	НоваяХарактеристика.НаименованиеПолное=НоваяХарактеристика.Наименование;
	
	
	
	Попытка
	
		НоваяХарактеристика.Записать();
		
		Сообщить_о_записи(НоваяХарактеристика, пДополнительныеРеквизитыНоменклатуры, ЭтоНовый);
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Ошибка создания характеристики "+НоваяХарактеристика.Наименование+" "+Строка(пНоменклатура)+" "+ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	

	
	
	пДанныеДляСозданияХарактеристики.Характеристика=НоваяХарактеристика.Ссылка;
	
	//ЗаписатьСвойстваХарактеристики(НоваяХарактеристика.Ссылка, СтруктСвойств, пТзСвойствХарактеристик, пДанныеДляСозданияХарактеристики, "Сведения");
	
	
КонецПроцедуры

Процедура Сообщить_о_записи(Знач НоваяХарактеристика, Знач пДополнительныеРеквизитыНоменклатуры, Знач ЭтоНовый)
	
	Перем ТекстСообщения;
	
	Если ЭтоНовый Тогда
		ТекстСообщения="Создан новый "+НоваяХарактеристика;
	Иначе
		ТекстСообщения="Записан "+НоваяХарактеристика;
	КонецЕсли;	
	
	ВывестиИнормацию_о_записиОбъекта(пДополнительныеРеквизитыНоменклатуры, ТекстСообщения, НоваяХарактеристика);
	
КонецПроцедуры


Функция НайтиЗначениеСвойства(пЗначениеСтрока, пТзЗначенийСвойств, пВладелец)
	
	Если НЕ ЗначениеЗаполнено(пЗначениеСтрока) Тогда
		Возврат Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	КонецЕсли;	
	
	МассивСтрокТЗ=пТзЗначенийСвойств.найтиСтроки(Новый Структура("ЗначениеПоиска", строка(пЗначениеСтрока)));
	
	Если МассивСтрокТЗ.Количество()=0  Тогда
		
		НовыйЭлемент=Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		НовыйЭлемент.Наименование=Строка(пЗначениеСтрока);
		НовыйЭлемент.Владелец=пВладелец;
		
		НовыйЭлемент.Записать();
		
		НоваяСтрокаТЗ=пТзЗначенийСвойств.Добавить();
		НоваяСтрокаТЗ.ЗначениеПоиска=НовыйЭлемент.Наименование;
		НоваяСтрокаТЗ.Ссылка=НовыйЭлемент.Ссылка;
		
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат  МассивСтрокТЗ[0].Ссылка;
	КонецЕсли;	 
	
	
КонецФункции // НайтиЦвет()

Функция НайтиЗначениеСвойстваПоНаименованию(пЗначениеСтрока,  пВладелец, пСоздватьНовые=Ложь)
	
	Если НЕ ЗначениеЗаполнено(пЗначениеСтрока) Тогда
		Возврат Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	КонецЕсли;	
	
	//МассивСтрокТЗ=пТзЗначенийСвойств.найтиСтроки(Новый Структура("ЗначениеПоиска", строка(пЗначениеСтрока)));
	
	ИскомыйЭлемент=Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(пЗначениеСтрока, Истина,, пВладелец);
	
	Если ИскомыйЭлемент.Пустая() и пСоздватьНовые  Тогда
		
		НовыйЭлемент=Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		НовыйЭлемент.Наименование=Строка(пЗначениеСтрока);
		НовыйЭлемент.Владелец=пВладелец;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			СообщитьСерв(ОписаниеОшибки(), ЭтаФорма);
		КонецПопытки;
		
		
		
		Возврат НовыйЭлемент.Ссылка;
	ИначеЕсли ИскомыйЭлемент.Пустая() и не пСоздватьНовые  Тогда
		СообщитьСерв("Не найдено значение "+пЗначениеСтрока+" для "+Строка(пВладелец), ЭтаФорма);
	Иначе
		
		Возврат  ИскомыйЭлемент;
	КонецЕсли;	 
	
	
КонецФункции // НайтиЦвет()


Процедура ЗаписатьСвойстваХарактеристики(НоваяХарактеристика,  пСтруктСвойств, пТзСвойствХарактеристик, пДанныеДляСоздания, ТипСвойств="Реквизиты")
	
	Если ТипСвойств="Реквизиты" Тогда
		
		ТзСвойствДляВидаНоменклатуры=пТзСвойствХарактеристик.Скопировать(Новый Структура("ВидНоменклатуры", пДанныеДляСоздания.ВидНоменклатуры));
		
		Для Каждого СтрокаДопРеквизит из  ТзСвойствДляВидаНоменклатуры Цикл
			
			ЗначениеСвойства= пСтруктСвойств.Получить(СтрокаДопРеквизит.Наименование);
			
			Если ЗначениеСвойства=Неопределено Тогда
				Продолжить;
				//ИмяКолонкиФайла=СтрокаДопРеквизит.Наименование;
			КонецЕсли;	
			
			//Если пДанныеДляСоздания.Владелец().Колонки.Найти(СокрЛП(ИмяКолонкиФайла))<>Неопределено Тогда
			
			ЗаписатьДополнительныйРеквизит(ЗначениеСвойства, НоваяХарактеристика, СтрокаДопРеквизит.Ссылка);
			
			//КонецЕсли;
			
		КонецЦикла;	
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Свойство из  пСтруктСвойств Цикл
		
		//СвВо=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Свойство.Ключ);
		
		МассивСтроТкз=пТзСвойствХарактеристик.НайтиСтроки(Новый Структура("Наименование",Свойство.Ключ ));
		
		Если МассивСтроТкз.Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено св-во "+Свойство.Значение;
			Сообщение.Сообщить();
			Продолжить;
		Иначе
			СвВо=МассивСтроТкз[0].ССылка;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Свойство.значение) Тогда
			Возврат;
		КонецЕсли;	
		
		НЗ=РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Нз.Отбор.Объект.Установить(НоваяХарактеристика);
		Нз.Отбор.Свойство.Установить(СвВо);
		
		НоваяЗапись = НЗ.Добавить(); 
		НоваяЗапись.Объект = НоваяХарактеристика; 
		НоваяЗапись.Свойство = СвВо; 
		НоваяЗапись.Значение = Свойство.значение; 
		
		НЗ.Записать(); 
		//
		//НоваяСтрока=НоваяХарактеристика.ДополнительныеРеквизиты.Добавить();
		//НоваяСтрока.Свойство=СвВо;
		//НоваяСтрока.Значение=Свойство.значение;
		
		
		
	КонецЦикла;	
	
	
КонецПроцедуры


Процедура ЗаполнитьСпецРеквизиты(пОбъектСправочника,  пСтрокаФайла, пДзИзФайла)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории") Тогда
		пОбъектСправочника.ТоварнаяКатегория=СоздатьЭлементСправочника("ТоварныеКатегории", пСтрокаФайла["Подгруппа3"], Истина, пОбъектСправочника.ВидНоменклатуры);
	Иначе
		пОбъектСправочника.ЦеноваяГруппа=СоздатьЭлементСправочника("ЦеновыеГруппы", пСтрокаФайла["Подгруппа3"], Истина);
	КонецЕсли;
	
	Если пДзИзФайла.Колонки.найти("Бренд")<>Неопределено и ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории") Тогда
		пОбъектСправочника.Марка=СоздатьЭлементСправочника("Марки", пСтрокаФайла["Бренд"], Истина, пОбъектСправочника.Производитель);
	КонецЕсли;	
	
	Если пОбъектСправочника.Метаданные().Реквизиты.Найти("СнятоСПроизводства")<>Неопределено Тогда
		пОбъектСправочника.СнятоСПроизводства=(НРег(пСтрокаФайла.СнятоСПроизводства)="да");	
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗАполнитьПеречисления(ОбъектНом, Реквизит, пСтрокаФайла)
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектНом[Реквизит.ИМя])) Тогда 
		
		ИмяПеречисления=ОбъектНом[Реквизит.ИМя].Метаданные().Имя;
		
		
		Если Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления.Найти(пСтрокаФайла[Реквизит.ИМя])<>Неопределено Тогда
			ОбъектНом[Реквизит.ИМя]=Перечисления[ИмяПеречисления][пСтрокаФайла[Реквизит.ИМя]];
		КонецЕсли;
		
		//ОбъектНом.Пол=Перечисления.ИМ_ПолДляТовара.Унисекс;
		//ОбъектНом.Возраст=Перечисления.ИМ_ТипыВозрастов.Взрослый;
		//ОбъектНом.ТипШлема=Перечисления.ИМ_ТипыШлемов.Открытый;
		
	КонецЕсли;
КонецПроцедуры


Процедура ЗаполнитьСсылочныеРеквиизты(ОбъектНоменклатура, пСтрокаФайла, пСоздаватьНовые=Ложь)
	
	МетаданныеНом=Метаданные.Справочники.Номенклатура;
	
	Для Каждого Реквизит из МетаданныеНом.Реквизиты Цикл
		
		
		Если  пСтрокаФайла.Владелец().Колонки.Найти(Реквизит.Имя)<>Неопределено Тогда
			
			Если  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектНоменклатура[Реквизит.ИМя])) и Не ЗначениеЗаполнено(ОбъектНоменклатура[Реквизит.ИМя]) Тогда
				
				
				ИмяСправчоника=ОбъектНоменклатура[Реквизит.ИМя].Метаданные().Имя;
				
				
				ЗначениеРеквизита=СоздатьЭлементСправочника(ИмяСправчоника, пСтрокаФайла[Реквизит.ИМя], пСоздаватьНовые);  
				
				
				ОбъектНоменклатура[Реквизит.ИМя]=ЗначениеРеквизита;
				
			КонецЕсли;
			
			
			ЗаполнитьПеречисления(ОбъектНоменклатура, Реквизит ,пСтрокаФайла);
			
			
		КонецЕсли;	 
		
	КонецЦикла;	 
	
КонецПроцедуры


Функция СоздатьЭлементСправочника(ИмяСправочника, пНаименование, пСоздавать=Истина, пВладелец=Неопределено)
	
	
	ЭлСпр=Справочники[ИмяСправочника].НайтиПоНаименованию(пНаименование, Истина,,пВладелец);
	
	Если ЭлСпр.Пустая() и пСоздавать и ЗначениеЗаполнено(пНаименование) Тогда
		
		ЭлСпр=Справочники[ИмяСправочника].создатьЭлемент();
		ЭлСпр.Наименование=пНаименование;
		ЭлСпр.УстановитьновыйКод();
		Если ТипЗнч(пВладелец)=Тип("СправочникСсылка.Производители") Тогда
			ЭлСпр.производитель=пВладелец;
		ИначеЕсли ЗначениеЗаполнено(пВладелец) Тогда
			ЭлСпр.Владелец=пВладелец;
		КонецЕсли;	
		
		
		Попытка
			
			
			ЭлСпр.ЗАписать();
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
		
		Возврат ЭлСпр.Ссылка;
	Иначе
		
		Возврат ЭлСпр;
		
	КонецЕсли;	 
	
КонецФункции // СоздатьЭлементСправчоника()


Процедура ЗаполнитьСтроковыеРеквизитыНоменклатуры(пСтрокаФайла, пНоменклатураОбъект, пСтруктРеквизитов, пДополнительныхПараметры)
	
	
	Для Каждого РеквизитНоменклатуры из пСтруктРеквизитов Цикл
		
		Если пСтрокаФайла.Владелец().Колонки.Найти(РеквизитНоменклатуры.Значение)=Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если РеквизитНоменклатуры.Значение="activeinactive" Тогда
			НовоеЗначение=?(пСтрокаФайла[РеквизитНоменклатуры.Значение]="active", Истина, Ложь);
		Иначе	
			НовоеЗначение=пСтрокаФайла[РеквизитНоменклатуры.Значение];
		КонецЕсли;
		
		СообщитьОбИзменениях(РеквизитНоменклатуры, пНоменклатураОбъект, НовоеЗначение, пДополнительныхПараметры);
		
		пНоменклатураОбъект[РеквизитНоменклатуры.Ключ]=НовоеЗначение;
		
	КонецЦикла;	
	
КонецПроцедуры


Процедура СообщитьОбИзменениях(РеквизитНоменклатуры, пНоменклатураОбъект, НовоеЗначение, пСтруктДопРекв)
	
	Если пНоменклатураОбъект[РеквизитНоменклатуры.Ключ]<>НовоеЗначение Тогда
		
		ВывестиИнормацию_о_записиОбъекта(пСтруктДопРекв ,"Изменен рекивизит "+РеквизитНоменклатуры.Ключ+" номенклатуры, "+пНоменклатураОбъект+" с "+пНоменклатураОбъект[РеквизитНоменклатуры.Ключ]+" на "+ НовоеЗначение);	
		
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ЗаполнитьОбязательныеПоляНовойНоменклатуры(пОбъект,пДополнительныеРеквизитыНоменклатуры)
	//пОбъект=Справочники.Номенклатура.СоздатьЭлемент();   // Удалить  111
	
	
	пОбъект.УстановитьновыйКод();
	ЗаполнитьЗначенияСвойств(пОбъект, пДополнительныеРеквизитыНоменклатуры,,);	
	
	
	
	пОбъект.Качество=Перечисления.ГрадацииКачества.Новый;
	пОбъект.ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	пОбъект.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
	//пОбъект.ИспользованиеХарактеристик=Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	пОбъект.ИспользованиеХарактеристик=пОбъект.ВидНоменклатуры.ИспользованиеХарактеристик;
	пОбъект.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
	пОбъект.ВестиУчетПоГТД=Истина;
	пОбъект.ЕдиницаДляОтчетов=пОбъект.ЕдиницаИзмерения;
КонецПроцедуры

Процедура ЗаписьШтрихкода(пНоменклатураСсылка, пХарактеристикаСсылка=Неопределено ,пШтрихкод, пДопРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(пШтрихкод) Тогда
		Возврат;
	КонецЕсли;	
	
	
	НаборЗаписей=РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Штрихкод.установить(пШтрихкод);
	НаборЗаписей.Очистить();
	
	НоваяЗапись=НаборЗаписей.Добавить();
	НоваяЗапись.Штрихкод=пШтрихкод;
	НоваяЗапись.Номенклатура=пНоменклатураСсылка;
	Если ЗначениеЗаполнено(пХарактеристикаСсылка) Тогда
		НоваяЗапись.Характеристика=пХарактеристикаСсылка;
	КонецЕсли;
	
	//НоваяЗапись.Упаковка=пНоменклатураСсылка.ЕдиницаИзмерения;
	
	Попытка
		НаборЗаписей.записать();
		ВывестиИнормацию_о_записиОбъекта(пДопРеквизиты, "Записан ШК "+пШтрихкод+" для товара "+пНоменклатураСсылка);
	Исключение
		ТекстОшибоки= ОписаниеОшибки()+" Ошибка при попытки записи штрихкода";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибоки;
		Сообщение.УстановитьДанные(пНоменклатураСсылка);
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры



&НаСервере
Процедура ЗаписатьДополнительныйРеквизит(пЗначениеСвойства,  пВладелец,  пСвойство)
	
	Если НЕ ЗначениеЗаполнено(пЗначениеСвойства) Тогда
		Возврат;
	КонецЕсли;	
	
	НайденоСвВо=Ложь;
	
	Для Каждого СтрокаДопСвВо из пВладелец.ДополнительныеРеквизиты Цикл
		
		Если СтрокаДопСвВо.Свойство=пСвойство Тогда
			
			
			
			СтрокаДопСвВо.Значение=?(ЗначениеЗаполнено(пЗначениеСвойства), пЗначениеСвойства, СтрокаДопСвВо.Значение);
			
			НайденоСвВо=Истина;
			
			ЗаписьЖурналаРегистрации("СозданиеНоменклатурыИзЕксель.ЗаписьСвойства", УровеньЖурналаРегистрации.Информация,,,Строка(СтрокаДопСвВо.Свойство)+" # "+Строка(СтрокаДопСвВо.Значение));
			
			Возврат;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	
	Если Не НайденоСвВо Тогда
		
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "Свойство будет добавлено в табл. часть "+пВладелец+" "+строка(пСвойство);
		//Сообщение.Сообщить();
		
		НоваяСтрока=пВладелец.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство=пСвойство;
		НоваяСтрока.Значение=пЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаписатьДополнительныеРеквизиты(пНоменклатура , пТзСвойствДопРеквизитов, СтрокаТзФайла)
	
	ТзСвойствДляВидаНоменклатуры=пТзСвойствДопРеквизитов.Скопировать(Новый Структура("ВидНоменклатуры", СтрокаТзФайла.ВидНоменклатуры));
	
	Для Каждого СтрокаДопРеквизит из  ТзСвойствДляВидаНоменклатуры Цикл
		
		ИмяКолонкиФайла= мфСоотвНаименованийПолйФайла_СвойствПВХ.Получить(СтрокаДопРеквизит.Наименование);
		СоздаватьНовыеЭлементы=Истина;
		Если ИмяКолонкиФайла=Неопределено Тогда
			//Продолжить;
			ИмяКолонкиФайла=СтрокаДопРеквизит.Наименование;
			СоздаватьНовыеЭлементы=Ложь;
		КонецЕсли;	
		
		ИмяКолонкиТз=ПолучитьИмяКолонкиТзПоЗаголовку(СтрокаТзФайла.Владелец(), ИмяКолонкиФайла);
		
		ИмяКолонкиТз=?(ИмяКолонкиТз=Неопределено, ИмяКолонкиФайла, ИмяКолонкиТз);
		
		
		Если СтрокаТзФайла.Владелец().Колонки.Найти(СокрЛП(ИмяКолонкиТз))<>Неопределено Тогда
			
			СоздаватьНовыеЭлементы=мфСоотвКолонокЗапрещеноДобавлениеЗначение.Получить(ИмяКолонкиФайла)=Неопределено;
			
			Если СтрокаДопРеквизит.Ссылка.ТипЗначения=Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				//ТзЗначений=ЗаполнитьТзЗначенийСвойств(СтрокаДопРеквизит.Ссылка);
				ЗначениеСвойства= НайтиЗначениеСвойстваПоНаименованию(СтрокаТзФайла[ИмяКолонкиТз],  СтрокаДопРеквизит.Ссылка, СоздаватьНовыеЭлементы);
			Иначе
				ЗначениеСвойства=СтрокаТзФайла[ИмяКолонкиТз];
			КонецЕсли;
			
			ЗаписатьДополнительныйРеквизит(ЗначениеСвойства, пНоменклатура, СтрокаДопРеквизит.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры



Функция ПолучитьИмяКолонкиТзПоЗаголовку(пТз, пЗаголовок)
    МассивЗаголовков=Новый Массив;
	
	Если ТипЗнч(пЗаголовок)=Тип("Массив") Тогда
		МассивЗаголовков=  пЗаголовок;
	Иначе
		МассивЗаголовков.Добавить(пЗаголовок);
	КонецЕсли;	
	
	
	Для Каждого Заголовок из МассивЗаголовков Цикл
		Для Каждого Колонка из пТз.Колонки Цикл
			Если Нрег(Колонка.Заголовок)=НРег(Заголовок) Тогда
				пЗаголовок=Заголовок;
				Возврат Колонка.Имя;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
	пЗаголовок= МассивЗаголовков[0];
	
	Возврат Неопределено;

КонецФункции // ЕстьКолонкаТзПоЗаголовку()




// загрузка ///////////////////////////////////////////



// Чтение из файла//////////////////////////////////

&НаСервере
Процедура ОбработкаТаблицыФайла(пТзИзФайла, ДопПараметры, Отказ=Ложь)
	
	
	
	ИмяРеквизитаДляПоискаНоменклатуры=?(ПоискНоменклатуры="Артикул","АртикулОбщий",ПоискНоменклатуры);
	
	//ИмяКолонкиФайлаДляПоискаНоменклатуры=ПоискНоменклатуры;
	ИмяКолонкиФайлаДляПоискаХарактеристики=?(ПоискНоменклатуры="Штрихкод", "Штрихкод", "АртикулSKU");
	
	Если ПоискНоменклатуры="GUID" Тогда
		ИмяРеквизитаДляПоискаНоменклатуры="НоменклатураСсылка";
		ИмяКолонкиФайлаДляПоискаХарактеристики="ХарактеристикаСсылка"; 
	КонецЕсли;	 
	
	//ИменоватьКолонкиТз(пТзИзФайла, пКолонкаКоличество, пКолонкаЦены);
	КолСтрокТз=пТзИзФайла.Количество()-1;
	
	Для i=0 по КолСтрокТз Цикл
		ТексСтрокаТз=пТзИзФайла[КолСтрокТз-i];
		
		НомерСтрокиФайла=КолСтрокТз-i+2;
		
		Если НЕ ЗначениеЗаполнено(ТексСтрокаТз[ИмяКолонкиФайлаДляПоискаХарактеристики])    Тогда
			//или	 Не ((НомерСтрокиФайла)>=НачальнаяСтрока и (НомерСтрокиФайла)<=КонечнаяСтрока) 			 Тогда
			пТзИзФайла.Удалить(ТексСтрокаТз);
			СообщитьСерв("В строке "+Строка(КолСтрокТз-i)+" не заполнено поле поиска "+ИмяКолонкиФайлаДляПоискаХарактеристики, ЭтаФорма);
		Иначе
			//ТексСтрокаТз[ИмяКолонкиФайлаДляПоискаНоменклатуры]=СтрЗаменить(ТексСтрокаТз[ИмяКолонкиФайлаДляПоискаНоменклатуры],"POL",""); 
		КонецЕсли;	 
		
		
	КонецЦикла;	 
	
	СвернутьКолонки(пТзИзФайла);
	
	
	Если ПоискНоменклатуры<>"GUID" Тогда
		
		// Добавив номенклатур с характеристиками
		ДобавитьКолонкуНоменклатура_в_ТзФайла(пТзИзФайла, НайтиСсылкуПо_Критерию(пТзИзФайла ,ИмяКолонкиФайлаДляПоискаХарактеристики, Отказ),  ИмяКолонкиФайлаДляПоискаХарактеристики, Истина);
		
		//добавим номенклатуру без характеристик
		Если Нрег(ПоискНоменклатуры)<>"штрихкод" Тогда
			ДобавитьКолонку_в_ТзФайла(пТзИзФайла, НайтиСсылкуПоРеквизиту(пТзИзФайла, "Номенклатура", ИмяРеквизитаДляПоискаНоменклатуры, ПоискНоменклатуры , Отказ), ИмяРеквизитаДляПоискаНоменклатуры, "Номенклатура", Ложь,
			Отказ);
		КонецЕсли;
		
		ДополнительноеУсловиеЗАпроса=" ГДЕ Номенклатура.ПометкаУдаления = Ложь ";
	Иначе
		НайтиНоменклатуруХарактеристику_ПоСсылкам(пТзИзФайла, Отказ);
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ПроверкаНаличияДублейТз(пТз, пСтрИменаПроверяемыхКолонок, пИмяПроверочнойКолонки="", Отказ=Ложь)
	
	КопияТз=пТЗ.Скопировать();
	
	пИмяПроверочнойКолонки=?(ЗначениеЗаполнено(пИмяПроверочнойКолонки), пИмяПроверочнойКолонки, "Дубль");
	
	МассивИменКолонок=СтрРазделить(пСтрИменаПроверяемыхКолонок, ",");
	
	Если МассивИменКолонок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ЭлМассива из МассивИменКолонок Цикл
		Если КопияТз.Колонки.Найти(СокрЛП(ЭлМассива))=Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	ДобавитКолонкуТз(КопияТз, пИмяПроверочнойКолонки);
	КопияТз.ЗаполнитьЗначения(1, пИмяПроверочнойКолонки);
	
	КопияТз.Свернуть(пСтрИменаПроверяемыхКолонок, пИмяПроверочнойКолонки);
	
	Для Каждого СтрокаТз из КопияТз Цикл
		
		Если СтрокаТз[пИмяПроверочнойКолонки]>1  Тогда
			
			СообщитьСерв("В колонках "+пСтрИменаПроверяемыхКолонок+" поиска есть дубли "+СтрокаТз[МассивИменКолонок[0]], ЭтаФорма);
			Отказ=Истина;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
КонецПроцедуры


Процедура НайтиНоменклатуруХарактеристику_ПоСсылкам(пТзИзФайла, Отказ)
	
	ИмяКолонкиНоменклатураСсылка="НоменклатураСсылка";
	ИмяКолонкиХарактеристикаСсылка="ХарактеристикаСсылка";
	
	ДобавитКолонкуТз(пТзИзФайла, "Номенклатура");
	ДобавитКолонкуТз(пТзИзФайла, "Характеристика");
	
	Если пТзИзФайла.Колонки.Найти(ИмяКолонкиНоменклатураСсылка)=Неопределено или
		пТзИзФайла.Колонки.Найти(ИмяКолонкиХарактеристикаСсылка)=Неопределено  Тогда
		Возврат;
	КонецЕсли;	
	
	
	Для Каждого СтрокаТз из пТзИзФайла Цикл
		
		НайтиНоменклатуруХарактеристику_ПоСсылкамФрагмент(ИмяКолонкиНоменклатураСсылка, СтрокаТз, "Номенклатура", Отказ);
		НайтиНоменклатуруХарактеристику_ПоСсылкамФрагмент(ИмяКолонкиХарактеристикаСсылка, СтрокаТз, "Характеристика", Отказ);
		
		Если (ЗначениеЗаполнено(СтрокаТз.Номенклатура) и ТипЗнч(СтрокаТз.Номенклатура)<>Тип("СправочникСсылка.Номенклатура"))
			или (ЗначениеЗаполнено(СтрокаТз.Характеристика) и ТипЗнч(СтрокаТз.Характеристика)<>Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) 	Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Колонки внутреннее представление некорректно заполнены, загрузка невозможна, проверьте правильность
			| копирования значений";
			Сообщение.Сообщить();
			Отказ=Истина;
		КонецЕсли;	
		
		
		
	КонецЦикла;	
	
	
	
КонецПроцедуры

Процедура НайтиНоменклатуруХарактеристику_ПоСсылкамФрагмент(ИмяКолонкиНоменклатураСсылка, СтрокаТз, пИмяКолонкиТз, Отказ)
	
	
	Если  ЗначениеЗаполнено(СтрокаТз[ИмяКолонкиНоменклатураСсылка]) Тогда
		Попытка
			//СтрокаТз[пИмяКолонкиТз]=ЗначениеИзСтрокиВнутр(СтрокаТз[ИмяКолонкиНоменклатураСсылка]);
			СтрокаТз[пИмяКолонкиТз]=ЗначениеИзСтрокиXML(СтрокаТз[ИмяКолонкиНоменклатураСсылка]);
			
			Если СтрокаТз[пИмяКолонкиТз].ПолучитьОбъект()=Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В колонках внутреннее представление содержатся битые ссылка, загрузка невозможна "+Строка(СтрокаТз[ИмяКолонкиНоменклатураСсылка]);
				Сообщение.Сообщить();
				Отказ=Истина;
			КонецЕсли;	
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В колонках внутреннее представление содержатся ошибки, загрузка невозможна "+ОписаниеОшибки();
			Сообщение.Сообщить();
			Отказ=Истина;

			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьТзСсылокПоСтаромуАртикулу()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_СоотвНоменклатураХарактеристика.НоваяНоменклатура КАК Ссылка,
	|	_СоотвНоменклатураХарактеристика.Характеристика,
	|	_СоотвНоменклатураХарактеристика.Номенклатура.Артикул КАК ЗначениеПоиска
	|ИЗ
	|	РегистрСведений._СоотвНоменклатураХарактеристика КАК _СоотвНоменклатураХарактеристика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Тз = РезультатЗапроса.Выгрузить();
	
	Возврат Тз;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции // ПолучитьТзСсылокПоСтаромуАртикулу()


&НаСервере
Процедура СвернутьКолонки(Знач пТзИзФайла, пИмяСуммируемойКолонки="")
	
	Если НЕ ЗначениеЗаполнено(пИмяСуммируемойКолонки) Тогда
		Возврат;
	КонецЕсли;	
	
	СтрСворачиваемыхКолонок="";
	Для Каждого Колонка Из пТзИзФайла.Колонки Цикл
		Если Колонка.Имя<>"Количество" и ЗначениеЗаполнено(Колонка.Имя) Тогда
			СтрСворачиваемыхКолонок=СтрСворачиваемыхКолонок+ Колонка.Имя+",";
		КонецЕсли;
	КонецЦикла;
	СтрСворачиваемыхКолонок=Лев(СтрСворачиваемыхКолонок, СтрДлина(СтрСворачиваемыхКолонок)-1);
	
	пТзИзФайла.Свернуть(СтрСворачиваемыхКолонок, "Количество");
	
КонецПроцедуры



Процедура ДобавитьКолонкуНоменклатура_в_ТзФайла(пТзИзФайла, пТзСсылок, пИмяКолонкиФайлаДляПоискаНоменклатуры, пСообщать_о_Дублях=Ложь, Отказ=Ложь)
	
	Если  пТзИзФайла.Колонки.Найти("Номенклатура")=Неопределено Тогда
		пТзИзФайла.Колонки.Добавить("Номенклатура");
	КонецЕсли;
	
	Если  пТзИзФайла.Колонки.Найти("Характеристика")=Неопределено Тогда
		пТзИзФайла.Колонки.Добавить("Характеристика");
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из пТзИзФайла Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрокаТзСсылок=НайтиСтрокуТз(Отказ, пИмяКолонкиФайлаДляПоискаНоменклатуры, пСообщать_о_Дублях, пТзСсылок, СтрокаТЗ);
		
		Если  СтрокаТзСсылок<>Неопределено Тогда
			
			СтрокаТЗ.Номенклатура= СтрокаТзСсылок.Ссылка;
			СтрокаТЗ.Характеристика=СтрокаТзСсылок.Характеристика;
			//СнятьПометкуУдаления(СтрокаТЗ.Номенклатура)
			
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры






Функция НайтиСсылкуПо_Критерию(пТзЗначенийПолейДляПоиска,пКритерийПоиска ,  Отказ)  Экспорт 
	
	
	Запрос=Новый Запрос;
	
	Отбор=Новый Структура("Ссылка",Null);
	
	
	//  проверка наименований товаров---------------------------------------
	Запрос.Текст=ПолучитьЗапросДляПоискаНоменклатурыХарактеристики(пКритерийПоиска);
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",пТзЗначенийПолейДляПоиска);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("СвойствоАртикул", ПолучитьСвВо(мфСтрукКонстант.НаименованиеСвойстваАртикул,  мфСтрукКонстант.ТзСвойствХарактеристик));
	
	
	Тз=Запрос.Выполнить().Выгрузить();
	Тз.Индексы.Добавить("ЗначениеПоиска");
	
	Если Тз.Количество()=0 Тогда
		Сообщение="Не найден ни один элемент из справочника по критерию поиска "+пКритерийПоиска;
		СообщитьСерв(Сообщение, ЭтаФорма);
		//Отказ=Истина;
	КонецЕсли;  
	
	
	МассивОшибок=Тз.НайтиСтроки(Отбор);
	
	
	Для Каждого Элемент ИЗ МассивОшибок Цикл
		//Сообщение="Не найдено элемент в справочнике "+пИмяСправочника+" "+Элемент.ЗначениеПоиска;
		//СообщитьСерв(Сообщение, ЭтаФорма);
		Тз.Удалить(Элемент);
		//Отказ=Истина;
	КонецЦикла;  
	
	
	Возврат Тз;
	
	
КонецФункции // НайтиНоменклатураПоНаименованию()


Функция ПолучитьЗапросДляПоискаНоменклатурыХарактеристики(пКритерийПоиска)
	
	Если пКритерийПоиска="АртикулSKU" Тогда
		ТекстЗапроса="ВЫБРАТЬ
		|	ВнешнийИсточник.АртикулSKU КАК АртикулSKU
		|ПОМЕСТИТЬ ВнешнийИсточник
		|ИЗ
		|	&ВнешнийИсточник КАК ВнешнийИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнешнийИсточник.АртикулSKU КАК ЗначениеПоиска,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Ссылка КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ДополнительныеСведения.Ссылка.Владелец КАК Ссылка
		|ИЗ
		|	ВнешнийИсточник КАК ВнешнийИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеСведения
		|		ПО ВнешнийИсточник.АртикулSKU = ДополнительныеСведения.Значение
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СвойствоАртикул
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВнешнийИсточник";
	Иначе
		ТекстЗапроса="ВЫБРАТЬ
		|	ВнешнийИсточник.Штрихкод
		|ПОМЕСТИТЬ ВнешнийИсточник
		|ИЗ
		|	&ВнешнийИсточник КАК ВнешнийИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РС_ШК.Номенклатура КАК Ссылка,
		|	ВнешнийИсточник.Штрихкод КАК ЗначениеПоиска,
		|	РС_ШК.Характеристика
		|ИЗ
		|	ВнешнийИсточник КАК ВнешнийИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК РС_ШК
		|		ПО ВнешнийИсточник.Штрихкод = РС_ШК.Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВнешнийИсточник";
		
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьЗапросДляПоискаНоменклатурыХарактеристики()



Функция ПолучитьТзХарактеристик()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	НаимСвВаПоиска="Артикул (Одежда с характеристиками (Для характеристик))";
	
	ПВХ=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаимСвВаПоиска);
	
	Если Пвх.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдено св-во хар-ки "+НаимСвВаПоиска;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ДополнительныеСведения.Значение КАК ЗначениеПоиска
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ДополнительныеСведения.Объект
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &ВыбСвойство";
	
	
	Запрос.УстановитьПараметр("ВыбСвойство", );	
	
	Возврат  Запрос.Выполнить().Выгрузить();
	
	
	
КонецФункции // ПолучитьТзХарактеристик()



&НаСервере
Процедура ИменоватьКолонкиТз(пТзИзФайла,  пКолонкаКоличество=0, пКолонкаЦены=0)
	
	Для Каждого КолонкаТз из пТзИзФайла.Колонки Цикл
		
		Попытка
			
			пТзИзФайла.Колонки[КолонкаТз.имя].Имя=КорректировкаНаименования(пТзИзФайла[0][КолонкаТз.имя], Ложь);
			//пТзИзФайла.Колонки[КолонкаТз.имя].Имя=пТзИзФайла[0][КолонкаТз.имя];
			Если ЗначениеЗаполнено(КолонкаТз.имя) Тогда
				пТзИзФайла.Колонки[КолонкаТз.имя].Заголовок=пТзИзФайла[0][КолонкаТз.имя];
			КонецЕсли;
		Исключение
			
			пТзИзФайла.Колонки[КолонкаТз.имя].Заголовок=КорректировкаНаименования(пТзИзФайла[0][КолонкаТз.имя], Ложь);
			
		КонецПопытки;
		
		
	КонецЦикла;	
	
	
	//Если ЗначениеЗаполнено(пКолонкаКоличество) Тогда
	//	пТзИзФайла.Колонки[пКолонкаКоличество-1].Имя="Количество"
	//КонецЕсли;	
	//
	//Если ЗначениеЗаполнено(пКолонкаЦены) Тогда
	//	пТзИзФайла.Колонки[пКолонкаЦены-1].Имя="Цена"
	//КонецЕсли;	
	
	
	пТзИзФайла.Удалить(пТзИзФайла[0]);
	
	//КоличествоСтрок=пТзИзФайла.количество()-1;
	//
	//Для i=0 По КоличествоСтрок Цикл
	//
	//	Если НЕ ЗначениеЗаполнено(пТзИзФайла[КоличествоСтрок-i].Наименование) Тогда
	//		  пТзИзФайла.Удалить(пТзИзФайла[КоличествоСтрок-i]);
	//	КонецЕсли;	
	//
	//КонецЦикла; 
	
КонецПроцедуры



Процедура ДобавитьКолонку_в_ТзФайла(пТзИзФайла, пТзСсылок, пИмяКолонкиПоиска_в_файле, пИмяДобавляемойКолонки, пСообщать_о_дублях=Ложь, Отказ=Ложь)
	
	
	Если  пТзИзФайла.Колонки.Найти(пИмяДобавляемойКолонки)=Неопределено Тогда
		пТзИзФайла.Колонки.Добавить(пИмяДобавляемойКолонки);
	КонецЕсли;
	
	
	
	Для каждого СтрокаТЗ Из пТзИзФайла Цикл
		
		
		СтрокаТзСсылок = НайтиСтрокуТз(Отказ, пИмяКолонкиПоиска_в_файле, пСообщать_о_дублях, пТзСсылок, СтрокаТЗ);
		
		
		Если  СтрокаТзСсылок<>Неопределено Тогда
			
			СтрокаТЗ[пИмяДобавляемойКолонки]= СтрокаТзСсылок.Ссылка;
			
		Иначе
			ЗаписьЖурналаРегистрации("СозданиеНоменклатурыИзЕксель", УровеньЖурналаРегистрации.Информация,,,"Не найдена номенклатура по ключу "+СтрокаТЗ[пИмяКолонкиПоиска_в_файле]);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуТз(Отказ, пИмяКолонкиПоиска_в_файле, пСообщать_о_дублях, пТзСсылок,  СтрокаТЗ)
	
	
	МассивСтрокТз=пТзСсылок.НайтиСтроки(Новый Структура("ЗначениеПоиска", СтрокаТЗ[пИмяКолонкиПоиска_в_файле]));
	
	Если МассивСтрокТз.Количество()>1  Тогда
		СтрокаТзСсылок=МассивСтрокТз[0];
		Если пСообщать_о_дублях Тогда
			СообщитьСерв("По критерию поиска "+ пИмяКолонкиПоиска_в_файле+" для значения "+СтрокаТЗ[пИмяКолонкиПоиска_в_файле]+" найдено больше одного элемента, используйте уникальный 
			| критерий для поиска", ЭтаФорма);
			Отказ=Истина;
		КонецЕсли;	
	ИначеЕсли   МассивСтрокТз.Количество()=1 Тогда
		СтрокаТзСсылок=МассивСтрокТз[0];
	Иначе
		СтрокаТзСсылок=Неопределено;
	КонецЕсли;
	
	Возврат СтрокаТзСсылок;
	
КонецФункции


Процедура СнятьПометкуУдаления(пНоменклатураСсылка)
	//пНоменклатураСсылка=Справочники.Номенклатура.ПустаяСсылка();
	
	Если пНоменклатураСсылка.ПометкаУдаления Тогда
		ОбъектНоменклатура=пНоменклатураСсылка.получитьобъект();
		ОбъектНоменклатура.ПометкаУдаления=Ложь;
		ОбъектНоменклатура.Записать();
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции // НайтиСтрокуТабЧасти()


&НаСервере
// Ф-ия возращает Тз с колонками:
// Ссылка - спр. ,
// ЗначениеПоиска - строка - значение по которому ищем в спр-ке
// Параметры: 
// пТзЗначенийПолейДляПоиска Тз - с колонками пИмяПоляДляПоиска, список значений по которому ищмем в спр-ке 
// пИмяСправочника - строка - Имя таблицы справочника, в котором ищем  
// пИмяПоляДляПоиска - строка - имя колонки в  пТзЗначенийПолейДляПоиска по которой ищем
// пИмяРеквизита - строк - имя реквизита в справочнике с которым сраниваем значение из колонки ТЗ  пИмяПоляДляПоиска
Функция НайтиСсылкуПоРеквизиту(пТзЗначенийПолейДляПоиска, пИмяСправочника, пИмяПоляДляПоиска , пИмяРеквизита, Отказ, пДопУсловиеЗапроса="", ВыдаватьОшибки=Ложь)  Экспорт 
	
	
	Запрос=Новый Запрос;
	
	Отбор=Новый Структура("Ссылка",Null);
	
	
	//  проверка наименований товаров---------------------------------------
	Запрос.Текст="ВЫБРАТЬ
	|	ВнешнийИсточник."+пИмяПоляДляПоиска+"
	|ПОМЕСТИТЬ ВнешнийИсточник
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	//|ГДЕ
	//|	ВнешнийИсточник.Наименование <> &ПустаяСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ВнешнийИсточник."+пИмяПоляДляПоиска+" как ЗначениеПоиска 
	|ИЗ
	|	ВнешнийИсточник КАК ВнешнийИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник."+пИмяСправочника+" КАК Номенклатура
	|		ПО (ВнешнийИсточник."+пИмяПоляДляПоиска+" = Номенклатура."+пИмяРеквизита+")
	| "+?(ЗначениеЗаполнено(пДопУсловиеЗапроса), пДопУсловиеЗапроса, "")+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВнешнийИсточник";
	
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",пТзЗначенийПолейДляПоиска);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	Тз=Запрос.Выполнить().Выгрузить();
	Тз.Индексы.Добавить("ЗначениеПоиска");
	
	СообщениеОШибках="Не найден ни один элемент из справочника "+пИмяСправочника+" по колонке поиска "+пИмяПоляДляПоиска;
	
	Если Тз.Количество()=0 Тогда
		Сообщение=СообщениеОШибках;
		СообщитьСерв(Сообщение, ЭтаФорма);
		Отказ=ВыдаватьОшибки;
	КонецЕсли;  
	
	
	МассивОшибок=Тз.НайтиСтроки(Отбор);
	
	
	
	Для Каждого Элемент ИЗ МассивОшибок Цикл
		Сообщение="Не найден элемент в справочнике "+пИмяСправочника+" "+Элемент.ЗначениеПоиска;
		СообщитьСерв(Сообщение, ЭтаФорма);
		Тз.Удалить(Элемент);
		Отказ=ВыдаватьОшибки;
	КонецЦикла;  
	
	
	Возврат Тз;
	
	
КонецФункции // НайтиНоменклатураПоНаименованию()



&НаСервере
Функция ПолучитьТзРодителей(пТзЗначенийПолейДляПоиска,пКорневойРодитель, Отказ)  Экспорт 
	
	
	Запрос=Новый Запрос;
	
	Отбор=Новый Структура("Ссылка",Null);
	
	
	//  проверка наименований товаров---------------------------------------
	Запрос.Текст="ВЫБРАТЬ
	|	ВнешнийИсточник.structure_EN
	|ПОМЕСТИТЬ ВнешнийИсточник
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешнийИсточник.structure_EN КАК ЗначениеПоиска,
	|	Номенклатура.Родитель КАК Ссылка
	|ИЗ
	|	ВнешнийИсточник КАК ВнешнийИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ВнешнийИсточник.structure_EN ПОДОБНО Номенклатура.Структура)
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ПапкаНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВнешнийИсточник";
	
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",пТзЗначенийПолейДляПоиска);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ПапкаНоменклатуры",пКорневойРодитель);
	
	Тз=Запрос.Выполнить().Выгрузить();
	
	
	
	Если Тз.Количество()=0 Тогда
		Сообщение="Не найден ни один элемент из справочника, для поиска родителя";
		СообщитьСерв(Сообщение, ЭтаФорма);
		Отказ=Истина;
	КонецЕсли;  
	
	
	МассивОшибок=Тз.НайтиСтроки(Отбор);
	
	
	Для Каждого Элемент ИЗ МассивОшибок Цикл
		Сообщение="Не найдено элемент в справочнике, для поиска родителя +"+Элемент.ЗначениеПоиска;
		СообщитьСерв(Сообщение, ЭтаФорма);
		Тз.Удалить(Элемент);
		Отказ=Истина;
	КонецЦикла;  
	
	
	Возврат Тз;
	
	
КонецФункции // НайтиНоменклатураПоНаименованию()



&НаСервере
Функция КорректировкаНаименования(Знач ИсходнаяСтрока, Выводитьсообщения=Истина) Экспорт 
	
	ИсходнаяСтрока=СтрЗаменить(ИсходнаяСтрока,"Характеристиканоменклатуры.","");
	ИсходнаяСтрока=СтрЗаменить(ИсходнаяСтрока,"Номенклатура.","");
	
	Наименование=СокрЛП(ИсходнаяСтрока);	
	ДлиннаНаим=СтрДлина(Наименование);
	СписокЗаменяемыхимволов=новый СписокЗначений;
	
	Если ДлиннаНаим=0 Тогда
		Сообщение="Не  заполнена проверяемая строка!";
		#Если Клиент Тогда
			Если Выводитьсообщения Тогда
				Сообщить(Сообщение);
			КонецЕсли;
		#КонецЕсли	
		
	КонецЕсли; 
	Для i=0 По  ДлиннаНаим-1 Цикл  
		Стр=Прав(Наименование,ДлиннаНаим-i);  
		
		Если КодСимвола(Стр)=95 Тогда    // _
			Продолжить;
		КонецЕсли;
		
		//             руск.  алф. 192- 255                       англ. алф. мал. 65-90                англ. алф. бол. 97-122                                 пробел=32                           цифры АSCI дес.
		Если (((КодСимвола(Стр)>1039)и(КодСимвола(Стр)<1106))ИЛИ((КодСимвола(Стр)>64)и(КодСимвола(Стр)<94))ИЛи((КодСимвола(Стр)>96)и(КодСимвола(Стр)<123))или ((КодСимвола(Стр)>47)и(КодСимвола(Стр)<58)) и (КодСимвола(Стр)<>32)) Тогда
		Иначе
			СписокЗаменяемыхимволов.Добавить(Лев(Стр,1));
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	Для каждого ЭлементСписка Из СписокЗаменяемыхимволов Цикл
		Если ЭлементСписка.Значение=" " Тогда
			Наименование=СтрЗаменить(Наименование,ЭлементСписка.Значение,"");
			Сообщение="В наименование колонки "+ИсходнаяСтрока+" встречается недопустимый символ (пробел) "+ЭлементСписка.Значение+", он будет заменен на '_'";
			#Если Клиент Тогда
				Если Выводитьсообщения Тогда
					Сообщить(Сообщение);
				КонецЕсли;
			#КонецЕсли	
		Иначе
			Наименование=СтрЗаменить(Наименование,ЭлементСписка.Значение,"");	
			Сообщение="В наименование колонки "+ИсходнаяСтрока+" встречается недопустимый символ "+ЭлементСписка.Значение+", он будет удален";
			#Если Клиент Тогда
				Если Выводитьсообщения Тогда
					Сообщить(Сообщение);
				КонецЕсли;
			#КонецЕсли	
		КонецЕсли
	КонецЦикла;
	
	// Если первый символ число заменим его на "_", чтобы выполнялись требования к идентификаторам
	КодПервогоСимвола=КодСимвола(ЛЕв(Наименование,1));
	Наименование=?((КодПервогоСимвола>47)и(КодПервогоСимвола<58),"_"+Прав(Наименование,ДлиннаНаим-1),Наименование);
	
	
	Возврат Наименование;	
КонецФункции


&НаСервере
Функция СчитатьЛистЕксельВТЗ(ИмяФайла,Знач НомерЛиста=1,ВыводитьСообщения=Истина) Экспорт 
	Тз = Новый ТаблицаЗначений;
	Попытка
		Excel     = Новый COMОбъект("Excel.Application");
		Excel.DisplayAlerts = False;
		WB         = Excel.Workbooks.Open(ИмяФайла);
		WS         = WB.Worksheets(НомерЛиста);
		arr     = WS.UsedRange.Value;
		WB.Close(0);
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Внимание! Файл не открыт."+Символы.ПС+"Попробуйте открыть и пересохранить данный файл программой Эксель.";
		Сообщение.Сообщить();
		
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		МассивКолонок = arr.Выгрузить();
	Исключение
		#Если Клиент Тогда
			Предупреждение("Возникли проблемы при считывании данных с листа "+НомерЛиста+", проверьте заполнен ли это лист"+Символы.ПС+"          (на листе должно быть несколько значений).",15);
		#КонецЕсли
		Возврат Неопределено;
	КонецПопытки;
	
	СчетчикКолонок=0;	   
	Для Каждого Колонка из МассивКолонок Цикл 
		СчетчикСтрок=0;
		Для Каждого Строка из Колонка Цикл 
			Если СчетчикСтрок=0 тогда
				НаименованиеКолонки=КорректировкаНаименования(строка,ВыводитьСообщения);
				//НаименованиеКолонки=СокрЛП(Строка);
				ТЗ.Колонки.Добавить(НаименованиеКолонки, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)) ,строка,СтрДлина(НаименованиеКолонки)+5);
				СчетчикСтрок=СчетчикСтрок+1;
				Продолжить;
			КонецЕсли;
			Если СчетчикКолонок=0 тогда
				НоваяСтрока=ТЗ.Добавить();
			КонецЕсли;	
			ТЗ[СчетчикСтрок-1][СчетчикКолонок]=Строка;
			СчетчикСтрок=СчетчикСтрок+1;
		КонецЦикла;
		СчетчикКолонок=СчетчикКолонок+1;
	КонецЦикла;
	
	Попытка
		
		Excel.Quit();
		Excel.DisplayAlerts=-1;
		Excel=Неопределено;
		
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка закрытия файла "+ИмяФайла;
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	
	Возврат ТЗ;
	
КонецФункции	

// Чтение из файла ///////////////////////////////////


&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции


&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;
	
КонецФункции

//////////// Обработчки элементов формы  ///////////////////////////////////////


// выбор файла
&НаКлиенте
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр     = "Файл данных xlsx (*.xlsx)";
	ДиалогВыбора.Расширение = "xlsx";
	
	ДиалогВыбора.Заголовок ="Выберите файл для загрузки данных ";
	
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	//ДиалогВыбора.ПолноеИмяФайла				=	Элемент.Значение;
	
	
	Если ДиалогВыбора.Выбрать() Тогда
		//Элемент = ДиалогВыбора.ПолноеИмяФайла;
		ИмяФайла= ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;			
	
	
	
КонецПроцедуры // ВыборФойла()

&НаКлиенте
Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ЗапуститьПриложение(ИмяФайла);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ВыборФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ВыборФайла(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ВыборКаталога(Элемент);
КонецПроцедуры


// выбор файла
&НаКлиенте
Процедура ВыборКаталога(Элемент, ПроверятьСуществование=Ложь)
	
	
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	
	ДиалогВыбора.Заголовок ="Выберите каталог с изображениями для загрузки данных ";
	
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогЛога= ДиалогВыбора.Каталог;
	КонецЕсли;			
	
	
	
КонецПроцедуры // ВыборФойла()



&НаКлиенте
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ВыборКаталога(Элемент);
	
КонецПроцедуры


// выбор файла



//////////// Обработчки элементов формы  ///////////////////////////////////////

///Вспомогательные ф-ии/////////////////////////

&НаСервере
Процедура СообщитьСерв(пСтрокаСообщения, пОбъект)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = пСтрокаСообщения;
	Сообщение.УстановитьДанные(пОбъект);
	Сообщение.Сообщить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//  //Вставить содержимое обработчика
	//   Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = Строка(ВладелецФормы.Объект.Дата);
	////Сообщение.Поле = "";
	//Сообщение.УстановитьДанные(ЭтаФорма);
	//Сообщение.Сообщить();
	//Документ=ВладелецФормы.Объект;
КонецПроцедуры


Процедура ВывестиШапкуМакетаОшибок(пТабДок, пМакет)
	
	пТабДок.Очистить();
	ШапкаОш = пМакет.ПолучитьОбласть("Шапка");
	КепкаОш = пМакет.ПолучитьОбласть("КепкаОшибок");
	пТабДок.Вывести(ШапкаОш);
	пТабДок.Вывести(КепкаОш);
	
	
КонецПроцедуры


Процедура ВывестиИнормацию_о_записиОбъекта(пСтруктМакет, текстСообщения, пСОбъект=Неопределено)
	
	ТабДок=пСтруктМакет.ТабДок;
	Макет=пСтруктМакет.Макет;
	
	
	СтрокаОш = Макет.ПолучитьОбласть("Записан");
	СтрокаОш.Параметры.ИнфОЗаписи =  текстСообщения;
	Попытка
		СтрокаОш.Параметры.СсылкаНаСпр=пСОбъект.ссылка;
	Исключение
	КонецПопытки;
	ТабДок.Вывести(СтрокаОш);
	
	
КонецПроцедуры

Процедура ВывестиИнормацию_о_Ошибке(пСтруктМакет, Элемент)
	
	ТабДок=пСтруктМакет.ТабДок;
	Макет=пСтруктМакет.Макет;
	
	СтрокаОш = Макет.ПолучитьОбласть("СтрокаОшибок");
	СтрокаОш.Параметры.Ошибка =  ОписаниеОшибки();
	СтрокаОш.Параметры.Элемент=Элемент;
	ТабДок.Вывести(СтрокаОш);
	
	
	
КонецПроцедуры // ()


///Вспомогательные ф-ии/////////////////////////

#Область СКД

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоискНоменклатуры="Артикул";
	//Инициализация();
	
	ОО = РеквизитФормыВЗначение("Объект"); //Для внешних обработок реквизиты получаем так
	СКД = ОО.ПолучитьМакет("Макет");
	URLСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	ЭтотОбъект.ОтборНоменклатуры.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСКД));
	//ОО.ОтборНоменклатуры.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСКД));
	
	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
	ЭтотОбъект.ОтборНоменклатуры.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	//ОО.ОтборНоменклатуры.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	
	ЗначениеВРеквизитФормы(ОО, "Объект"); //Для внешних обработок реквизиты сохраняем так
	
	
	
КонецПроцедуры


Функция СкомпоноватьВТаблицуЗначений(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт
	//Запускаем компоновку
	
	УстановитьПараметрыСКД(КомпоновщикНастроек);
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//Создаем процессор компоновки
	
	//Запись = Новый ЗаписьXML;        
	//Запись.ОткрытьФайл("C:\Users\User\Documents\Макет.xml");
	//СериализаторXDTO.ЗаписатьXML(Запись, МакетКомпоновки);
	//Запись.Закрыть();
	//Сообщить("Записан макет");

	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки, истина);
	
	Возврат ТЗ;
КонецФункции


Процедура УстановитьПараметрыСКД(Знач КомпоновщикНастроек)
	
	
	Настройки = КомпоновщикНастроек.Настройки;    
	
	
	НайтиСвойства();
	
	
	
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "АртикулSKU", мфСтрукКонстант.СвойствоАртикулSKU);
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "СвойствоРазмер", мфСтрукКонстант.СвойствоРазмер);
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "СвойствоЦвет", мфСтрукКонстант.СвойствоЦвет);
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "СвойствоЦветПроизводителя", мфСтрукКонстант.СвойствоЦветПроизводителя);
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "СвойствоВозраст", мфСтрукКонстант.СвойствоВозраст);
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "СвойствоМодель", мфСтрукКонстант.СвойствоМодель);
	УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, "СвойствоПол", мфСтрукКонстант.СвойствоПол);
	
	
КонецПроцедуры

Процедура НайтиСвойства()
	Отказ=Ложь;
	
	НаименованиеСвойстваПол="Пол";
	НаименованиеСвойстваВозраст="Возраст";
	НаименованиеСвойстваМодель="Модель";
	
	мфСтрукКонстант.Вставить("СвойствоПол", ПолучитьСвВо(НаименованиеСвойстваПол,мфСтрукКонстант.ТзСвойствНоменклатуры, Отказ)); 
	мфСтрукКонстант.Вставить("СвойствоВозраст", ПолучитьСвВо(НаименованиеСвойстваВозраст,мфСтрукКонстант.ТзСвойствНоменклатуры, Отказ)); 
	мфСтрукКонстант.Вставить("СвойствоМодель", ПолучитьСвВо(НаименованиеСвойстваМодель,мфСтрукКонстант.ТзСвойствНоменклатуры, Отказ)); 
	
	мфСтрукКонстант.Вставить("СвойствоАртикулSKU", ПолучитьСвВо(мфСтрукКонстант.НаименованиеСвойстваАртикул,мфСтрукКонстант.ТзСвойствХарактеристик, Отказ)); 
	мфСтрукКонстант.Вставить("СвойствоРазмер", ПолучитьСвВо(мфСтрукКонстант.НаименованиеСвойстваРазмер, мфСтрукКонстант.ТзСвойствХарактеристик, Отказ)); 
	
	Если ЦветЯвляетсяХарактеристикой Тогда
		мфСтрукКонстант.Вставить("СвойствоЦвет", ПолучитьСвВо(мфСтрукКонстант.НаименованиеСвойстваЦвет, мфСтрукКонстант.ТзСвойствХарактеристик, Отказ)); 
		мфСтрукКонстант.Вставить("СвойствоЦветПроизводителя", ПолучитьСвВо(мфСтрукКонстант.НаименованиеСвойстваЦветПроизводителя, мфСтрукКонстант.ТзСвойствХарактеристик, Отказ)); 
		
	Иначе
		мфСтрукКонстант.Вставить("СвойствоЦвет", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка()); 
		//мфСтрукКонстант.Вставить("СвойствоЦветПроизводителя",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка()); 
		мфСтрукКонстант.Вставить("СвойствоЦветПроизводителя", ПолучитьСвВо(мфСтрукКонстант.НаименованиеСвойстваЦветПроизводителя, мфСтрукКонстант.ТзСвойствНоменклатуры, Отказ));   	  // #KO изменения программиста начало 02.11.2018 15:42:33
	
	КонецЕсли;	
	


	
КонецПроцедуры



Процедура УстановитьПараметрСКДФрагмент(КомпоновщикНастроек, пНаименованиеПараметра, пЗначениеПараметра, пИспользование=Истина)
	
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(пНаименованиеПараметра));
	Параметр.Значение = пЗначениеПараметра;
	Параметр.Использование = пИспользование;
	
КонецПроцедуры


функция ВыполнитьЗапросСКД()
	
	ОО = РеквизитФормыВЗначение("Объект");
	СКД = ОО.ПолучитьМакет("Макет");
	Тз = СкомпоноватьВТаблицуЗначений(СКД, ЭтотОбъект.ОтборНоменклатуры);
	//Тз = СкомпоноватьВТаблицуЗначений(СКД, ОО.ОтборНоменклатуры);
	
	//Массив1=ТабЗначВМассив(Тз);
	//Возврат Массив1;
	
	Возврат Тз;
	
КонецФункции


Функция ВычислитьШиринуКолонки(ТекКолонка, ЗначениеЯчейки) 
	
	ДлинаСодержимого = СтрДлина(СокрЛП(ЗначениеЯчейки));
	
	Если ТекКолонка.Ширина < ДлинаСодержимого Тогда
		ТекКолонка.Ширина = Мин(ДлинаСодержимого+1, 35);
	КонецЕсли;
	
	Возврат ТекКолонка.Ширина;
	
КонецФункции


Функция ПечатьТЗ(ТЗ, ПечЗаголовок="")
	ФорматДаты 	= "ДФ=""дд.ММ.гг""";
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Колонка.Ширина = 0;
	КонецЦикла;
	
	ПечДокумент = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("ТЗ");
	
	ОО = РеквизитФормыВЗначение("Объект");
	Макет = ОО.ПолучитьМакет("ТЗ");
	
	
	////вывод заголовка
	//Область = Макет.ПолучитьОбласть("Заголовок");
	//Область.Параметры.Заголовок = ПечЗаголовок;
	//ПечДокумент.Вывести(Область);
	
	//вывод шапки
	Область = Макет.ПолучитьОбласть("Шапка|Колонка1");
	ПечДокумент.Вывести(Область);
	
	Для НомКол=1 по ТЗ.Колонки.Количество() Цикл
		ТекКолонка 		= ТЗ.Колонки[НомКол-1];
		ИмяКолонки 		= ?(ЗначениеЗаполнено(ТекКолонка.Заголовок), ТекКолонка.Заголовок, ТекКолонка.Имя);
		ИмяКолонки=ПолучитьИмяКолонки(ИмяКолонки);
		
		Область = Макет.ПолучитьОбласть("Шапка|Колонка2");
		Область.Параметры.ИмяКолонки = ИмяКолонки;
		ВыведеннаяОбласть = ПечДокумент.Присоединить(Область);
		ВыведеннаяОбласть.ШиринаКолонки = ВычислитьШиринуКолонки(ТекКолонка, ИмяКолонки);
	КонецЦикла; 
	
	//вывод строк
	Для НомСтр=1 по ТЗ.Количество() Цикл
		Область = Макет.ПолучитьОбласть("Строка|Колонка1");
		Область.Параметры.НомСтр		 = НомСтр;
		ПечДокумент.Вывести(Область);
		
		Для НомКол=1 по ТЗ.Колонки.Количество() Цикл
			ТекКолонка 		= ТЗ.Колонки[НомКол-1];
			ЗначениеЯчейки 	= ТЗ[НомСтр-1][НомКол-1];
			
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Дата")  Тогда
				ЗначениеЯчейки 	= Формат(ЗначениеЯчейки, ФорматДаты);
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("Строка|Колонка2");
			Область.Параметры.ЗначениеЯчейки = ЗначениеЯчейки;
			ВыведеннаяОбласть = ПечДокумент.Присоединить(Область);
			
			//установим параметры ячейки
			ВыведеннаяОбласть.ШиринаКолонки = ВычислитьШиринуКолонки(ТекКолонка, ЗначениеЯчейки);
			ВыведеннаяОбласть.ГоризонтальноеПоложение = ?(ТипЗнч(ЗначениеЯчейки) = Тип("Число"), ГоризонтальноеПоложение.Право, ГоризонтальноеПоложение.Лево);
		КонецЦикла; 
		
		//Состояние("Заполнение таблицы печати  "+НомСтр);
	КонецЦикла;
	
	//вывод подвала (итогов по колонкам)
	//Область = Макет.ПолучитьОбласть("Подвал|Колонка1");
	//ПечДокумент.Вывести(Область);
	//
	//Для НомКол=1 по ТЗ.Колонки.Количество() Цикл
	//	ТекКолонка 		= ТЗ.Колонки[НомКол-1];
	//	ЗначениеЯчейки 	= ?(ТЗ.Количество()<>0, ТЗ[ТЗ.Количество()-1][НомКол-1], "");
	//	ИтогПоКолонке   = ?(ТипЗнч(ЗначениеЯчейки) = Тип("Число"), ТЗ.Итог(НомКол-1), "");
	//	
	//	Область = Макет.ПолучитьОбласть("Подвал|Колонка2");
	//	Область.Параметры.ИтогПоКолонке = ИтогПоКолонке;
	//	ВыведеннаяОбласть = ПечДокумент.Присоединить(Область);
	//	
	//	//установим параметры ячейки
	//	ВыведеннаяОбласть.ШиринаКолонки = ВычислитьШиринуКолонки(ТекКолонка, ИтогПоКолонке);
	//	ВыведеннаяОбласть.ГоризонтальноеПоложение = ?(ТипЗнч(ИтогПоКолонке) = Тип("Число"), ГоризонтальноеПоложение.Право, ГоризонтальноеПоложение.Лево);
	//КонецЦикла; 
	
	ПечДокумент.ФиксацияСверху 		= 2;
	ПечДокумент.ОтображатьЗаголовки = Ложь;
	ПечДокумент.ОтображатьСетку     = Истина;
	ПечДокумент.Защита              = Ложь;
	ПечДокумент.ТолькоПросмотр      = Истина;
	//ПечДокумент.Показать(ПечЗаголовок);
	
	Возврат ПечДокумент;
	
КонецФункции //ПечатьТЗ


Функция ПолучитьИмяКолонки(ТекИмя)
	
	Если СтрНайти(ТекИмя,"Товар.")=0 Тогда
		ТекИмя=СтрЗаменить(ТекИмя, " ", "");
	КонецЕсли;	
	
	ТекИмя=СтрЗаменить(ТекИмя, "Товар.", "");
	ТекИмя=ПолучитьСимолыСлеваДоСимвола(ТекИмя, "(");
	
	Возврат ТекИмя;
КонецФункции // ПолучитьИмяКолонки()


#КонецОбласти

Процедура Инициализация()
	
	
	
	мфСтрукКонстант=Новый Структура;
	
	мфСтрукКонстант.Вставить("НаименованиеСвойстваАртикул","Артикул (Справочник ""Характеристики номенклатуры"" (Общие))");
	мфСтрукКонстант.Вставить("НаименованиеСвойстваЦвет","Цвет (Справочник ""Характеристики номенклатуры"" (Общие))");
	мфСтрукКонстант.Вставить("НаименованиеСвойстваРазмер","Размер (Справочник ""Характеристики номенклатуры"" (Общие))");
	мфСтрукКонстант.Вставить("НаименованиеСвойстваРазмерRUS","Размер RUS (Справочник ""Характеристики номенклатуры"" (Общие))");
	
	Если ЦветЯвляетсяХарактеристикой Тогда
		мфСтрукКонстант.Вставить("НаименованиеСвойстваЦветПроизводителя", "Цвет Производителя (Справочник ""Номенклатура"" (Общие))");
	Иначе
		мфСтрукКонстант.Вставить("НаименованиеСвойстваЦветПроизводителя", "Цвет Производителя");
	КонецЕсли;
	
	мфСтрукКонстант.Вставить("ТзСвойствХарактеристик", ПолучитьТзСвойствХарактеристик());
	мфСтрукКонстант.Вставить("ТзСвойствНоменклатуры", ПолучитьТзСвойствНоменклатуры());
	
	
	МассивНаимСвойствЦвет=Новый Массив;
	МассивНаимСвойствЦвет.Добавить("Цвет Производителя");
	МассивНаимСвойствЦвет.Добавить("ЦветПроизводителя");

	
	мфСоотвНаименованийПолйФайла_СвойствПВХ=Новый Соответствие;
	//мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("Возраст (Справочник ""Номенклатура"" (Общие))","Возраст");
	//мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("Пол (Справочник ""Номенклатура"" (Общие))","Пол");
	мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("Модель (Справочник ""Номенклатура"" (Общие))","Модель");
	мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("Модель","Модель");
	мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("Цвет Производителя",МассивНаимСвойствЦвет);
	//мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("Цвет Производителя","Цвет Производителя");
	//мфСоотвНаименованийПолйФайла_СвойствПВХ.Вставить("ЦветПроизводителя","ЦветПроизводителя");

	мфСтруктОбязательныхКолонок= Новый Структура("АртикулОбщий, АртикулSKU,	Подгруппа2, Подгруппа3, Возраст, Пол, Производитель, Модель, ЦветПроизводителя,	Цвет, Размер,  ШтрихКод, Сезон",
	Истина,			 Ложь, Истина, 				Истина, Ложь, Ложь, Ложь, 			Истина, Ложь, Ложь, Ложь, Ложь,  Ложь, Ложь);
	
	мфСтруктИменКолонокДляСозданияХарактеристики=Новый Структура("Характеристика, Номенклатура ,Размер,  Штрихкод, Количество, Цена_закупки, Цена_Розничная,   АртикулSKU");
	мфСтруктИменКолонокДляСозданияХарактеристики.Вставить("ХарактеристикаНоменклатуры");
	мфСтруктИменКолонокДляСозданияХарактеристики.Вставить("ХарактеристикаСсылка");
	мфСтруктИменКолонокДляСозданияХарактеристики.Вставить("РазмерRUS");

	Если ЦветЯвляетсяХарактеристикой Тогда
		мфСтруктИменКолонокДляСозданияХарактеристики.Вставить("Цвет");
		мфСтруктИменКолонокДляСозданияХарактеристики.Вставить("ЦветПроизводителя");
	КонецЕсли;	
	
	мфСтруктСоответствияПолейФайла_РеквизитовНоменклатуры=Новый Структура("АртикулОбщий, Наименование, НаименованиеПолное",
	"Артикул", "Наименование","Наименование");
	
	мфСоотвКолонокЗапрещеноДобавлениеЗначение=Новый Соответствие;
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Возраст", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Пол", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Возраст", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Производитель", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Подгруппа2", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Возраст", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Сезонность", Истина);
	мфСоотвКолонокЗапрещеноДобавлениеЗначение.Вставить("Тип", Истина);
	
КонецПроцедуры

&НаСервере
Функция ВывестиНоменклатуруНаСервере()
	// Вставить содержимое обработчика.
	Тз=ВыполнитьЗапросСКД();
	
	ДобавитКолонкуТз(Тз,"Путь");
	ДобавитКолонкуТз(Тз,"НоменклатураСсылка");
	ДобавитКолонкуТз(Тз, "ХарактеристикаСсылка");
	
	Для Каждого СтрокаТз из Тз Цикл
		СтрокаТз.Путь=глПутьТовараУниверсальныйОбменДокументами(СтрокаТз.Товар);
		СтрокаТз.НоменклатураСсылка=ЗначениеВСтрокуXML(СтрокаТз.Товар);
		СтрокаТз.ХарактеристикаСсылка=ЗначениеВСтрокуXML(СтрокаТз.ХарактеристикаНоменклатуры);
	КонецЦикла;	
	
	ТабДок=ПечатьТЗ(Тз, "Список номенклатуры");
	
	Возврат ТабДок;
	
КонецФункции

Процедура ДобавитКолонкуТз(пТз, пИмяКолонки)

	МассивИменКолонок=СтрРазделить(пИмяКолонки, ",");
	
	
	Для Каждого ЭлМассива из МассивИменКолонок Цикл
		Если пТз.Колонки.Найти(СокрЛП(ЭлМассива))=Неопределено Тогда
			пТз.Колонки.Добавить(СокрЛП(ЭлМассива));
		КонецЕсли;	
	КонецЦикла;	

	
	
КонецПроцедуры


Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Функция глПутьТовараУниверсальныйОбменДокументами(ТовСпр) Экспорт
	Перем Спр;  
	СтТов="";
	//Тов=СоздатьОбъект("Справочник.Товары");	
	//Спр=СоздатьОбъект("Справочник.Товары");	
	
	Тов=ТовСпр.ПолучитьОбъект();
	УрТов=Тов.Уровень()+1;
	ку=УрТов;
	Если УрТов>1 Тогда
		Пер=Тов.Родитель;
		Пока ку>1 Цикл
			ку=ку-1;
			Спр=Пер.ПолучитьОбъект();
			СлУровень=Спр.Наименование;
			СтТов=СлУровень+"#"+СтТов;
			Пер=Спр.Родитель;
		КонецЦикла;	
	КонецЕсли;
	СтТов=Сред(СтТов,1);
	//Сообщить("Полный путь товара=>"+СтТов+"=>"+ТовСпр);  
	Возврат СтТов;
	
КонецФункции


&НаКлиенте
Процедура ВывестиНоменклатуру(Команда)
	ТабДок=ВывестиНоменклатуруНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьЦеныПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если ЗаписыватьЦены Тогда
		Элементы.ВидЦеныПоставщика.Видимость=Истина;
		Элементы.ВидЦены.Видимость=Истина;
	Иначе
		Элементы.ВидЦеныПоставщика.Видимость=Ложь;
		Элементы.ВидЦены.Видимость=Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

//&НаСервере
//Процедура НастройкиНаСервере()
//	// Вставить содержимое обработчика.
//КонецПроцедуры

//&НаКлиенте
//Процедура Настройки(Команда)
//	//НастройкиНаСервере();
//	//ОО = РеквизитФормыВЗначение("Объект");
//	
//	ФормаНастроек = ПолучитьФорму("ВнешняяОбработка.СозданиеНоменклатурыИзExcel.Форма.ФормаНастройки",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
//	Настройки = ОтборНоменклатуры.ПолучитьНастройки();
//	//ФормаНастроек.Отчет=Объект;
//	ФормаНастроек.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
//	
//	ОткрытьФорму("ФормаНастройки",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);

//	
//КонецПроцедуры

Функция МакетВТаблицуЗначений(Макет, _ТЗ=Неопределено, флДобавлятьКолонки=истина) Экспорт
	Перем ТЗ;
	
	Если _ТЗ=Неопределено Тогда
		ТЗ=Новый ТаблицаЗначений();
		флЗаполняем=ложь;
	Иначе
		ТЗ=_ТЗ;
		флЗаполняем=истина;
	КонецЕсли;
	
	//Считываем колонки
	КоличествоКолонок=0;
	ИменаКолонок=Новый Массив();
	Кол=1;
	Пока истина Цикл
		Адрес="R1C"+Формат(Кол,"ЧГ=");
		ИмяКол=Макет.Область(Адрес).Текст;
		Если ПустаяСтрока(ИмяКол) Тогда
			Прервать;
		КонецЕсли;
		КоличествоКолонок=КоличествоКолонок+1;
		ИмяКол=Формат("Колонка"+КоличествоКолонок,  "ЧГ=0");
		Если НЕ флЗаполняем или (флЗаполняем И флДобавлятьКолонки) И ТЗ.Колонки.Найти(ИмяКол)=Неопределено Тогда
			ТЗ.Колонки.Добавить(ИмяКол, Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
		КонецЕсли;
		ИменаКолонок.Добавить(ИмяКол);
		Кол=Кол+1;
	КонецЦикла;
	
	//Считываем строки
	Стр=1; Кол=1;
	Пока истина Цикл
		Вставлено=ложь; Первая=истина;
		Для Инд=1 По КоличествоКолонок Цикл
			Адрес="R"+Формат(Стр,"ЧГ=")+"C"+Формат(Инд,"ЧГ=");
			Зн=СокрЛП(Макет.Область(Адрес).Текст);
			Если ПустаяСтрока(Зн) Тогда
				Продолжить;
			КонецЕсли;
			Если Первая Тогда
				ТСтр=ТЗ.Добавить();
				Первая=ложь;
				Вставлено=истина;
			КонецЕсли;
			ИмяКолонки=ИменаКолонок[Инд-1];
			Если ТЗ.Колонки.Найти(ИмяКолонки)<>Неопределено Тогда
				Если флЗаполняем Тогда
					//Проверяем тип - число, строка, булево
					ОписаниеТипаКолонки=ТЗ.Колонки[ИмяКолонки].ТипЗначения;
					Если ОписаниеТипаКолонки.СодержитТип(Тип("Число")) Тогда
						РезЗн=Число(Зн);
					ИначеЕсли ОписаниеТипаКолонки.СодержитТип(Тип("Строка")) Тогда
						РезЗн=Строка(Зн);
					ИначеЕсли ОписаниеТипаКолонки.СодержитТип(Тип("Булево")) Тогда
						РезЗн=Булево(Зн);
					ИначеЕсли ОписаниеТипаКолонки.СодержитТип(Тип("Дата")) Тогда
						РезЗн=Дата(Зн);
					Иначе
						РезЗн=Зн;
					КонецЕсли;
				Иначе
					РезЗн=Зн;
				КонецЕсли;
				ТСтр[ИмяКолонки]=РезЗн;
			КонецЕсли;
		КонецЦикла;
		Если Не вставлено Тогда
			Прервать;
		КонецЕсли;
		Стр=Стр+1;
		Кол=1;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Инициализация();

