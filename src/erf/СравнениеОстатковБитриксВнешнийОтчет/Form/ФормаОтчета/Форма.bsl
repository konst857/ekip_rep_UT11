
Перем СписокУдаляемыхРеквизитов;
Перем СписокУдаляемыхЭлементов;

Функция ИмяСкладаВИмяКолонки (стрСклад)
    стрКолонка="";
	проб=Ложь;
	Для н=1 По СтрДлина(стрСклад) Цикл
		с=Сред(стрСклад, н, 1); 
		Если проб=Истина Тогда с=ВРег(с); проб=Ложь; КонецЕсли;
		Если с="""" Или с="-" Тогда с="_" КонецЕсли;
		Если с=" " Тогда с=""; проб=Истина; КонецЕсли;	
		стрКолонка=стрКолонка+""+с;
	КонецЦикла;
	Возврат стрКолонка;
КонецФункции

Функция ЭксельВТаблицуЗначений(ВыбранноеИмяФайла, пАвтоЗаголовоки=Истина) 
	
	ТабДок=Новый ТабличныйДокумент;
	ТабДок.Прочитать(ВыбранноеИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	
	    // вставим заголовки
    Если пАвтоЗаголовоки Тогда 
        ВерхняяСтрока = ТабДок.Область("R1");
        ТабДок.ВставитьОбласть(ВерхняяСтрока, ВерхняяСтрока, ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
        ВерхняяСтрока = ТабДок.Область("R1");
        ВерхняяСтрока.Очистить();
        Для Кол=1 По ТабДок.ШиринаТаблицы Цикл
            ТабДок.Область(1, Кол).Текст = "Колонка" + Формат(Кол, "ЧГ=");
        КонецЦикла;
    КонецЕсли;
	
	ПостроительЗапроса=Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных=Новый ОписаниеИсточникаДанных (ТабДок.Область()); // Строкой передается имя Листа в экселе
	ПостроительЗапроса.Выполнить();
	//В файле первой строчкой должны идти названия колонок. Если этого не будет, то построитель не вернет ТЗ, т.к. не будут заданы имена колонок.
	
	РезТаб=ПостроительЗапроса.Результат.Выгрузить();  //Выбрать или еще что-нить
	Возврат РезТаб;
	
КонецФункции // ЭксельВТаблицуЗначений()




Функция  СформироватьОтчетНаСервере(пФайлЭксель)
	
	Отказ=Ложь;
	
	тзэксель=ЭксельВТаблицуЗначений(пФайлЭксель);
	тзэксель.Колонки.Добавить("СтрокаОбработана");
	тзэксель.ЗаполнитьЗначения(Ложь ,"СтрокаОбработана");
	
	
    соотвИменаКолонок = Новый Соответствие;
	сооотвИмяКолонкиСклад=Новый Соответствие;       // ключи имена колонок файла (колонка1, колонка2...), значения имена в шапке файла (склады)
	
    ЗаполнитьСоотвесвтиеСклад_Наименование(Тзэксель, соотвИменаКолонок);
	
	ЗаполнитьСоотвесвтиеИмяКолонки_Склад(Тзэксель, сооотвИмяКолонкиСклад);

	Удалить_Служебные_Строка_Тз(соотвИменаКолонок, Тзэксель, Отказ);
	
	ТабДок=Новый ТабличныйДокумент;
	
	Если Отказ Тогда
		Возврат ТабДок;
	КонецЕсли;	
	
	Если  соотвИменаКолонок.Получить("Название") <> Неопределено Тогда  // сортировать по наим. товара
		Тзэксель.Индексы.Добавить(соотвИменаКолонок.Получить("Название"));
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В файле отсуствует колонка назавание";
		Сообщение.Сообщить();
		Возврат ТабДок;
	КонецЕсли;
	
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!	
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Макет = ОтчетОбъект.ПолучитьМакет("Макет");
	
	РезультатЗапроса = Получить_РЗ_Остатки(ОтборНоменклатуры.ВыгрузитьЗначения());

	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьШапкаТаблицы2 = Макет.ПолучитьОбласть("ЗаголовокДубли");

	
	ТабДок.Очистить();
	//ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивНоменклатурыДляРегистрации=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		имяколонки=соотвИменаКолонок.Получить(Строка(ВыборкаДетальныеЗаписи.Склад));
		Расхождение=0;
		
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		
		СтрокаПоиска=СтрЗаменить(СокрЛП(ВыборкаДетальныеЗаписи.СтрокаПоиска),"  "," ");
		
		
		НоменклатураНайдена = ПроивестиПоискНоменклатуры(ВыборкаДетальныеЗаписи, имяколонки, ОбластьДетальныхЗаписей, Расхождение, соотвИменаКолонок, СтрокаПоиска, тзэксель);

		
		Если Не НоменклатураНайдена Тогда     // попробуем найти по др. строке поиска (навазние хар-ки в скобках)
			СтрокаПоиска=СтрЗаменить(СокрЛП(ВыборкаДетальныеЗаписи.СтрокаПоиска2),"  "," ");
			НоменклатураНайдена=ПроивестиПоискНоменклатуры(ВыборкаДетальныеЗаписи, имяколонки, ОбластьДетальныхЗаписей, Расхождение, соотвИменаКолонок, СтрокаПоиска, тзэксель);
		КонецЕсли;
		
		
		
		Если Не НоменклатураНайдена Тогда
			
			ВНаличииБитрикс=0;
			
			ЗаполнитьПараметрыОбласти(ВНаличииБитрикс, ВыборкаДетальныеЗаписи, ОбластьДетальныхЗаписей, Расхождение);

			
			
		КонецЕсли;	
		
		Если Расхождение <> 0 Тогда
			ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
			МассивНоменклатурыДляРегистрации.Добавить(ВыборкаДетальныеЗаписи.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	// выведем строки, которых нет на остатках по данным ИБ, но есть в файле
	МассивНаименованийДляРегистрации = ВывестиСтроки_ПоТоварам_КоторыхНет_в_ИБ(ОбластьДетальныхЗаписей, сооотвИмяКолонкиСклад, соотвИменаКолонок , ТабДок, тзэксель);

	
	ДобавитьНоменклатуруДляРегистрации_ПоНаименованию(МассивНаименованийДляРегистрации, МассивНоменклатурыДляРегистрации);

	
	ЗарегистрироватьРасхожения_к_Обмену(МассивНоменклатурыДляРегистрации);

	ВывестиДублиПоНаименованиюИзФайла(ОбластьДетальныхЗаписей, ОбластьШапкаТаблицы2, соотвИменаКолонок, ТабДок, тзэксель);
	
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Защита=РасшифровкаТаблицы;

	
	Возврат ТабДок;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции

Процедура ВывестиДублиПоНаименованиюИзФайла(Знач ОбластьДетальныхЗаписей, Знач ОбластьШапкаТаблицы2, Знач соотвИменаКолонок, Знач ТабДок, Знач тзэксель)
	
	Перем i, Кол, СтрокаТз;
	
	тзэксель.Колонки.Добавить("КоличествоДублей");
	тзэксель.ЗаполнитьЗначения(1, "КоличествоДублей");
	
	тзэксель.Свернуть(соотвИменаКолонок.Получить("Название"), "КоличествоДублей");
	
	Кол=тзэксель.Количество()-1;
	
	Для i=0 по Кол Цикл
		Если тзэксель[Кол-i].КоличествоДублей=1 Тогда
			тзэксель.Удалить(тзэксель[Кол-i]);
		Конецесли	
	КонецЦикла;	
	
	ТабДок.Вывести(ОбластьШапкаТаблицы2);
	
	Для Каждого СтрокаТз из тзэксель Цикл
		ОбластьДетальныхЗаписей.Параметры.номенклатура= СтрокаТз[соотвИменаКолонок.Получить("Название")];
		ТабДок.Вывести(ОбластьДетальныхЗаписей, 0);
	КонецЦикла;

КонецПроцедуры

Функция ПроивестиПоискНоменклатуры(Знач ВыборкаДетальныеЗаписи, Знач имяколонки, Знач ОбластьДетальныхЗаписей, Расхождение, Знач соотвИменаКолонок, Знач СтрокаПоиска, Знач тзэксель)
	
	Перем ВНаличииБитрикс, МассивСтрокТз, НоменклатураНайдена, стрИнициализацииСтруктуры, строкаТЗЭксель;
	
	стрИнициализацииСтруктуры=соотвИменаКолонок.Получить("Название");
	
	МассивСтрокТз=тзэксель.найтиСтроки(Новый Структура(стрИнициализацииСтруктуры, СтрокаПоиска));
	
	НоменклатураНайдена=Ложь;
	
	
	Если МассивСтрокТз.количество()>0 Тогда
		
		строкаТЗЭксель= МассивСтрокТз[0];
		
		
		Попытка
			ВНаличииБитрикс=?(ЗначениеЗаполнено(строкаТЗЭксель[имяколонки]), Число(строкаТЗЭксель[имяколонки]), 0);
		Исключение
			ВНаличииБитрикс=0;
		КонецПопытки;
		
		
		ЗаполнитьПараметрыОбласти(ВНаличииБитрикс, ВыборкаДетальныеЗаписи, ОбластьДетальныхЗаписей, Расхождение);
		
		строкаТЗЭксель.СтрокаОбработана=Истина;
		
		НоменклатураНайдена=Истина;
		
	КонецЕсли;
	Возврат НоменклатураНайдена;

КонецФункции

Функция ВывестиСтроки_ПоТоварам_КоторыхНет_в_ИБ(Знач ОбластьДетальныхЗаписей, СоотвИменКолонокСклад ,Знач соотвИменаКолонок, Знач ТабДок, Знач тзэксель)
	
	
	МассивНеОбработанныхСтрок=тзэксель.НайтиСтроки(Новый Структура("СтрокаОбработана", Ложь));
	
	МассивНаименованийДляРегистрации=Новый Массив;
	
	МассивСкладовИБ=ПолучитьМассивСкладов();
	
	
	Для Каждого строкаТЗЭксель из МассивНеОбработанныхСтрок Цикл
		
		
		Для Каждого КолонкаСкладФайла из  строкаТЗЭксель.Владелец().Колонки Цикл
			
			НазваниеСклада=СоотвИменКолонокСклад.Получить(КолонкаСкладФайла.Имя);
			ИмяКолонки= КолонкаСкладФайла.Имя;
			
			Если  МассивСкладовИБ.Найти(НазваниеСклада)=Неопределено Тогда  // это колонка не с назавание  склада
				Продолжить;
			КонецЕсли;	
			
			
			Попытка
				ВНаличииБитрикс=?(ЗначениеЗаполнено(строкаТЗЭксель[имяколонки]), Число(строкаТЗЭксель[имяколонки]), 0);
			Исключение
				ВНаличииБитрикс=0;
			КонецПопытки;
			
			
			Если ВНаличииБитрикс=0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Расхождение=-ВНаличииБитрикс;
			ОбластьДетальныхЗаписей.Параметры.ВНаличииБитрикс=ВНаличииБитрикс;
			ОбластьДетальныхЗаписей.Параметры.ВНаличии=0;
			ОбластьДетальныхЗаписей.Параметры.Расхождение=Расхождение;
			ОбластьДетальныхЗаписей.Параметры.номенклатура= строкаТЗЭксель[соотвИменаКолонок.Получить("Название")];
			ОбластьДетальныхЗаписей.Параметры.Склад=НазваниеСклада;
			ТабДок.Вывести(ОбластьДетальныхЗаписей, 0);
			МассивНаименованийДляРегистрации.Добавить(ОбластьДетальныхЗаписей.Параметры.номенклатура);
			
		КонецЦикла;	
		
		
	КонецЦикла;
	
	Возврат МассивНаименованийДляРегистрации;

КонецФункции


Функция ПолучитьМассивСкладов()

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Склады КАК Склады";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
	


КонецФункции // ПолучитьМассивСкладов()


Процедура ЗарегистрироватьРасхожения_к_Обмену(Знач МассивНоменклатурыДляРегистрации)
	
	
	Если РегистрироватьРасхождения_к_Обмену Тогда
		
		
		СвернутыйМассив = СвернутьМассив(МассивНоменклатурыДляРегистрации);

		
		СчетЧик=0;
		Для Каждого ДанныеДляРегистрации из СвернутыйМассив Цикл
			Если ЗначениеЗаполнено(ОграничениеПоКоличествуРегистрируемыхОбъектов) 
				и СчетЧик>ОграничениеПоКоличествуРегистрируемыхОбъектов Тогда
				Прервать;
			КонецЕсли;	
			ПланыОбмена.ЗарегистрироватьИзменения(НастройкаОбменаСайт, ДанныеДляРегистрации);
			СчетЧик=СчетЧик+1;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция СвернутьМассив(Знач МассивНоменклатурыДляРегистрации)
	
	
	Тз=Новый ТаблицаЗначений;
	Тз.Колонки.Добавить("Колонка1");
	
	Для Н=1 По МассивНоменклатурыДляРегистрации.Количество() Цикл
		Тз.Добавить();
	КонецЦикла; 
	
	
	Тз.ЗагрузитьКолонку(МассивНоменклатурыДляРегистрации, "Колонка1");
	
	
	Тз.Свернуть("Колонка1");
	
	СвернутыйМассив= Тз.ВыгрузитьКолонку("Колонка1");
	Возврат СвернутыйМассив;

КонецФункции


Функция ДобавитьНоменклатуруДляРегистрации_ПоНаименованию(пМассивНаименований, пМассивДляРегистрации)

	    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование В(&Наименование)";
	
	Запрос.УстановитьПараметр("Наименование", пМассивНаименований);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		пМассивДляРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецФункции // ДобавитьНоменклатуруДляРегистрации_ПоНаименованию()


Процедура ЗаполнитьПараметрыОбласти(Знач ВНаличииБитрикс, Знач ВыборкаДетальныеЗаписи, Знач ОбластьДетальныхЗаписей, Расхождение)
	
	
	ОбластьДетальныхЗаписей.Параметры.ВНаличииБитрикс=ВНаличииБитрикс;
	//ОбластьДетальныхЗаписей.Параметррасшифровки.Номенклатура=ВыборкаДетальныеЗаписи.номенклатура
	Расхождение=ВыборкаДетальныеЗаписи.ВНаличии-ВНаличииБитрикс;
	ОбластьДетальныхЗаписей.Параметры.Расхождение=Расхождение;

КонецПроцедуры

Процедура Удалить_Служебные_Строка_Тз(Знач соотвИменаКолонок, Знач Тзэксель, Отказ=Ложь)
	
	НаимКолонкиОстТовара="Остаток товара";
	
	Тзэксель.Удалить(Тзэксель[0]);   // удалим строку заголовков
	
	Если  соотвИменаКолонок.Получить(НаимКолонкиОстТовара) = Неопределено Тогда  // сортировать по наим. товара
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В файле отсуствует колонка "+НаимКолонкиОстТовара;
		Сообщение.Сообщить();
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	МассивСтрокУдаления=тзэксель.найтиСтроки(Новый Структура(соотвИменаКолонок.Получить(НаимКолонкиОстТовара), "Содержит торговые предложения▼"));
	
	Для Каждого СтрокаТз из МассивСтрокУдаления Цикл
		Тзэксель.Удалить(СтрокаТз);
	КонецЦикла;

КонецПроцедуры

Функция Получить_РЗ_Остатки(пМассвиНоменклатуры)
	
	Перем Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Склад КАК Склад,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	|	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	СвободныеОстаткиОстатки.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА СвободныеОстаткиОстатки.Характеристика.Ссылка ЕСТЬ NULL
	|			ТОГДА СвободныеОстаткиОстатки.Номенклатура.Наименование
	|		ИНАЧЕ СвободныеОстаткиОстатки.Номенклатура.Наименование + "", "" + СвободныеОстаткиОстатки.Характеристика.Наименование
	|	КОНЕЦ КАК СтрокаПоиска,
	|	СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток) КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА СвободныеОстаткиОстатки.Характеристика.Ссылка ЕСТЬ NULL
	|			ТОГДА СвободныеОстаткиОстатки.Номенклатура.Наименование
	|		ИНАЧЕ СвободныеОстаткиОстатки.Номенклатура.Наименование + "" ("" + СвободныеОстаткиОстатки.Характеристика.Наименование + "")""
	|	КОНЕЦ КАК СтрокаПоиска2
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(, %Номенклатура В ИЕРАРХИИ (&МассивНоменклатуры)%) КАК СвободныеОстаткиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Склад,
	|	СвободныеОстаткиОстатки.Характеристика,
	|	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	|	ВЫБОР
	|		КОГДА СвободныеОстаткиОстатки.Характеристика.Ссылка ЕСТЬ NULL
	|			ТОГДА СвободныеОстаткиОстатки.Номенклатура.Наименование
	|		ИНАЧЕ СвободныеОстаткиОстатки.Номенклатура.Наименование + "", "" + СвободныеОстаткиОстатки.Характеристика.Наименование
	|	КОНЕЦ,
	|	СвободныеОстаткиОстатки.Характеристика.Наименование,
	|	ВЫБОР
	|		КОГДА СвободныеОстаткиОстатки.Характеристика.Ссылка ЕСТЬ NULL
	|			ТОГДА СвободныеОстаткиОстатки.Номенклатура.Наименование
	|		ИНАЧЕ СвободныеОстаткиОстатки.Номенклатура.Наименование + "" ("" + СвободныеОстаткиОстатки.Характеристика.Наименование + "")""
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	СвободныеОстаткиОстатки.Номенклатура.Наименование";
	
	Если пМассвиНоменклатуры.Количество()>0 Тогда
		Запрос.Текст=СтрЗаменить(запрос.Текст,"%Номенклатура В ИЕРАРХИИ (&МассивНоменклатуры)%", " Номенклатура В ИЕРАРХИИ (&МассивНоменклатуры) ");
	Иначе
		Запрос.Текст=СтрЗаменить(запрос.Текст,"%Номенклатура В ИЕРАРХИИ (&МассивНоменклатуры)%", "");
	КонецЕсли;
	
	ЗАпрос.УстановитьПараметр("МассивНоменклатуры", пМассвиНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;

КонецФункции

Процедура ЗаполнитьСоотвесвтиеСклад_Наименование(пТз_Ексель, соотвИменаКолонок)
	// ключ - Наименование склада
	// значение - Имя колонки файла ЕКсель
	
	Для каждого Колонка из пТз_Ексель.Колонки Цикл
		
		соотвИменаКолонок.Вставить(пТз_Ексель[0][Колонка.Имя], Колонка.Имя);
		
	КонецЦикла;	
	
	
	
КонецПроцедуры


Процедура ЗаполнитьСоотвесвтиеИмяКолонки_Склад (пТз_Ексель, соотвИменаКолонок)
	// ключ - Наименование склада
	// значение - Имя колонки файла ЕКсель
	
	Для каждого Колонка из пТз_Ексель.Колонки Цикл
		
		соотвИменаКолонок.Вставить( Колонка.Имя, пТз_Ексель[0][Колонка.Имя]);
		
	КонецЦикла;	
	
	
	
КонецПроцедуры




&НаКлиенте
Процедура ЗагрузитьФайлИнтерактивно(Команда)
	
	// Описание процедуры, которая будет вызвана после закрытия окна выбора файла
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлЗавершение", ЭтотОбъект);
	// Описание диалога выбора файла
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр =  НСтр("ru=’Книга Excel 2007 (*.xlsx)|*.xlsx'");
	// Начало помещение файла из файловой системы во временное хранилище
	НачатьПомещениеФайла(ОписаниеОповещения, , Диалог, Истина, УникальныйИдентификатор);
	
КонецПроцедуры



&НаКлиенте
Процедура ЗагрузитьФайлЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		// Файл выбран
		ТабДок=ВыполнитьЗагрузкуНаСервере(Адрес);
		ТабДок.показать();
		ТабДок.ФиксацияСверху=1;

	Иначе
		
		// Пользователь отказался от выбора файла
		Сообщить("Файл не был выбран");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗагрузкуНаСервере(Адрес)
	
	// Получение данных из временного хранилища
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	// Получение имени временного файла
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	// Сохранение данных во временный файл
	Данные.Записать(ИмяВременногоФайла);
	
	// Обработка файла…
	
	ТабДок=СформироватьОтчетНаСервере(ИмяВременногоФайла);
	
	// Хорошим тоном будет удалить временный файл
	Попытка
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
	КонецПопытки;
	
	Возврат ТабДок;
	
КонецФункции